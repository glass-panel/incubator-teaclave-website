"use strict";(self.webpackChunkapache_teaclave_incubating=self.webpackChunkapache_teaclave_incubating||[]).push([[172],{7956:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"functions-in-python","title":"Write Functions in Python","description":"The Teaclave platform provides a convenient way to register a customized","source":"@site/docs/functions-in-python.md","sourceDirName":".","slug":"/functions-in-python","permalink":"/docs/functions-in-python","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/incubator-teaclave-website/tree/master/sgx-sdk-api-docs/docs/functions-in-python.md","tags":[],"version":"current","frontMatter":{"permalink":"/docs/functions-in-python"},"sidebar":"tutorialSidebar","previous":{"title":"Executing WebAssembly in Teaclave","permalink":"/docs/executing-wasm"},"next":{"title":"Inference Task with TVM in Teaclave","permalink":"/docs/inference-with-tvm"}}');var o=t(4848),r=t(8453);const s={permalink:"/docs/functions-in-python"},a="Write Functions in Python",c={},l=[{value:"Entrypoint",id:"entrypoint",level:2},{value:"Modules",id:"modules",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"write-functions-in-python",children:"Write Functions in Python"})}),"\n",(0,o.jsx)(n.p,{children:"The Teaclave platform provides a convenient way to register a customized\r\nfunction written in Python, and the function is interpreted at runtime in an\r\nisolated trusted execution environment (i.e., Intel SGX)."}),"\n",(0,o.jsx)(n.h2,{id:"entrypoint",children:"Entrypoint"}),"\n",(0,o.jsx)(n.p,{children:"Here is an simple example of an echo function:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"def entrypoint(argv):\r\n    assert argv[0] == 'message'\r\n    assert argv[1] is not None\r\n    return argv[1]\n"})}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"entrypoint"}),' function defined above is the "entrypoint" to executing the\r\nfunction. It takes one argument which is a list of arguments of this echo\r\nfunction. The return value of the ',(0,o.jsx)(n.code,{children:"entrypoint"})," function will be passed back to\r\nthe client."]}),"\n",(0,o.jsxs)(n.p,{children:["::: tip NOTE\r\nNote that the function arguments in key-value format passed from the platform\r\nare flattened into a list. For example, the ",(0,o.jsx)(n.code,{children:'{"message": "Hello, Teaclave!"}'}),"\r\narguments will become ",(0,o.jsx)(n.code,{children:'"message"'})," (",(0,o.jsx)(n.code,{children:"argv[0]"}),") and ",(0,o.jsx)(n.code,{children:'"Hello, Teaclave!"'}),"\r\n(",(0,o.jsx)(n.code,{children:"argv[1]"}),").\r\n:::"]}),"\n",(0,o.jsx)(n.h2,{id:"modules",children:"Modules"}),"\n",(0,o.jsxs)(n.p,{children:["Current Python executor (i.e., MesaPy) already supports many modules of the\r\noriginal Python standard library such as ",(0,o.jsx)(n.code,{children:"marshal"}),", ",(0,o.jsx)(n.code,{children:"math"}),", ",(0,o.jsx)(n.code,{children:"binascii"}),",\r\n",(0,o.jsx)(n.code,{children:"itertools"}),", ",(0,o.jsx)(n.code,{children:"micronumpy"}),". You can find a full list of available modules in the\r\n",(0,o.jsx)(n.a,{href:"https://github.com/mesalock-linux/mesapy/blob/sgx/sgx/README.md",children:"document of MesaPy for SGX"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["Besides these modules for general computation, you may curious about doing file\r\nI/O in customized Python function. We provides APIs to integrated with the\r\nexecutor runtime to read/write files registered along with the task. You can\r\neither open a file through the ",(0,o.jsx)(n.code,{children:"teaclave_open"})," function or with the ",(0,o.jsx)(n.code,{children:"teaclave"}),"\r\nmodule like this:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'# open input via built-in teaclave_open\r\nwith teaclave_open("input_file", "rb") as f:\r\n    line = f.readline()\r\n\r\n# open input via teaclave module\r\nfrom teaclave import open\r\nwith open("output_file", "wb") as f:\r\n    f.write("This message is from Mesapy!")\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Either function will give an ",(0,o.jsx)(n.code,{children:"file"})," object in Python, you can use it to read\r\nlines or write data. And the first argument is the key of the registered\r\ninput/output files."]}),"\n",(0,o.jsxs)(n.p,{children:["You can learn more about advanced usages in the example of\r\n",(0,o.jsx)(n.a,{href:"https://github.com/apache/incubator-teaclave/tree/master/examples/python",children:"logistic regression in Python"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var i=t(6540);const o={},r=i.createContext(o);function s(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);