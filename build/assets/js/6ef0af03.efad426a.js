"use strict";(self.webpackChunkapache_teaclave_incubating=self.webpackChunkapache_teaclave_incubating||[]).push([[1620],{2512:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>s,contentTitle:()=>c,default:()=>l,frontMatter:()=>i,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"codebase/worker","title":"Teaclave Worker","description":"The worker layer in Teaclave is a thin layer to manage executors and runtimes.","source":"@site/docs/codebase/worker.md","sourceDirName":"codebase","slug":"/codebase/worker","permalink":"/docs/codebase/worker","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/incubator-teaclave-website/tree/master/sgx-sdk-api-docs/docs/codebase/worker.md","tags":[],"version":"current","frontMatter":{"permalink":"/docs/codebase/worker"},"sidebar":"tutorialSidebar","previous":{"title":"Types","permalink":"/docs/codebase/types"},"next":{"title":"Development Tips","permalink":"/docs/development-tips"}}');var a=n(4848),o=n(8453);const i={permalink:"/docs/codebase/worker"},c="Teaclave Worker",s={},d=[];function u(e){const r={code:"code",em:"em",h1:"h1",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(r.header,{children:(0,a.jsx)(r.h1,{id:"teaclave-worker",children:"Teaclave Worker"})}),"\n",(0,a.jsx)(r.p,{children:"The worker layer in Teaclave is a thin layer to manage executors and runtimes.\r\nThere are several executors and runtime for different usage scenarios.\r\nDevelopers can customize and register different executors in a worker."}),"\n",(0,a.jsx)(r.p,{children:"This diagram demonstrates the relationship between the execution service,\r\nworker, executor and runtime."}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{children:"    +-----------------------------------+\r\n    |        Execution Service          |\r\n    |  +-----------------------------+  |\r\n    |  |            Worker           |  |\r\n    |  |  +----------+  +---------+  |  |\r\n    |  |  | Executor |  | Runtime |  |  |\r\n    |  |  +----------+  +---------+  |  |\r\n    |  +-----------------------------+  |\r\n    +-----------------------------------+\n"})}),"\n",(0,a.jsxs)(r.p,{children:["The execution service is a service instance to maintain communication with other\r\nservices through attested RPC, prepare data and related information for function\r\nexecution, execute a function with a ",(0,a.jsx)(r.em,{children:"worker"})," and report execution result. The\r\nworker will prepare a proper ",(0,a.jsx)(r.em,{children:"executor"})," and ",(0,a.jsx)(r.em,{children:"runtime"})," combination, and then\r\ndispatch the function to the executor, which will eventually run the function.\r\nAt the same time, the runtime will help to manage input and output data of\r\nfunctions and provide interfaces in executor."]}),"\n",(0,a.jsx)(r.p,{children:"Currently, there are several executors (e.g., mesapy, builtin) and runtime\r\n(e.g., default, raw-io) are implemented and registered in worker. Please refer\r\nto the docs of executor and runtime for more details."})]})}function l(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,a.jsx)(r,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>i,x:()=>c});var t=n(6540);const a={},o=t.createContext(a);function i(e){const r=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),t.createElement(o.Provider,{value:r},e.children)}}}]);