"use strict";(self.webpackChunkapache_teaclave_incubating=self.webpackChunkapache_teaclave_incubating||[]).push([[4276],{924:e=>{e.exports=JSON.parse('{"permalink":"/blog/2019/08/20/apache-incubation-proposal","editUrl":"https://github.com/apache/incubator-teaclave-website/tree/master/site/blog/blog/2019-08-20-apache-incubation-proposal.md","source":"@site/blog/2019-08-20-apache-incubation-proposal.md","title":"Aapache Incubation Proposal","description":"s","date":"2019-08-20T00:00:00.000Z","tags":[],"hasTruncateMarker":true,"authors":[{"name":"The Teaclave PPMC","key":null,"page":null}],"frontMatter":{"title":"Aapache Incubation Proposal","date":"2019-08-20T00:00:00.000Z","author":"The Teaclave PPMC"},"unlisted":false,"prevItem":{"title":"Mitigation of Intel-SA-00219 in Teaclave SGX SDK","permalink":"/blog/2019/12/03/mitigation-of-intel-sa-00219-in-teaclave-sgx-sdk"}}')},8155:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>t,toc:()=>h});var t=r(924),a=r(4848),o=r(8453);const i={title:"Aapache Incubation Proposal",date:new Date("2019-08-20T00:00:00.000Z"),author:"The Teaclave PPMC"},s=void 0,c={authorsImageUrls:[void 0]},h=[];function l(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"MesaTEE Apache Incubation Proposal\r\n\r\n= Abstract =\r\n\r\nMesaTEE is a framework for universal secure computing.\r\n\r\n= Proposal =\r\n\r\nMesaTEE is the next-gen solution to enable general computing service for\r\nsecurity-critical scenarios. It will allow even the most sensitive data to\r\nbe securely processed to enable offshore businesses without leakage.\r\n\r\nThe solution combines the advanced Hybrid Memory Safety (HMS) model and the\r\npower of the Trusted Computing technologies (e.g., TPM) as well as the\r\nConfidential Computing technologies (e.g., Intel SGX).\r\n\r\n  * Code base:\r\n    * https://github.com/mesalock-linux/mesatee\r\n    * https://github.com/baidu/rust-sgx-sdk\r\n  * Website: https://mesatee.org\r\n  * Documentation: https://mesatee.org/doc/mesatee_sdk/\r\n\r\n= Background =\r\n\r\nThe emerging technologies of big data analytics, machine learning, cloud/edge\r\ncomputing, and blockchain are significantly boosting our productivity, but at\r\nthe same time they are bringing new confidentiality and integrity concerns. On\r\npublic cloud and blockchain, sensitive data like health and financial records\r\nmay be consumed at runtime by untrusted computing processes running on\r\ncompromised platforms; during in-house data exchange, confidential information\r\nmay cross different clearance boundaries and possibly fall into the wrong hands;\r\nalso not to mention the privacy issue arises in offshore data supply chains.\r\n\r\nAlthough the consequences of data breaching have been extensively elaborated, we\r\nshould also note that proprietary computing algorithms themselves, such as AI\r\nmodels, also need to be well protected. Once leaked, attackers can steal the\r\nintellectual properties, or launch whitebox attacks and easily exploit the\r\nweaknesses of the models.\r\n\r\nFacing all these risky scenarios, we are in desperate need of a trusted and\r\nsecure mechanism, enabling us to protect both private data and proprietary\r\ncomputing models during a migratable execution in potentially unsafe\r\nenvironments, yet preserving functionalities, performance, compatibility, and\r\nflexibility. MesaTEE is targeting to be, as we call it, the full \"Universal\r\nSecure Computing\" stack, so it can help users resolve these runtime security\r\nrisks.\r\n\r\nMesaTEE aims to promote the development of universal secure computing ecosystem\r\nthrough open source and openness, to provide basic support for trust protection\r\nfor the productivity revolution brought by big data and AI, to completely solve\r\nthe data exchange or multi-party computing between departments/companies, to\r\nenable privacy-crucial services such as financial and medical care using\r\nblockchain/cloud services, and to convoy businesses that are closely related to\r\nlife and safety such as autonomous driving. MesaTEE has been working closely\r\nwith mainstream cloud computing/blockchain/chip vendors and\r\nuniversities/research institutions to promote hardware TEE, software memory\r\nsafety, and versatile computing services to create an internationally protected\r\nand flexible secure computing framework. MesaTEE\u2019s open-source release will\r\ngreatly accelerate the development of the next generation of big data business\r\napplications, and it is also of great importance to promoting AI in all business\r\nareas.\r\n\r\n= Rationale =\r\n\r\nMesaTEE stack redefines future AI and big data analytics by providing a trusted\r\nand secure offshore computing environment. The confidentiality and privacy of\r\ndata and models can be well protected with MesaTEE, even if data and model\r\noriginate from different parties with no mutual trust. Moreover, the computing\r\nplatform itself is not necessarily trusted either. The Trusted Computing Base\r\n(TCB) can thus be largely reduced to MesaTEE framework alone. A detailed\r\ndescription of target use-cases can be found at\r\nhttps://github.com/mesalock-linux/mesatee/blob/master/docs/case_study.md.\r\n\r\nWe believe that Apache way of open source community empowers MesaTEE to attract\r\na diverse set of contributors who can bring new ideas into the project.\r\n\r\n= Initial Goals =\r\n\r\n  * Move the existing codebase, website, documentation, and mailing lists to an\r\n    Apache-hosted infrastructure.\r\n  * Integrate with the Apache development process.\r\n  * Ensure all dependencies are compliant with Apache License version 2.0.\r\n  * Incrementally develop and release per Apache guidelines.\r\n\r\n= Current Status =\r\n\r\nThe MesaTEE project (and its sub-project Rust SGX SDK) has been designed and\r\ndeveloped at Baidu since 2017, and was open sourced under the Apache License,\r\nVersion 2.0 in 2019. The source code is currently hosted at github.com\r\n(https://github.com/mesalock-linux/mesatee and\r\nhttps://github.com/baidu/rust-sgx-sdk), which will seed the Apache git\r\nrepository.\r\n\r\n== Meritocracy ==\r\n\r\nWe are fully committed to open, transparent, and meritocratic interactions with\r\nour community. In fact, one of the primary motivations for us to enter the\r\nincubation process is to be able to rely on Apache best practices that can\r\nensure meritocracy. This will eventually help incorporate the best ideas back\r\ninto the project and enable contributors to continue investing their time in the\r\nproject. We already have some guidelines to help external contributors:\r\n\r\n  * https://github.com/mesalock-linux/mesatee/blob/master/docs/rust_guideline.md\r\n  * https://github.com/mesalock-linux/mesatee/blob/master/docs/how_to_add_your_function.md\r\n  * https://github.com/mesalock-linux/mesatee/blob/master/CODE_OF_CONDUCT.md\r\n\r\n== Community ==\r\n\r\nThe MesaTEE community is fairly young. Since our sub-project (Rust SGX SDK) was\r\nopen sourced in 2017, we received many contributions from various companies and\r\nindividual researchers (https://github.com/baidu/rust-sgx-sdk/pulls). Our\r\nprimary goal during the incubation would be to grow the community and groom our\r\nexisting active contributors for committers.\r\n\r\n== Core Developers ==\r\n\r\nCurrent core developers work at Baidu. We are confident that incubation will\r\nhelp us grow a diverse community in an open and collaborative way.\r\n\r\n== Alignment ==\r\n\r\nMesaTEE is designed as a framework for universal secure computing. This is\r\ncomplementary to the Apache's projects, providing a trusted and secure computing\r\nframework.\r\n\r\nOur sincere hope is that being a part of the Apache foundation would enable us\r\nto drive the future of the project in alignment with the other Apache projects\r\nfor the benefit of thousands of organizations that already leverage these\r\nprojects.\r\n\r\n= Known Risks =\r\n\r\n== Orphaned Products ==\r\n\r\nThe risk of abandonment of MesaTEE is low. MesaTEE has been incubated at Baidu\r\nfor over two years. Baidu is committed to the further development of the project\r\nand will keep investing resources towards the Apache processes and community\r\nbuilding, during the incubation period.\r\n\r\n== Inexperience with Open Source ==\r\n\r\nEven though the initial committers are new to the Apache world, some have\r\nconsiderable open source experience - Yu Ding, Yiming Jing, Mingshen Sun. We\r\nhave been successfully managing the current open source community, answering\r\nquestions, and taking feedback already. Moreover, we hope to obtain guidance and\r\nmentorship from current ASF members to help us succeed in the incubation.\r\n\r\n== Length of Incubation ==\r\n\r\nWe expect the project to be in incubation for 2 years or less.\r\n\r\n== Homogenous Developers ==\r\n\r\nCurrently, the lead developers for MesaTEE are from Baidu. However, we have an\r\nactive set of early contributors/collaborators from Alibaba and other companies,\r\nwhich we hope will increase the diversity going forward. Once again, a primary\r\nmotivation for the incubation is to facilitate this in the Apache way.\r\n\r\n== Reliance on Salaried Developers ==\r\n\r\nBoth the current committers and early contributors have several years of core\r\nexpertise around designing trusted computing systems. Current committers are\r\nvery passionate about the project and have already invested hundreds of hours\r\ntowards helping and building the community. Thus, even with employer changes, we\r\nexpect they will be able to actively engage in the project either because they\r\nwill be working in similar areas even with newer employers or out of belief in\r\nthe project.\r\n\r\n== Relationships with Other Apache Products ==\r\n\r\nTo the best of our knowledge, there are no directly competing projects with\r\nMesaTEE that offer all of the feature set - memory safety, secure computing,\r\nmulti-party computation, etc. However, some projects share similar goals, e.g.,\r\nOpenWhisk which provides a serverless cloud platform. We are committed to open\r\ncollaboration with such Apache projects and incorporating changes to MesaTEE or\r\ncontributing patches to other projects, with the goal of making it easier for\r\nthe community at large, to adopt these open source technologies.\r\n\r\n== Excessive Fascination with the Apache Brand ==\r\n\r\nThe Apache Brand is very respected. We are very honored to have the opportunity\r\nto join ASF, with the understanding that its brand policies shall be respected.\r\nAnd we hope Apache can help us build the ecosystem around MesaTEE and attract\r\nmore developers.\r\n\r\n= Documentation =\r\n\r\n  * Detailed documentation: https://github.com/mesalock-linux/mesatee\r\n  * MesaTEE SDK API documentation: https://mesatee.org/doc/mesatee_sdk/\r\n\r\n= Initial Source =\r\n\r\nThe codebase is currently hosted on Github:\r\n\r\n  * https://github.com/mesalock-linux/mesatee\r\n  * https://github.com/baidu/rust-sgx-sdk\r\n\r\nDuring incubation, the codebase will be migrated to an Apache infrastructure.\r\nThe source code of MesaTEE is under Apache version 2.0 License, while Rust SGX\r\nSDK is under BSD 3-Clauses License.\r\n\r\n= Source and Intellectual Property Submission Plan =\r\n\r\nWe will work with the committers to get ICLAs signed. We will provide a Software\r\nGrant Agreement from an authorized signer per\r\nhttps://www.apache.org/licenses/software-grant-template.pdf\r\n\r\n= External Dependencies =\r\n\r\nMesaTEE directly depends on these third-party Rust crates:\r\n\r\n  * adler32, 1.0.3, BSD-3-Clause\r\n  * aho-corasick, 0.7.4, Unlicense/MIT\r\n  * array_tool, 1.0.3, MIT\r\n  * assert_matches, 1.3.0, MIT/Apache-2.0\r\n  * autocfg, 0.1.4, Apache-2.0/MIT\r\n  * base64, 0.10.1, MIT/Apache-2.0\r\n  * bincode, 1.1.4, MIT\r\n  * bit-vec, 0.6.1, MIT/Apache-2.0\r\n  * bitflags, 1.1.0, MIT/Apache-2.0\r\n  * byteorder, 1.3.2, MIT/Unlicense\r\n  * bytes, 0.5.0, MIT\r\n  * cc, 1.0.37, MIT/Apache-2.0\r\n  * cfg-if, 0.1.9, MIT/Apache-2.0\r\n  * chrono, 0.4.7, MIT/Apache-2.0\r\n  * color_quant, 1.0.1, MIT\r\n  * crc32fast, 1.2.0, MIT\r\n  * ctor, 0.1.9, Apache-2.0\r\n  * deflate, 0.7.20, MIT/Apache-2.0\r\n  * either, 1.5.2, MIT/Apache-2.0\r\n  * env_logger, 0.6.2, MIT/Apache-2.0\r\n  * erased-serde, 0.3.9, MIT\r\n  * fnv, 1.0.6, Apache-2.0\r\n  * getrandom, 0.1.6, MIT\r\n  * ghost, 0.1.0, MIT/Apache-2.0\r\n  * gif, 0.10.2, MIT/Apache-2.0\r\n  * gzip-header, 0.3.0, MIT/Apache-2.0\r\n  * half, 1.3.0, MIT/Apache-2.0\r\n  * hashbrown, 0.3.1, Apache-2.0/MIT\r\n  * heapsize, 0.4.2, MIT/Apache-2.0\r\n  * hex, 0.3.2, MIT\r\n  * http, 0.1.17, MIT/Apache-2.0\r\n  * httparse, 1.3.4, MIT/Apache-2.0\r\n  * humantime, 1.2.0, MIT/Apache-2.0\r\n  * image, 0.21.0, MIT\r\n  * inflate, 0.4.5, MIT\r\n  * inventory, 0.1.3, MIT\r\n  * inventory-impl, 0.1.3, MIT\r\n  * iovec, 0.2.0, MIT/Apache-2.0\r\n  * itertools, 0.8.0, MIT/Apache-2.0\r\n  * itoa, 0.4.4, MIT\r\n  * jpeg-decoder, 0.1.15, MIT\r\n  * lazy_static, 1.3.0, MIT/Apache-2.0\r\n  * libc, 0.2.59, MIT\r\n  * linked-hash-map, 0.5.2, MIT/Apache-2.0\r\n  * log, 0.4.7, MIT\r\n  * lzw, 0.10.0, MIT/Apache-2.0\r\n  * matrixmultiply, 0.2.2, MIT/Apache-2.0\r\n  * md5, 0.6.1, Apache-2.0/MIT\r\n  * memchr, 2.2.1, Unlicense/MIT\r\n  * memory_units, 0.3.0, MPL-2.0\r\n  * net2, 0.2.33, MIT/Apache-2.0\r\n  * num, 0.2.0, MIT/Apache-2.0\r\n  * num-bigint, 0.2.2, MIT/Apache-2.0\r\n  * num-complex, 0.2.3, MIT/Apache-2.0\r\n  * num-integer, 0.1.41, MIT/Apache-2.0\r\n  * num-iter, 0.1.39, MIT/Apache-2.0\r\n  * num-rational, 0.2.2, MIT/Apache-2.0\r\n  * num-traits, 0.2.8, MIT/Apache-2.0\r\n  * parity-wasm, 0.31.3, MIT/Apache-2.0\r\n  * png, 0.14.1, MIT/Apache-2.0\r\n  * proc-macro2, 0.4.30, MIT/Apache-2.0\r\n  * profiler_builtins, 0.1.0, profiler_builtins\r\n  * quick-error, 1.2.2, MIT/Apache-2.0\r\n  * quote, 0.3.15, MIT\r\n  * quote, 0.6.13, MIT\r\n  * rand, 0.6.5, MIT/Apache-2.0\r\n  * rand_core, 0.4.0, MIT/Apache-2.0\r\n  * rand_hc, 0.1.0, MIT/Apache-2.0\r\n  * rand_pcg, 0.1.2, MIT/Apache-2.0\r\n  * rawpointer, 0.1.0, MIT/Apache-2.0\r\n  * regex, 1.1.9, MIT/Apache-2.0\r\n  * regex-syntax, 0.6.8, MIT/Apache-2.0\r\n  * ring, 0.14.6, ISC-style\r\n  * rulinalg, 0.4.2, MIT\r\n  * rustls, 0.15.2, Apache-2.0/ISC/MIT\r\n  * rusty-machine, 0.5.4, MIT\r\n  * ryu, 1.0.0, Apache-2.0\r\n  * sct, 0.5.0, Apache-2.0/ISC/MIT\r\n  * serde, 1.0.94, MIT\r\n  * serde_cbor, 0.10.0, MIT/Apache-2.0\r\n  * serde_derive, 1.0.94, MIT\r\n  * serde_json, 1.0.40, MIT\r\n  * sha1, 0.6.0, BSD-3-Clause\r\n  * sha2, 0.8.0, sha2\r\n  * spin, 0.5.0, MIT\r\n  * syn, 0.11.11, MIT\r\n  * syn, 0.15.39, MIT\r\n  * synom, 0.11.3, MIT/Apache-2.0\r\n  * termcolor, 1.0.5, Unlicense\r\n  * thread_local, 0.3.6, Apache-2.0/MIT\r\n  * tiff, 0.3.1, MIT\r\n  * toml, 0.5.1, MIT/Apache-2.0\r\n  * typetag, 0.1.3, MIT\r\n  * typetag-impl, 0.1.3, MIT\r\n  * ucd-util, 0.1.3, MIT/Apache-2.0\r\n  * unicode-xid, 0.0.4, MIT/Apache-2.0\r\n  * unicode-xid, 0.1.0, MIT/Apache-2.0\r\n  * utf8-ranges, 1.0.3, Unlicense/MIT\r\n  * uuid, 0.7.4, Apache-2.0\r\n  * wabt, 0.6.0, Apache-2.0\r\n  * wasmi, 0.5.0, MIT/Apache-2.0\r\n  * wasmi-validation, 0.1.0, MIT/Apache-2.0\r\n  * webpki, 0.19.1, ISC-style\r\n  * webpki-roots, 0.16.0, MPL-2.0\r\n  * winapi, 0.3.7, MIT/Apache-2.0\r\n  * winapi-i686-pc-windows-gnu, 0.4.0, MIT/Apache-2.0\r\n  * winapi-util, 0.1.2, Unlicense/MIT\r\n  * winapi-x86_64-pc-windows-gnu, 0.4.0, MIT/Apache-2.0\r\n  * wincolor, 1.0.1, Unlicense/MIT\r\n  * yasna, 0.3.1, MIT/Apache-2.0\r\n\r\nNote that this is not an exhaustive dependency list and only direct\r\ndependencies\r\nof MesaTEE's trusted libs are included.\r\n\r\n== Cryptography ==\r\n\r\nMesaTEE uses following cryptographic libraries:\r\n\r\n  * ring (https://github.com/briansmith/ring): a Rust crypto library based on\r\nBoringSSL\r\n  * rustls: a Rust TLS library\r\n  * sgx_tcrypto in Intel SGX SDK (https://software.intel.com/en-us/sgx/sdk)\r\n\r\n= Required Resources =\r\n\r\n== Mailing lists ==\r\n\r\n  * private@mesatee.incubator.apache.org (with moderated subscriptions)\r\n  * dev@mesatee.incubator.apache.org\r\n  * commits@mesatee.incubator.apache.org\r\n  * user@mesatee.incubator.apache.org\r\n\r\n== Git Repositories ==\r\n\r\nUpon entering incubation, we want to transfer the existing repos from\r\nhttps://github.com/mesalock-linux/mesatee and\r\nhttps://github.com/baidu/rust-sgx-sdk to Apache organization in GitHub like:\r\n\r\n  * https://github.com/apache/incubator-mesatee\r\n  * https://github.com/apache/incubator-mesatee-rust-sgx-sdk\r\n\r\n== Issue Tracking ==\r\n\r\nMesaTEE currently uses GitHub to track issues. Would like to continue doing\r\nso.\r\n\r\n== Continuous Integration Service ==\r\n\r\nMesaTEE currently uses self-hosted continuous integration (CI) service which can\r\nhelp developers to automatically test commits. The CI service involves several\r\nnodes which support Intel SGX. We would like to continue doing so.\r\n\r\n= Initial Committers =\r\n\r\nThe list is sorted alphabetically:\r\n\r\n  * Mingshen Sun <mssun at mesatee.org>\r\n  * Pei Wang <wangpei at mesatee.org>\r\n  * Rundong Zhou <rundongzhou at mesatee.org>\r\n  * Tao Wei <lenx at mesatee.org>\r\n  * Tongxin Li <litongxin at mesatee.org>\r\n  * Yiming Jing <jingyiming at mesatee.org>\r\n  * Yu Ding <d at mesatee.org>\r\n  * Yulong Zhang <ylzhang at mesatee.org>\r\n  * Zhaofeng Chen <zf at mesatee.org>\r\n\r\n= Sponsors =\r\n\r\n== Champion ==\r\n\r\n  * Zhijie Shen <zjshen@apache.org>\r\n\r\n== Nominated Mentors ==\r\n\r\n  * Jianyong Dai <daijy@apache.org>\r\n  * Luciano Resende <lresende@apache.org>\r\n  * Matt Sicker\r\n  * Furkan Kamaci\r\n\r\n== Sponsoring Entity ==\r\n\r\nThe Incubator PMC\n"})})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>s});var t=r(6540);const a={},o=t.createContext(a);function i(e){const n=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);