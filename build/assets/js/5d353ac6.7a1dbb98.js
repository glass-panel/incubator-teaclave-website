"use strict";(self.webpackChunkapache_teaclave_incubating=self.webpackChunkapache_teaclave_incubating||[]).push([[6759],{8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>o});var r=n(6540);const a={},s=r.createContext(a);function i(e){const t=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),r.createElement(s.Provider,{value:t},e.children)}},9897:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"threat-model","title":"Threat Model","description":"With its strongest security setting applied, Teaclave guarantees data","source":"@site/docs/threat-model.md","sourceDirName":".","slug":"/threat-model","permalink":"/docs/threat-model","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/incubator-teaclave-website/tree/master/sgx-sdk-api-docs/docs/threat-model.md","tags":[],"version":"current","frontMatter":{"permalink":"/docs/threat-model"},"sidebar":"tutorialSidebar","previous":{"title":"use-vscode---rls---rust-analysis---sgx-gdb-for-graphic-developing-(not-in-docker)","permalink":"/docs/sgx-sdk-docs/use-vscode---rls---rust-analysis---sgx-gdb-for-graphic-developing-(not-in-docker)"},"next":{"title":"Teaclave TrustZone SDK Documentation","permalink":"/docs/trustzone-sdk-docs/"}}');var a=n(4848),s=n(8453);const i={permalink:"/docs/threat-model"},o="Threat Model",c={},l=[];function d(e){const t={a:"a",em:"em",h1:"h1",header:"header",li:"li",p:"p",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"threat-model",children:"Threat Model"})}),"\n",(0,a.jsx)(t.p,{children:"With its strongest security setting applied, Teaclave guarantees data\r\nconfidentiality even if all parties along the computation path, privileged or\r\nnot, are untrusted. This includes:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"Internet service provider"}),"\n",(0,a.jsx)(t.li,{children:"Cloud provider"}),"\n",(0,a.jsx)(t.li,{children:"Function provider"}),"\n",(0,a.jsx)(t.li,{children:"Other data providers"}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:"Specifically, most hardware (memory, disk, motherboard, etc.), operating system\r\n(both kernel and software in userland), network channels, and provider employees\r\nare untrusted."}),"\n",(0,a.jsx)(t.p,{children:"Consider the following scenario. A small business needs to employ image\r\nclassification techniques in its daily production. However, the business does\r\nnot have the capabilities to train a high-quality machine learning model, nor\r\ndoes it have the hardware resources to host the machine learning\r\ninfrastructures. Under such circumstances, the only solution is to subscribe to\r\nsome cloud computing service and run the needed image classification tasks\r\nremotely. However, this solution requires the small business to upload its\r\nprivate data to the cloud, which may deeply concerns the business owner and\r\nhinders the deployment of such techniques."}),"\n",(0,a.jsx)(t.p,{children:"With Teaclave, privacy concerns above are no more. The small business can\r\nsubscribe to the cloud service from company A, rent the machine learning model\r\nfrom company B, and use the deep learning inference engine provided by company\r\nC. None of these parties need to trust another, yet the computation can commence\r\nwith everyone's privacy respected."}),"\n",(0,a.jsxs)(t.p,{children:["In the settings above, the root of trust converges to the enclave manufactures\r\n(i.e., Intel) and its SGX-enabled CPU chips. Before the computation starts,\r\nTeaclave is booted as a secure SGX enclave on one of these CPUs owned by the\r\ncloud service provider. After that, each party can ",(0,a.jsx)(t.em,{children:"remotely"})," attest the\r\nauthenticity of the hardware and the integrity of Teaclave platform through\r\nattestation service (e.g., Intel Attestation Service). Private data are securely\r\nprovisioned to the Teaclave enclave only if the attestation passes. After the\r\nprovision, no privileged software is able to access the memory content owned by\r\nthe enclave from outside."]}),"\n",(0,a.jsxs)(t.p,{children:["The remote attestation functionality implemented by Teaclave is augmented from\r\nthe method described by a ",(0,a.jsx)(t.a,{href:"https://arxiv.org/abs/1801.05863",children:"white paper"}),". In a\r\nnutshell, enclaves in Teaclave will establish trusted channel on attested TLS\r\nfor communication. The complicated structure of Teaclave requires additional\r\nwork for remote attestation, which is explained in details via a separate\r\n",(0,a.jsx)(t.a,{href:"/docs/mutual-attestation",children:"documentation"}),"."]}),"\n",(0,a.jsx)(t.p,{children:"Side channels are out of scope for current Teaclave's implementation. While we\r\nacknowledge that existing enclaves may be vulnerable to various kinds of side\r\nchannel attacks, we will try our best to mitigate existing attacks by adopting\r\nsoftware hardening."})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);