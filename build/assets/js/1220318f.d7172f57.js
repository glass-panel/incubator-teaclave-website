"use strict";(self.webpackChunkapache_teaclave_incubating=self.webpackChunkapache_teaclave_incubating||[]).push([[1854],{8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>c});var r=t(6540);const s={},o=r.createContext(s);function a(e){const n=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(o.Provider,{value:n},e.children)}},8648:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>c,default:()=>m,frontMatter:()=>a,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"trustzone-sdk-docs/expanding-ta-secure-memory-on-qemuv8","title":"Expanding TA Secure Memory on QEMUv8","description":"Since some Rust examples such as tlsserver-rs and tlsclient-rs  require","source":"@site/docs/trustzone-sdk-docs/expanding-ta-secure-memory-on-qemuv8.md","sourceDirName":"trustzone-sdk-docs","slug":"/trustzone-sdk-docs/expanding-ta-secure-memory-on-qemuv8","permalink":"/docs/trustzone-sdk-docs/expanding-ta-secure-memory-on-qemuv8","draft":false,"unlisted":false,"editUrl":"https://github.com/apache/incubator-teaclave-website/tree/master/sgx-sdk-api-docs/docs/trustzone-sdk-docs/expanding-ta-secure-memory-on-qemuv8.md","tags":[],"version":"current","frontMatter":{"permalink":"/trustzone-sdk-docs/expanding-ta-secure-memory-on-qemuv8.md"},"sidebar":"tutorialSidebar","previous":{"title":"\ud83d\ude80 Quick Start For QEMU Emulation","permalink":"/docs/trustzone-sdk-docs/emulate-and-dev-in-docker"},"next":{"title":"migrating-to-new-building-env","permalink":"/docs/trustzone-sdk-docs/migrating-to-new-building-env"}}');var s=t(4848),o=t(8453);const a={permalink:"/trustzone-sdk-docs/expanding-ta-secure-memory-on-qemuv8.md"},c="Expanding TA Secure Memory on QEMUv8",i={},d=[];function u(e){const n={a:"a",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"expanding-ta-secure-memory-on-qemuv8",children:"Expanding TA Secure Memory on QEMUv8"})}),"\n",(0,s.jsxs)(n.p,{children:["Since some Rust examples such as ",(0,s.jsx)(n.code,{children:"tls_server-rs"})," and ",(0,s.jsx)(n.code,{children:"tls_client-rs"}),"  require\r\nlarger TA memory (about 18M heap), we've expanded TA secure memory on OP-TEE\r\nQEMUv8 platform. On QEMUv8 platform it supports 7M TA memory originally, after\r\nexpanding it supports 27M TA memory at most."]}),"\n",(0,s.jsxs)(n.p,{children:["We modified the firmware and configuration of QEMU, ATF and OPTEE. You can\r\ndownload the pre-built image from\r\n",(0,s.jsx)(n.a,{href:"https://nightlies.apache.org/teaclave/teaclave-trustzone-sdk/",children:"https://nightlies.apache.org/teaclave/teaclave-trustzone-sdk/"})," or patch the code\r\nand build the images by yourself."]}),"\n",(0,s.jsxs)(n.p,{children:["For details on the modifications, please refer to the\r\n",(0,s.jsx)(n.a,{href:"https://github.com/apache/incubator-teaclave-trustzone-sdk/.patches/test_qemu/README.md",children:"Patches"})]}),"\n",(0,s.jsx)(n.p,{children:"Finally, build images:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"$ cd optee-repo/build\r\n$ make\n"})})]})}function m(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}}}]);