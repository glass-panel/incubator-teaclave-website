window.SIDEBAR_ITEMS = {"mod":[["error","Errors specific to the directory module."]],"static":[["INDEX_WRITER_LOCK","Only one process should be able to write tantivy’s index at a time. This lock file, when present, is in charge of preventing other processes to open an `IndexWriter`."],["META_LOCK","The meta lock file is here to protect the segment files being opened by `IndexReader::reload()` from being garbage collected. It makes it possible for another process to safely consume our index in-writing. Ideally, we may have preferred `RWLock` semantics here, but it is difficult to achieve on Windows."]],"struct":[["AntiCallToken","Struct used to prevent from calling `terminate_ref` directly"],["DirectoryLock","The `DirectoryLock` is an object that represents a file lock."],["FileSlice","Logical slice of read only file in tantivy."],["GarbageCollectionResult","Outcome of the Garbage collection"],["Lock","A directory lock."],["ManagedDirectory","Wrapper of directories that keeps track of files created by Tantivy."],["OwnedBytes","An OwnedBytes simply wraps an object that owns a slice of data and exposes this data as a slice."],["RamDirectory","A Directory storing everything in anonymous memory."],["WatchCallback","Cloneable wrapper for callbacks registered when watching files of a `Directory`."],["WatchCallbackList","Helper struct to implement the watch method in `Directory` implementations."],["WatchHandle","Controls how long a directory should watch for a file change."]],"trait":[["Directory","Write-once read many (WORM) abstraction for where tantivy’s data should be stored."],["DirectoryClone","DirectoryClone"],["FileHandle","Objects that represents files sections in tantivy."],["TerminatingWrite","Trait used to indicate when no more write need to be done on a writer"]],"type":[["WritePtr","Write object for Directory."]]};