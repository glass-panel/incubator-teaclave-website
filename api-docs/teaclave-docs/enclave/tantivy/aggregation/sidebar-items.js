window.SIDEBAR_ITEMS = {"constant":[["MAX_BUCKET_COUNT","The default max bucket count, before the aggregation fails."]],"enum":[["Key","The key to identify a bucket."]],"mod":[["agg_req","Contains the aggregation request tree. Used to build an `AggregationCollector`."],["agg_result","Contains the final aggregation tree. This tree can be converted via the `into()` method from `IntermediateAggregationResults`. This conversion computes the final result. For example: The intermediate result contains intermediate average results, which is the sum and the number of values. The actual average is calculated on the step from intermediate to final aggregation result tree."],["bucket","Module for all bucket aggregations."],["intermediate_agg_result","Contains the intermediate aggregation tree, that can be merged. Intermediate aggregation results can be used to merge results between segments or between indices."],["metric","Module for all metric aggregations."]],"struct":[["AggregationCollector","Collector for aggregations."],["AggregationSegmentCollector","`AggregationSegmentCollector` does the aggregation collection on a segment."],["DistributedAggregationCollector","Collector for distributed aggregations."]],"type":[["SerializedKey","The serialized key is used in a `HashMap`."]]};