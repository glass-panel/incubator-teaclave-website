window.SIDEBAR_ITEMS = {"attr":[["export_fn","Attribute, when put on a Rust function, turns it into a plugin function."],["export_module","Attribute, when put on a Rust module, turns it into a plugin module."]],"enum":[["CallableFunction","(internals) A type encapsulating a function callable by Rhai. Exported under the `internals` feature only."],["EvalAltResult","Evaluation result."],["FnAccess","A type representing the access mode of a function."],["FnNamespace","A type representing the namespace of a function."]],"macro":[["combine_with_exported_module","Macro to combine a plugin module into an existing module."],["exported_module","Macro to generate a Rhai `Module` from a plugin module defined via [`#[export_module]`][macro@export_module]."],["register_exported_fn","Macro to register a plugin function (defined via [`#[export_fn]`][macro@export_fn]) into an `Engine`."],["set_exported_fn","Macro to register a plugin function into a Rhai `Module`."],["set_exported_global_fn","Macro to register a plugin function into a Rhai `Module` and expose it globally."]],"mod":[["mem","Basic functions for dealing with memory."]],"struct":[["Dynamic","Dynamic type containing any value."],["Engine","Rhai main scripting engine."],["ImmutableString","The system immutable string type."],["Module","A module which may contain variables, sub-modules, external Rust functions, and/or script-defined functions."],["NativeCallContext","Context of a native Rust function call."],["Position","A location (line number + character position) in the input script."],["TypeId","A `TypeId` represents a globally unique identifier for a type."]],"trait":[["PluginFunction","Trait implemented by a plugin function."]],"type":[["RhaiResult","Result of a Rhai function."]]};