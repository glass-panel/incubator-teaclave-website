{"archive":{"blogPosts":[{"id":"/2024/05/31/podling-teaclave-report-june-2024","metadata":{"permalink":"/blog/2024/05/31/podling-teaclave-report-june-2024","editUrl":"https://github.com/apache/incubator-teaclave-website/tree/master/site/blog/blog/2024-05-31-podling-teaclave-report-june-2024.md","source":"@site/blog/2024-05-31-podling-teaclave-report-june-2024.md","title":"Podling Teaclave Report - June 2024","description":"Teaclave","date":"2024-05-31T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[{"name":"Yuan Zhuang","key":null,"page":null}],"frontMatter":{"title":"Podling Teaclave Report - June 2024","date":"2024-05-31T00:00:00.000Z","author":"Yuan Zhuang"},"unlisted":false,"nextItem":{"title":"Teaclave Meetup #15","permalink":"/blog/2022/12/21/teaclave-meetup-15"}},"content":"## Teaclave\n\n### Three most important unfinished issues to address before graduating:\n\n  - Improve project structure and documentation\n  - Grow the community (attracting more committers, contributors, users)\n  - Publish Apache releases (resolving logistics on Apache release)\n  \n### Are there any issues that the IPMC or ASF Board need to be aware of?\n  \n  None.\n  \n### How has the community developed since the last report?\n  \n  Since the last report, we have organized three monthly virtual\n  meetups. For each meetup, we have write-ups published on the Teaclave\n  blog <https://teaclave.apache.org/blog/>.\n  - Teaclave Meetup #13:\n    <https://teaclave.apache.org/blog/2022-06-29-teaclave-meetup-13/>\n  - Teaclave Meetup #14:\n    <https://teaclave.apache.org/blog/2022-12-14-teaclave-meetup-14/>\n  - Teaclave Meetup #15:\n    <https://teaclave.apache.org/blog/2022-12-21-teaclave-meetup-15/>\n\n\n  Additionally, we introduced a new project Teaclave Java TEE SDK to \n  our community:  \n  <https://teaclave.apache.org/blog/2022-10-18-accepting-java-enclave-proposal/>\n  \n### How has the project developed since the last report?\n  \n  Here are the summaries of recent progress:  \n\n#### Teaclave Faas Platform:\n  - New release 0.6.0:\n    <https://github.com/apache/incubator-teaclave/releases/tag/v0.6.0>\n  - Merged PRs:\n    <https://github.com/apache/incubator-teaclave/pulls?q=is%3Apr+is%3Aclosed+merged%3A2022-05-01..2024-05-31+base%3Amaster>\n  \n#### Teaclave TrustZone SDK\n  - New 'no-std' branch (set as recommended):\n    <https://lists.apache.org/thread/f3l82o89hb0w43n27nw77oqcpo829qjd>\n  - Merged PRs:\n    <https://github.com/apache/incubator-teaclave-trustzone-sdk/pulls?q=is%3Apr+is%3Aclosed+merged%3A2022-05-01..2024-05-31+base%3Amaster+>\n  \n#### Teaclave SGX SDK\n  - Preparing release v2.0.0:\n    <https://github.com/apache/incubator-teaclave-sgx-sdk/tree/v2.0.0-preview>\n  - Merged PRs:\n    <https://github.com/apache/incubator-teaclave-sgx-sdk/pulls?q=is%3Apr+is%3Aclosed+merged%3A2022-05-01..2024-05-31+base%3Amaster+>\n\n#### [NEW] Teaclave Java TEE SDK\n  - The first release v0.1.0:\n    https://github.com/apache/incubator-teaclave-java-tee-sdk/releases/tag/v0.1.0\n  \n\n### How would you assess the podling's maturity?\n\n  - [ ] Initial setup\n  - [ ] Working towards first release\n  - [x] Community building\n  - [ ] Nearing graduation\n  - [ ] Other:\n  \n### Date of last release:\n  \n  2023-06-26: Apache Teaclave (incubating) FaaS Platfrom 0.6.0\n  \n### When were the last committers or PPMC members elected?\n\n  2023-05-04: He Sun (Apache ID: hsun), PPMC\n  \n### Have your mentors been helpful and responsive?\n  \n  Yes, our mentors work responsively to help us with electing new\n  mentors, developing new features, fixing bugs, and expanding the\n  community.\n  \n### Is the PPMC managing the podling's brand / trademarks?\n  \n  We don't find any 3rd parties incorrectly using the podling's name and\n  brand.  The VP, Brand has approved the project name.\n  (PODLINGNAMESEARCH-175)"},{"id":"/2022/12/21/teaclave-meetup-15","metadata":{"permalink":"/blog/2022/12/21/teaclave-meetup-15","editUrl":"https://github.com/apache/incubator-teaclave-website/tree/master/site/blog/blog/2022-12-21-teaclave-meetup-15.md","source":"@site/blog/2022-12-21-teaclave-meetup-15.md","title":"Teaclave Meetup #15","description":"Agenda","date":"2022-12-21T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[{"name":"He Sun","key":null,"page":null}],"frontMatter":{"title":"Teaclave Meetup #15","date":"2022-12-21T00:00:00.000Z","author":"He Sun"},"unlisted":false,"prevItem":{"title":"Podling Teaclave Report - June 2024","permalink":"/blog/2024/05/31/podling-teaclave-report-june-2024"},"nextItem":{"title":"Teaclave Meetup #14","permalink":"/blog/2022/12/14/teaclave-meetup-14"}},"content":"## Agenda \n\n### Propose He as Committer\n\n### Teaclave FaaS\n\n- upgrading Teacalve SGX SDK 2.0 PR\n    - disable macos/ios CI\n    - protected fs in teaclavs SGX sdk is not compatible with intel sgx sdk\n    - TODO: support macos/ios target for protected fs in Teaclave SGX SDK\n    - third-party crates\n        - new repo to host forked crates: incubator-teaclave-crates\n        - no need to vendor third-party crates, having a Cargo.lock to lock the third-party\n        - update readme to explain the supply chain issue\n    - need review\n\n### Java TEE SDK\n\n- S2 (March 2023): integrate with Teaclave SGX SDK 2.0\n- Release PR\n\n### Discussion\n[https://r3conclave.github.io/ccl-documentation/](https://r3conclave.github.io/ccl-documentation/)\n\n## Attendees\n\n- He Sun\n- Hongbo chen\n- Kailun Qin\n- Mingshen Sun\n- Qinkun Bao\n- Ran Duan\n- Sanhong Li\n- Shaojun Wang\n- Yingchun Gao\n- Yu Lei\n- Ziyi Lin"},{"id":"/2022/12/14/teaclave-meetup-14","metadata":{"permalink":"/blog/2022/12/14/teaclave-meetup-14","editUrl":"https://github.com/apache/incubator-teaclave-website/tree/master/site/blog/blog/2022-12-14-teaclave-meetup-14.md","source":"@site/blog/2022-12-14-teaclave-meetup-14.md","title":"Teaclave Meetup #14","description":"Agenda","date":"2022-12-14T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[{"name":"He Sun","key":null,"page":null}],"frontMatter":{"title":"Teaclave Meetup #14","date":"2022-12-14T00:00:00.000Z","author":"He Sun"},"unlisted":false,"prevItem":{"title":"Teaclave Meetup #15","permalink":"/blog/2022/12/21/teaclave-meetup-15"},"nextItem":{"title":"Accepting JavaEnclave to Apache Teaclave (incubating) Proposal","permalink":"/blog/2022/10/08/accepting-java-enclave-proposal"}},"content":"## Agenda\n\n### Introduction\n\n### Teaclave FaaS\n\n- Upgrade to Rust SGX SDK 2.0\n- Q: DockerHub image (Mingshen: add He as owner)\n- MS: apache DockerHub infra for Teaclave\n- Protected FS in 2.0 for macos/iOS is not supported (Ran)\n- Replace RPC as tonic based on RA-TLS (Yingchun: create a github issue)\n- RA-TLS standard (CCC, Ali, Intel, etc)\n- Function languages: Rust, WebAssembly, Python, Occlum\n\n### Teaclave SGX SDK (Rust SGX SDK)\n\n- Protected FS in SDK is not compatible with Intel SGX SDK\n- Supports Teaclave and Occlum features\n- Cache size/key policy added in Teaclave SGX SDK\n- 2.0 release\n    - testing\n        - unit test\n        - Rust std tests (800) and benchmark\n        - sample code test\n        - teaclave dependencies\n    - document\n    - CI\n    - EDMM in 2.0 (Occlum will use EDMM)\n\n### Teaclave Java TEE SDK\n\n- 0.1 release\n    - Voting\n    - Checklist\n- CI (self-hosted runner for GitHub Actions)\n    - Apache Infra Jira ticket, Github Actions token (Mingshen: apply token)\n\n### Teaclave TrustZone SDK (Rust OP-TEE TrustZone SDK)\n\n- N/A\n\n## Attendees\n\n- He Sun\n- Hongbo chen\n- Kailun Qin\n- Mingshen Sun\n- Qinkun Bao\n- Ran Duan\n- Sanhong Li\n- Shaojun Wang\n- Yingchun Gao\n- Yu Lei\n- Ziyi Lin"},{"id":"/2022/10/08/accepting-java-enclave-proposal","metadata":{"permalink":"/blog/2022/10/08/accepting-java-enclave-proposal","editUrl":"https://github.com/apache/incubator-teaclave-website/tree/master/site/blog/blog/2022-10-08-accepting-java-enclave-proposal.md","source":"@site/blog/2022-10-08-accepting-java-enclave-proposal.md","title":"Accepting JavaEnclave to Apache Teaclave (incubating) Proposal","description":"Abstract","date":"2022-10-18T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[{"name":"The Teaclave PPMC","key":null,"page":null}],"frontMatter":{"title":"Accepting JavaEnclave to Apache Teaclave (incubating) Proposal","date":"2022-10-18T00:00:00.000Z","author":"The Teaclave PPMC"},"unlisted":false,"prevItem":{"title":"Teaclave Meetup #14","permalink":"/blog/2022/12/14/teaclave-meetup-14"},"nextItem":{"title":"Teaclave Meetup #13","permalink":"/blog/2022/06/29/teaclave-meetup-13"}},"content":"## Abstract\n\nTeaclave Java TEE SDK is a Java confidential computing programming framework.\nIt follows the host-and-enclave partition programming model defined by Intel-SGX SDK.\nTeaclave Java TEE SDK provides an elegant way to divide a java project into host and\nenclave modules, where the enclave module is a provider of a user-defined service\ninterface which is similar to the Java SPI model. Teaclave Java TEE SDK could\nhelp you to develop and build a Java confidential computing project with\nhigh efficiency.\n\n## Proposal\n\nTeaclave Java TEE SDK is a pure Java SDK for Java confidential computing. It eases\nthe interactions between secured and unsecured environment with a few concise APIs.\nFrom user's aspect, creating an enclave environment and invoking confidential\ncomputing services would be as simple as invoking SPI services.\n\n### Background\n\nThe Teaclave Java TEE SDK project is being actively developed within Alibaba Cloud.\n\n### Rationale\n\nTeaclave Java TEE SDK is a Java confidential computing programming framework.\nThe goal of Teaclave is to provide a universal secure computing platform for\nmultiple programming languages. Teaclave currently supports Rust, Python and\nWebAssembly, but Java is still missing. Teaclave Java TEE SDK would be an\nimportant piece of the puzzle.\n\n### Initial Goals\n\n- Transfer the repository to the Apache Incubator under the Teaclave project\n- Code cleanup and more documentation\n\n#### Meritocracy:\n\nTeaclave Java TEE SDK project was originally developed and reviewed by\nShaojun Wang/Ziyi Lin/Lei Yu/Sanhong Li within Alibaba Cloud.\nWe encourage everyone to ask questions and create pull requests for the project.\n\n#### Community:\n\nTeaclave Java TEE SDK was developed and applied within Alibaba Cloud before\nit was donated to Teaclave.\n\n#### Core Developers:\n\nThe core developers are:\n- Shaojun Wang (jeffery.wsj@alibaba-inc.com)\n- Ziyi Lin (cengfeng.lzy@alibaba-inc.com)\n\n#### Alignment:\n\nThe project is complimentary of Teaclave's TEE backends.\n\n### Known Risks\n\nAn exercise in self-knowledge. Risks don't mean that a project is unacceptable.\nIf they are recognized and noted, then they can be addressed during incubation.\n\n#### Project Name\n\nTeaclave Java TEE SDK was initially developed and applied within Alibaba Cloud\nas a closed-source project which was called JavaEnclave.\n\n#### Inexperience with Open Source:\n\nTeaclave Java TEE SDK has been reviewed by Mingshen Sun, who is from the Teaclave\ncommunity. He's familiar with The Apache Way for the open-source community.\n\n#### Length of Incubation:\n\nThe project will be in incubation with Apache Teaclave (incubating) project.\n\n### Documentation\n\n- Teaclave Java TEE SDK's documentation will be submit to Teaclave PPMC for review\n  by email private@teaclave.apache.org\n\n### Initial Source\n\n- Teaclave Java TEE SDK's source code will be submit to Teaclave PPMC for review\n  by email private@teaclave.apache.org\n\n### Source and Intellectual Property Submission Plan\n\nWe will submit a Software Grant for this project later.\n\n#### External Dependencies:\n\nThe dependencies have Apache compatible license, which is provided under the\nBSD 2-Clause license and GPL2.0 license. One dependency of Teaclave Java TEE SDK\nis GraalVM SubstraceVM with GPL2.0 license, it's used as the enclave module's\nnative image compiler, and Teaclave Java TEE SDK has contributed some patches\nto GraalVM and they had been contained in GraalVM's official releases assets.\nTeaclave Java TEE SDK is dependent on GraalVM's official releases and doesn't\nmake any modifications to GraalVM's source code, so there's no legal risk.\nhttps://www.apache.org/legal/resolved.html\n\n#### Cryptography:\n\nN/A\n\n### Required Resources\n\n#### Mailing lists:\n\nThe project shares the same mailing list of Teaclave.\n\n#### Git Repositories:\n\n- N/A\n\n#### Issue Tracking:\n\nSame with Teaclave.\n\n#### Other Resources:\n\nN/A\n\n### Initial Committers\n\n- Shaojun Wang (jeffery.wsj@alibaba-inc.com)\n- Ziyi Lin (cengfeng.lzy@alibaba-inc.com)\n- Lei Yu (lei.yul@alibaba-inc.com)\n- Sanhong Li (sanhong.lsh@alibaba-inc.com)"},{"id":"/2022/06/29/teaclave-meetup-13","metadata":{"permalink":"/blog/2022/06/29/teaclave-meetup-13","editUrl":"https://github.com/apache/incubator-teaclave-website/tree/master/site/blog/blog/2022-06-29-teaclave-meetup-13.md","source":"@site/blog/2022-06-29-teaclave-meetup-13.md","title":"Teaclave Meetup #13","description":"Agenda","date":"2022-06-29T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[{"name":"Mingshen Sun","key":null,"page":null}],"frontMatter":{"title":"Teaclave Meetup #13","date":"2022-06-29T00:00:00.000Z","author":"Mingshen Sun"},"unlisted":false,"prevItem":{"title":"Accepting JavaEnclave to Apache Teaclave (incubating) Proposal","permalink":"/blog/2022/10/08/accepting-java-enclave-proposal"},"nextItem":{"title":"Podling Teaclave Report - May 2022","permalink":"/blog/2022/05/01/podling-teaclave-report-may-2022"}},"content":"## Agenda\n\nDear Teaclave community,\n\nSince some members have conflicts on tomorrow's meetup and suggested\nscheduling the meetup today, let's have an informal meet today at\n7:00am PT (10am China Time).\n\nThere's no presentation today. Let's just have a chitchat and discuss\nrecent updates in the community. Thanks."},{"id":"/2022/05/01/podling-teaclave-report-may-2022","metadata":{"permalink":"/blog/2022/05/01/podling-teaclave-report-may-2022","editUrl":"https://github.com/apache/incubator-teaclave-website/tree/master/site/blog/blog/2022-05-01-podling-teaclave-report-may-2022.md","source":"@site/blog/2022-05-01-podling-teaclave-report-may-2022.md","title":"Podling Teaclave Report - May 2022","description":"Teaclave","date":"2022-05-01T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[{"name":"Mingshen Sun","key":null,"page":null}],"frontMatter":{"title":"Podling Teaclave Report - May 2022","date":"2022-05-01T00:00:00.000Z","author":"Mingshen Sun"},"unlisted":false,"prevItem":{"title":"Teaclave Meetup #13","permalink":"/blog/2022/06/29/teaclave-meetup-13"},"nextItem":{"title":"Teaclave Meetup #12","permalink":"/blog/2022/04/28/teaclave-meetup-12"}},"content":"## Teaclave\n\n### Three most important unfinished issues to address before graduating:\n\n  - Improve project structure and documentation\n  - Grow the community (attracting more committers, contributors, users)\n  - Publish Apache releases (resolving logistics on Apache release)\n\n### Are there any issues that the IPMC or ASF Board need to be aware of?\n\nNone.\n\n### How has the community developed since the last report?\n\nSince the last report, we have organized three monthly virtual\nmeetups. For each meetup, we have write-ups published on the Teaclave\nblog.\n  - Teaclave Meetup #10:\n<https://teaclave.apache.org/blog/2022-02-24-teaclave-meetup-10/>\n  - Teaclave Meetup #11:\n<https://teaclave.apache.org/blog/2022-03-31-teaclave-meetup-11/>\n  - Teaclave Meetup #12:\n<https://teaclave.apache.org/blog/2022-04-28-teaclave-meetup-12/>\n\nWe also released two versions of the Teaclave platform and Teaclave\nTrustZone seperately:\n  - Teaclave 0.4.0:\n<https://teaclave.apache.org/blog/2022-04-18-announcing-teaclave-0-4-0/>\n  - Teaclave TrustZone SDK 0.2.0:\n<https://teaclave.apache.org/blog/2022-04-18-announcing-teaclave-trustzone-sdk-0-2-0/>\n\n### How has the project developed since the last report?\n\nHere are the summaries of recent progress:\n\nTeaclave Faas Platform:\n  - Merged PRs:\n<https://github.com/apache/incubator-teaclave/pulls?q=is%3Apr+is%3Aclosed+merged%3A2022-01-01..2022-05-01+base%3Amaster>\n\nTeaclave TrustZone SDK\n  - Merged PRs:\n<https://github.com/apache/incubator-teaclave-trustzone-sdk/pulls?q=is%3Apr+is%3Aclosed+merged%3A2022-01-01..2022-05-01+base%3Amaster+>\n\nTeaclave SGX SDK\n  - Merged PRs:\n<https://github.com/apache/incubator-teaclave-sgx-sdk/pulls?q=is%3Apr+is%3Aclosed+merged%3A2022-01-01..2022-05-01+base%3Amaster+>\n\nWebsite\n\n  - [blog] Teaclave Meetup #10:\n<https://teaclave.apache.org/blog/2022-02-24-teaclave-meetup-10/>\n  - [blog] Teaclave Meetup #11:\n<https://teaclave.apache.org/blog/2022-03-31-teaclave-meetup-11/>\n  - [blog] Teaclave Meetup #12:\n<https://teaclave.apache.org/blog/2022-04-28-teaclave-meetup-12/>\n  - [blog] Announcing Apache Teaclave (incubating) 0.4.0:\n<https://teaclave.apache.org/blog/2022-04-18-announcing-teaclave-0-4-0/>\n  - [blog] Announcing Apache Teaclave TrustZone SDK (incubating)\n0.2.0: <https://teaclave.apache.org/blog/2022-04-18-announcing-teaclave-trustzone-sdk-0-2-0/>\n\n### How would you assess the podling's maturity?\n\n  - [ ] Initial setup\n  - [ ] Working towards first release\n  - [x] Community building\n  - [ ] Nearing graduation\n  - [ ] Other:\n\n### Date of last release:\n\n  2021-04-18: Apache Teaclave (incubating) TrustZone SDK 0.2.0\n\n### When were the last committers or PPMC members elected?\n\n  - 2022-04-26: Qinkun Bao (Apache ID: qinkun), Committer\n\n### Have your mentors been helpful and responsive?\n\nYes, our mentors work responsively to help us with electing new\nmentors, developing new features, fixing bugs, and expanding the\ncommunity.\n\n### Is the PPMC managing the podling's brand / trademarks?\n\nWe don't find any 3rd parties incorrectly using the podling's name and\nbrand.  The VP, Brand has approved the project name.\n(PODLINGNAMESEARCH-175)"},{"id":"/2022/04/28/teaclave-meetup-12","metadata":{"permalink":"/blog/2022/04/28/teaclave-meetup-12","editUrl":"https://github.com/apache/incubator-teaclave-website/tree/master/site/blog/blog/2022-04-28-teaclave-meetup-12.md","source":"@site/blog/2022-04-28-teaclave-meetup-12.md","title":"Teaclave Meetup #12","description":"Agenda","date":"2022-04-28T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[{"name":"Mingshen Sun","key":null,"page":null}],"frontMatter":{"title":"Teaclave Meetup #12","date":"2022-04-28T00:00:00.000Z","author":"Mingshen Sun"},"unlisted":false,"prevItem":{"title":"Podling Teaclave Report - May 2022","permalink":"/blog/2022/05/01/podling-teaclave-report-may-2022"},"nextItem":{"title":"Announcing Apache Teaclave (incubating) 0.4.0","permalink":"/blog/2022/04/18/announcing-teaclave-0.4.0"}},"content":"## Agenda\n\n- Recent Updates on Teaclave - Mingshen Sun (10m)\n- Enarx - Wenwen Ruan (40m)\n- Free discussion (10m)\n\n## Attendees\n\n- Mingshen Sun\n- Shuang Liu\n- He Sun\n- Weijie Liu\n- Gordon\n- Tongxin Li\n- Wenhao Wang\n- Ukei Kim\n\n## Group Photo\n\n![Group Photo](./img/teaclave-meetup-12-zoom.png)"},{"id":"/2022/04/18/announcing-teaclave-0.4.0","metadata":{"permalink":"/blog/2022/04/18/announcing-teaclave-0.4.0","editUrl":"https://github.com/apache/incubator-teaclave-website/tree/master/site/blog/blog/2022-04-18-announcing-teaclave-0.4.0.md","source":"@site/blog/2022-04-18-announcing-teaclave-0.4.0.md","title":"Announcing Apache Teaclave (incubating) 0.4.0","description":"On behalf of the Teaclave community, I am happy to announce the fourth Apache","date":"2022-04-18T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[{"name":"Mingshen Sun","key":null,"page":null}],"frontMatter":{"title":"Announcing Apache Teaclave (incubating) 0.4.0","date":"2022-04-18T00:00:00.000Z","author":"Mingshen Sun"},"unlisted":false,"prevItem":{"title":"Teaclave Meetup #12","permalink":"/blog/2022/04/28/teaclave-meetup-12"},"nextItem":{"title":"Announcing Apache Teaclave TrustZone SDK (incubating) 0.2.0","permalink":"/blog/2022/04/18/announcing-teaclave-trustzone-sdk-0.2.0"}},"content":"On behalf of the Teaclave community, I am happy to announce the *fourth* Apache\nIncubator release of Teaclave, 0.4.0. Teaclave is a universal secure computing\nplatform, making computation on privacy-sensitive data safe and simple.\nApache Teaclave (including the\n[FaaS platform](https://github.com/apache/incubator-teaclave),\n[SGX SDK](https://github.com/apache/incubator-teaclave-sgx-sdk),\nand [TrustZone SDK](https://github.com/apache/incubator-teaclave-trustzone-sdk)) is\nbeing used and contributed by developers from many organizations and\nother open source projects. Please see the [*powered by*](/powered-by) page to learn more.\n\nIn this release, we mainly focus on better user management, task management,\nperformance improvement and stability.\n\n## Highlights\n\nIn this release, we introduce a role-based access control for user management.\nSpecifically, we define roles like admin, function owner, data owner, data owner\nmanager, etc. Additionally, we also add APIs to support user management\nfunctionalities. In addition, we also implement a feature to cancel a running\ntask to kill a long-run function which is no longer needed. Besides these two\nnew features, we also made a lot of underlying changes to improve the\nperformance of RPC and stability of the secure database.\n\nTo learn more, here is a list of notable changes in Teaclave version 0.4.0.\n\n**Features**\n\n- Add the `DisableFunction` interface (#620)\n- Better user management interfaces: add the `UserUpdate`, `UserChangePassword`, `ResetUserPassword`, `DeleteUser`, and `ListUsers` interfaces\n- Support optional input/output files (#603)\n- Start Teaclave docker services with auto-detection mechanism (#559)\n- Add watchdog functionality to monitor service status (#600)\n- Support cancel a task\n- Support intermediate cert in DCAP attestation cert\n\n**Enhancements**\n\n- Better error handling in Python client SDK (#632)\n- Refactor services error types and messages, make them readable to end users\n- Optimize RPC memory footprint of serde (#577)\n- Support selectively including executors (#574)\n- Support AES-GCM output files (#629)\n- Add port probe for service launching\n- Update WAMR version to WAMR-01-18-2022 (#616)\n- Move execution context into a separate crate (#598)\n- Support Ubuntu 20.04 docker image and add corresponding CI pipelines\n- Persistent MockDB in test mode (#580)\n\n**Bug Fixes**\n\n- Better task state error and fix cancel error issue in the example (#637)\n- Fix privilege issues in the `GetFunction` and `ListFunctions` interfaces (#636)\n- Better building system: fix packages rebuild every time, avoid issues in parallel make (#589, #596)\n- Fix the issue of generating code coverage of tests (#627)\n- Fix LevelDB assertion issue: leveldb lru bug, using disk db for unit test (#583)\n\n**Docs**\n\n- Add release guide for releasing Teaclave in the community: <https://teaclave.apache.org/docs/release-guide/>\n- Remove `CONTRIBUTORS.md` and point to the homepage (#552)\n\n## Download\n\nTeaclave 0.4.0 can be downloaded at [the download page](/download/). Note that \nit is essential to verify the integrity of the downloaded file using the\nPGP signature (the `.asc` file) or a hash (the `.sha256` file).\n\n## Documentation\n\nIf it is the first time to try Teaclave, we provide a simple but clear tutorial\nto guide you getting stated with Teaclave by invoking\n[your first function](/docs/my-first-function/) in Teaclave.\n\nBasically, you can build the Teaclave platform using docker with these commands:\n\n```sh\n$ tar zxvf apache-teaclave-0.4.0-incubating.tar.gz && cd \\\n  apache-teaclave-0.4.0-incubating\n$ # Instructions to verify the source tar: https://teaclave.apache.org/download/#verify-the-integrity-of-the-files\n\n$ docker run --rm -v $(pwd):/teaclave -w /teaclave \\\n  -it teaclave/teaclave-build-ubuntu-1804-sgx-2.14:latest \\\n   bash -c \". /root/.cargo/env && \\\n     . /opt/sgxsdk/environment && \\\n     mkdir -p build && cd build && \\\n     cmake -DTEST_MODE=ON -DSGX_SIM_MODE=ON -DGIT_SUBMODULE=OFF .. && \\\n     make\"\n```\n\nLaunch all services with `docker-compose` using simulation mode:\n\n```sh\n$ (cd docker && docker-compose -f docker-compose-ubuntu-1804-sgx-sim-mode.yml up --build)\n```\n\nAnd invoke function with a Python client:\n\n```sh\n$ cd examples/python\n$ PYTHONPATH=../../sdk/python python3 builtin_echo.py 'Hello, Teaclave!'\n[+] registering user\n[+] login\n[+] registering function\n[+] creating task\n[+] approving task\n[+] invoking task\n[+] getting result\n[+] done\n[+] function return:  b'Hello, Teaclave!'\n```\n\nIf you want to understand the internals of Teaclave, we provide several\ndocuments about the [design](/docs/#design) of Teaclave. Also, we extensively\ndocument our [codebase](/docs/#codebase) in each sub directories. At last, [API references](/docs/#api-references)\nare automatically generated and uploaded to our homepage.\n\n## Community\n\n- Join us on our [mailing list](https://lists.apache.org/list.html?dev@teaclave.apache.org) and [Discord channel](https://discord.gg/ynECXsxm5P).\n- Follow us at [@ApacheTeaclave](https://twitter.com/ApacheTeaclave).\n- Meet us at our [monthly community meetup](https://teaclave.apache.org/community/#calendar).\n- See [more](https://teaclave.apache.org/community/)."},{"id":"/2022/04/18/announcing-teaclave-trustzone-sdk-0.2.0","metadata":{"permalink":"/blog/2022/04/18/announcing-teaclave-trustzone-sdk-0.2.0","editUrl":"https://github.com/apache/incubator-teaclave-website/tree/master/site/blog/blog/2022-04-18-announcing-teaclave-trustzone-sdk-0.2.0.md","source":"@site/blog/2022-04-18-announcing-teaclave-trustzone-sdk-0.2.0.md","title":"Announcing Apache Teaclave TrustZone SDK (incubating) 0.2.0","description":"On behalf of the Teaclave community, I am happy to announce the release of","date":"2022-04-18T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[{"name":"Mingshen Sun","key":null,"page":null}],"frontMatter":{"title":"Announcing Apache Teaclave TrustZone SDK (incubating) 0.2.0","date":"2022-04-18T00:00:00.000Z","author":"Mingshen Sun"},"unlisted":false,"prevItem":{"title":"Announcing Apache Teaclave (incubating) 0.4.0","permalink":"/blog/2022/04/18/announcing-teaclave-0.4.0"},"nextItem":{"title":"Teaclave Meetup #11","permalink":"/blog/2022/03/31/teaclave-meetup-11"}},"content":"On behalf of the Teaclave community, I am happy to announce the release of\nTeaclave TrustZone SDK 0.2.0.\n\nTeaclave TrustZone SDK provides abilities to build safe TrustZone applications\nin Rust. The SDK is based on the OP-TEE project which follows GlobalPlatform TEE\nspecifications and provides ergonomic APIs. In addition, it enables capability\nto write TrustZone applications with Rust's standard library and many\nthird-party libraries (i.e., crates). Teaclave TrustZone SDK is a sub-project of\nApache Teaclave (incubating). To learn more about the design and history of\nTrustZone SDK,\nplease read the blog [Welcome Rust OP-TEE TrustZone SDK To Teaclave](https://teaclave.apache.org/blog/2021-03-14-welcome-rust-optee-trustzone-sdk/).\n\nThis is the second Apache Incubator release of Teaclave TrustZone SDK. Teaclave\nTrustZone SDK provides abilities to build safe TrustZone applications in Rust.\nThe SDK is based on the OP-TEE project which follows GlobalPlatform TEE\nspecifications and provides ergonomic APIs. In addition, it enables the\ncapability to write TrustZone applications with Rust's standard library and many\nthird-party libraries (i.e., crates). Teaclave TrustZone SDK is a sub-project of\nApache Teaclave (incubating).\n\nDuring this period, we are working closely with the OP-TEE community to\nintegrate TA examples written in Rust into the upstream repository. You can try\nand play with the examples written in Rust with Teaclave TrustZone SDK since the\nOP-TEE 3.15.0 release.\n\nMore specifically, in this release we have the following updates:\n\n## Features\n\n- Add support for tee-supplicant loadable plugins and examples\n- Add TEE Socket APIs and examples\n\n## Enhancements\n\n#### Integration into OP-TEE\n\n- Add the `-rs` suffix to examples and update test scripts ([#34](https://github.com/apache/incubator-teaclave-trustzone-sdk/pull/34))\n- Update to OP-TEE 3.14.0 ([#35](https://github.com/apache/incubator-teaclave-trustzone-sdk/pull/35))\n- Update to OP-TEE 3.16.0 ([#59](https://github.com/apache/incubator-teaclave-trustzone-sdk/pull/59))\n\n#### Building\n\n- Upgrade building docker to Ubuntu 20.04 ([#33](https://github.com/apache/incubator-teaclave-trustzone-sdk/pull/33))\n- Update Rust toolchain to nightly-2021-09-20 and std to 1.56.1 ([#53](https://github.com/apache/incubator-teaclave-trustzone-sdk/pull/53))\n- Add setup.sh to setup rust environment and initialize submodules ([#40](https://github.com/apache/incubator-teaclave-trustzone-sdk/pull/40), [#63](https://github.com/apache/incubator-teaclave-trustzone-sdk/pull/63))\n\n#### CI\n\n- Switch to GitHub Actions ([#33](https://github.com/apache/incubator-teaclave-trustzone-sdk/pull/33))\n- Add expect script for OP-TEE CI and fix CI errors ([#45](https://github.com/apache/incubator-teaclave-trustzone-sdk/pull/45), [#50](https://github.com/apache/incubator-teaclave-trustzone-sdk/pull/50))\n\n## Bug fixes\n\n- Fix ldelf error of arm32 ta ([#38](https://github.com/apache/incubator-teaclave-trustzone-sdk/pull/38))\n- fix error when making the plugin example second time ([#42](https://github.com/apache/incubator-teaclave-trustzone-sdk/pull/42))\n- Correct toolchain PATH env ([#44](https://github.com/apache/incubator-teaclave-trustzone-sdk/pull/44))\n\n## Docs\n\n- Add debugging OP-TEE TA doc: Debugging OP-TEE TA\n- Add documentation of Rust examples: Overview of OP-TEE Rust Examples\n- Polish the getting started documentation\n\n## Download\n\nYou can download the release from the\n[download](https://teaclave.apache.org/download/) page. Also, please checkout\nour [repository](https://github.com/apache/incubator-teaclave-trustzone-sdk)\nhosted on GitHub.\n\n## Contributing\n\nTeaclave TrustZone SDK is under the Apache License v2 and open source in The\nApache Way. We aim to create a project that is maintained and owned by the\ncommunity. All kinds of contributions are welcome. Thanks to our contributors."},{"id":"/2022/03/31/teaclave-meetup-11","metadata":{"permalink":"/blog/2022/03/31/teaclave-meetup-11","editUrl":"https://github.com/apache/incubator-teaclave-website/tree/master/site/blog/blog/2022-03-31-teaclave-meetup-11.md","source":"@site/blog/2022-03-31-teaclave-meetup-11.md","title":"Teaclave Meetup #11","description":"Agenda","date":"2022-03-31T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[{"name":"Mingshen Sun","key":null,"page":null}],"frontMatter":{"title":"Teaclave Meetup #11","date":"2022-03-31T00:00:00.000Z","author":"Mingshen Sun"},"unlisted":false,"prevItem":{"title":"Announcing Apache Teaclave TrustZone SDK (incubating) 0.2.0","permalink":"/blog/2022/04/18/announcing-teaclave-trustzone-sdk-0.2.0"},"nextItem":{"title":"Teaclave Meetup #10","permalink":"/blog/2022/02/24/teaclave-meetup-10"}},"content":"## Agenda\n\n- Recent Updates on Teaclave - Mingshen Sun (10m)\n- HyperEnclave - Shuang Liu (40m)\n- Free discussion (10m)\n\n## Attendees\n\n- Mingshen Sun\n- Ran Duan\n- He Sun\n- Weijie Liu\n- Shuang Liu\n- Bing Duan\n\n## Group Photo\n\n![Group Photo](./img/teaclave-meetup-11-zoom.png)"},{"id":"/2022/02/24/teaclave-meetup-10","metadata":{"permalink":"/blog/2022/02/24/teaclave-meetup-10","editUrl":"https://github.com/apache/incubator-teaclave-website/tree/master/site/blog/blog/2022-02-24-teaclave-meetup-10.md","source":"@site/blog/2022-02-24-teaclave-meetup-10.md","title":"Teaclave Meetup #10","description":"Agenda","date":"2022-02-24T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[{"name":"Mingshen Sun","key":null,"page":null}],"frontMatter":{"title":"Teaclave Meetup #10","date":"2022-02-24T00:00:00.000Z","author":"Mingshen Sun"},"unlisted":false,"prevItem":{"title":"Teaclave Meetup #11","permalink":"/blog/2022/03/31/teaclave-meetup-11"},"nextItem":{"title":"Podling Teaclave Report - Jan 2022","permalink":"/blog/2022/01/12/podling-teaclave-report-jan-2022"}},"content":"## Agenda\n\n- Recent Updates on Teaclave - Mingshen Sun (15m)\n- Proof of Being Forgotten: Verified Privacy Protection in Confidential Computing Platform - Hongbo Chen (30m)\n- Free discussion (15m)\n\n## Notes\n\n**Teaclave Recent Updates**\n\n- Teaclave FaaS\n    - Optimize RPC memory footprint of `serde`\n    - Server error refactoring\n    - Executor watchdog\n    - Task canceling\n    - APIs: `list_users`, `delete_user`, `reset_user`, `user_change_password`, `disable_function`\n    - Optional input/output files\n- Teaclave TrustZone SDK\n    - Update to OP-TEE 3.16.0 (no breaking change)\n- GSoC 2022 call for participation\n- Powered by Teaclave - P4Cleanroom: P4Cleanroom is a confidential cloud service\n  for hosting computational biology algorithms as SaaS services on the cloud.\n  Computational biology researchers can publish their algorithms on P4Cleanroom\n  as a SaaS service to customers, such as researchers in pharmaceutical\n  companies and health care institutes.\n\n![P4Cleanroom - Powered by Teclave](./img/p4cleanroom-powered-by-teaclave.png)\n\n**Proof of Being Forgotten**\n\nThe talk is same with the recent talk on OC3. Video can be found at:\n\n- Video: [https://www.youtube.com/watch?v=NrOySgI7O3o&list=PLEhAl3D5WVvSD7Kh1lyF95dWmcPICXc2u](https://www.youtube.com/watch?v=NrOySgI7O3o&list=PLEhAl3D5WVvSD7Kh1lyF95dWmcPICXc2u)\n\nQ&A during the talk:\n\nGary: Assumption on reusing TEE sandbox?\n\nHongbo: No, if not reuse TEE, still has leakage.\n\nGary: What is Zone, is it heap?\n\nHongbo: No only. E.g., secrets in stack and also in general purpose registers.\n\nGary: How to demonstrate/show the Proof of Being Forgotten? Attestation? Enclave hash?\n\nMingshen: PoBF is a statically verified property. We also consider to add\ndynamic traces for post-mortem auditing. Combined with the enclave hash and\nreproducible build, we can provide the proof before the execution statically,\nand after the execution dynamically.\n\n**Topic for the Next Meetup**\n\n- HyperEnclave in Ant Finance - Shuang Liu\n\n## Attendees\n\n- Hongbo Chen\n- Gary\n- Ran Duan\n- He Sun\n- Ruide Zhang\n- Weijie Liu\n- Chan Zhao"},{"id":"/2022/01/12/podling-teaclave-report-jan-2022","metadata":{"permalink":"/blog/2022/01/12/podling-teaclave-report-jan-2022","editUrl":"https://github.com/apache/incubator-teaclave-website/tree/master/site/blog/blog/2022-01-12-podling-teaclave-report-jan-2022.md","source":"@site/blog/2022-01-12-podling-teaclave-report-jan-2022.md","title":"Podling Teaclave Report - Jan 2022","description":"Teaclave","date":"2022-01-12T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[{"name":"Mingshen Sun","key":null,"page":null}],"frontMatter":{"title":"Podling Teaclave Report - Jan 2022","date":"2022-01-12T00:00:00.000Z","author":"Mingshen Sun"},"unlisted":false,"prevItem":{"title":"Teaclave Meetup #10","permalink":"/blog/2022/02/24/teaclave-meetup-10"},"nextItem":{"title":"Teaclave Meetup #9","permalink":"/blog/2021/11/30/teaclave-meetup-9"}},"content":"## Teaclave\n\n### Three most important unfinished issues to address before graduating:\n\n  - Improve project structure and documentation\n  - Grow the community (attracting more committers, contributors, users)\n  - Publish Apache releases (resolving logistics on Apache release)\n\n### Are there any issues that the IPMC or ASF Board need to be aware of?\n\nNone.\n\n### How has the community developed since the last report?\n\nSince the last report, we have organized two monthly virtual meetups. For each meetup, we have write-ups published on the Teaclave blog.\n  - Teaclave Meetup #8: <https://teaclave.apache.org/blog/2021-10-14-teaclave-meetup-8/>\n  - Teaclave Meetup #9: <https://teaclave.apache.org/blog/2021-11-30-teaclave-meetup-9/>\n\nWe also published a security advisory on a recent vulnerability on Intel SGX SDK.\n  - SECURITY ADVISORY OF SMASHEX AND CVE-2021-0186: <https://teaclave.apache.org/blog/2021-10-25-security-advisory-of-smashex-and-cve-2021-0186/>\n\nTo promote the recent TrustZone SDK in the Chinese community, we published a blog on getting started with the SDK for newcomers.\n  - 使用 TEACLAVE TRUSTZONE SDK 开发 TRUSTZONE 应用: <https://teaclave.apache.org/blog/2021-10-15-developing-teaclave-application-with-teaclave-trustzone-sdk/>\n\n### How has the project developed since the last report?\n\nHere are the summaries of recent progress:\n\nTeaclave Faas Platform\n\n  - [docker] start Teaclave docker services with auto-detection mechanism\n  - Support selectively including executors (#574)\n  - Optimize RPC memory footprint of serde (#577)\n  - Persistent MockDB in test mode. (#580)\n  - Flush DB and compact_range after dequeue operation\n  - API updates (#588): UpdateFunction, ListFunciton, DeleteFunction, UserUpdate, UserRegister, UserUpdate\n  - Introduce role-based user management and access control\n  - Bug fixes and code refactoring\n\nTeaclave TrustZone SDK\n\n  - Update Rust toolchain to nightly-2021-09-20 an std to 1.56.1\n\nTeaclave SGX SDK\n\n  - Support Intel SGX SDK 2.15, DCAP 1.12\n  - Update rust toolchain to nightly-2021-11-01\n\nWebsite\n\n  - [blog] Teaclave Meetup #8: <https://teaclave.apache.org/blog/2021-10-14-teaclave-meetup-8/>\n  - [blog] Teaclave Meetup #9: <https://teaclave.apache.org/blog/2021-11-30-teaclave-meetup-9/>\n  - [blog] SECURITY ADVISORY OF SMASHEX AND CVE-2021-0186: <https://teaclave.apache.org/blog/2021-10-25-security-advisory-of-smashex-and-cve-2021-0186/>\n  - [blog] 使用 TEACLAVE TRUSTZONE SDK 开发 TRUSTZONE 应用: <https://teaclave.apache.org/blog/2021-10-15-developing-teaclave-application-with-teaclave-trustzone-sdk/>\n\n### How would you assess the podling's maturity?\nPlease feel free to add your own commentary.\n\n  - [ ] Initial setup\n  - [ ] Working towards first release\n  - [x] Community building\n  - [ ] Nearing graduation\n  - [ ] Other:\n\n### Date of last release:\n\n  2021-08-23: Apache Teaclave (incubating) 0.3.0\n\n### When were the last committers or PPMC members elected?\n\n  - 2021-09-20: Yuan Zhuang (Apache ID: yuanz), Committer\n  - 2021-09-20: Rong Fan (Apache ID: fanrong), Committer\n\n### Have your mentors been helpful and responsive?\n\nYes, our mentors work responsively to help us with electing new mentors, developing new features, fixing bugs, and expanding the community.\n\n### Is the PPMC managing the podling's brand / trademarks?\n\nWe don't find any 3rd parties incorrectly using the podling's name and brand.  The VP, Brand has approved the project name. (PODLINGNAMESEARCH-175)"},{"id":"/2021/11/30/teaclave-meetup-9","metadata":{"permalink":"/blog/2021/11/30/teaclave-meetup-9","editUrl":"https://github.com/apache/incubator-teaclave-website/tree/master/site/blog/blog/2021-11-30-teaclave-meetup-9.md","source":"@site/blog/2021-11-30-teaclave-meetup-9.md","title":"Teaclave Meetup #9","description":"Agenda","date":"2021-11-30T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[{"name":"Mingshen Sun","key":null,"page":null}],"frontMatter":{"title":"Teaclave Meetup #9","date":"2021-11-30T00:00:00.000Z","author":"Mingshen Sun"},"unlisted":false,"prevItem":{"title":"Podling Teaclave Report - Jan 2022","permalink":"/blog/2022/01/12/podling-teaclave-report-jan-2022"},"nextItem":{"title":"Security Advisory of SmashEx and CVE-2021-0186","permalink":"/blog/2021/11/01/security-advisory-of-smashex-and-cve-2021-0186"}},"content":"## Agenda\n\n- SmashEx: Smashing SGX Enclaves Using Exceptions — Jinhua Cui\n\n## Notes\n\n- *SmashEx: Smashing SGX Enclaves Using Exceptions* (CCS 2021):\n  Jinhua Cui (National University of Defense Technology, National University of\n  Singapore); Zhijingcheng Yu (National University of Singapore); Shweta Shinde\n  (ETH Zurich); Prateek Saxena (National University of Singapore); Zhiping Cai\n  (National University of Defense Technology)\n- [https://arxiv.org/ftp/arxiv/papers/2110/2110.06657.pdf](https://arxiv.org/ftp/arxiv/papers/2110/2110.06657.pdf)\n- CVE-2021-0186\n    - [https://www.intel.com/content/www/us/en/security-center/advisory/intel-sa-00548.html](https://www.intel.com/content/www/us/en/security-center/advisory/intel-sa-00548.html)\n    - **Description**: Improper input validation in the Intel(R) SGX SDK\n      applications compiled for SGX2 enabled processors may allow a privileged\n      user to potentially escalation of privilege via local access.\n    - **Affected Products**: Intel SGX SDK for Windows v2.12 and earlier, Intel\n      SGX SDK for Linux v2.13 and earlier, Intel® Processors supporting SGX2.\n    - Intel recommends updating the Intel® SGX SDK to the versions listed below.\n      Enclaves built with the new Intel® SGX SDK version should increment the\n      value of their ISVSVN field.\n- Patch: [https://github.com/intel/linux-sgx/commit/edfe42a517b3e4b1d81204c3cdef6da6cb35fefc](https://github.com/intel/linux-sgx/commit/edfe42a517b3e4b1d81204c3cdef6da6cb35fefc)\n- [Security Advisory from the Teaclave Community](https://teaclave.apache.org/blog/2021-10-25-security-advisory-of-smashex-and-cve-2021-0186/)\n\n## Attendees\n\n- Jinghua\n- Ran Duan\n- Rong Fan\n- Gordon\n- He Sun\n- Hongbo Chen\n- Jason Yu\n- Pei Wang\n- ruanwenwen\n- Rundong\n- Tongxin Li\n- Weijie Liu\n- Yuan Zhuang\n- Zha0Chan\n- Mingshen Sun\n\n## Group Photo\n\n![Group Photo](./img/teaclave-meetup-9-zoom.png)"},{"id":"/2021/11/01/security-advisory-of-smashex-and-cve-2021-0186","metadata":{"permalink":"/blog/2021/11/01/security-advisory-of-smashex-and-cve-2021-0186","editUrl":"https://github.com/apache/incubator-teaclave-website/tree/master/site/blog/blog/2021-11-01-security-advisory-of-smashex-and-cve-2021-0186.md","source":"@site/blog/2021-11-01-security-advisory-of-smashex-and-cve-2021-0186.md","title":"Security Advisory of SmashEx and CVE-2021-0186","description":"Recently, we were notified of a re-entrancy vulnerability in the exception","date":"2021-10-25T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[{"name":"Mingshen Sun","key":null,"page":null}],"frontMatter":{"title":"Security Advisory of SmashEx and CVE-2021-0186","date":"2021-10-25T00:00:00.000Z","author":"Mingshen Sun"},"unlisted":false,"prevItem":{"title":"Teaclave Meetup #9","permalink":"/blog/2021/11/30/teaclave-meetup-9"},"nextItem":{"title":"使用 Teaclave TrustZone SDK 开发 TrustZone 应用","permalink":"/blog/2021/10/15/developing-teaclave-application-with-teaclave-trustzone-sdk"}},"content":"Recently, we were notified of a re-entrancy vulnerability in the exception\nhandling designs of some popular SGX SDKs (including Intel SGX SDK), resulting in\narbitrary disclosure of enclave private memory and code-reuse attacks in SGX\nenclave.\n\nThe vulnerability is named as [SmashEx](https://jasonyu1996.github.io/SmashEx/)\n[1]. The SmashEx attack affects several SGX runtimes with exception handling.\nFor Intel SGX SDK, the assigned identifier is\n[CVE-2021-0186](https://www.intel.com/content/www/us/en/security-center/advisory/intel-sa-00548.html) [2].\nWhile the vulnerability itself is not a Teaclave flaw, we're taking proactive\nmeasures to explain and mitigate its impact on Teaclave users.\n\n## Overview\n\nDue to the lack of atomicity primitives in SGX enclaves, an SGX enclave can be\ninterrupted and re-entered at any time, including when it is in a state unsafe\nfor re-entry (i.e., when it is executing a critical section). The SmashEx attack\nexploits such unsafe enclave re-entries happening in the exception handling\nmechanism in the SGX runtime.\n\nA malicious host can create an exception immediately after EENTER which causes\ncontrol to be transferred to the host before the enclave stack (RSP register)\nhas been properly set up. Then, a special ECALL (called `ECMD_EXCEPT`) to\nenclave will use the attacker-controlled RSP register to setup the context of\nthe exception handler function. At last, when the host transfers control back to the\nenclave with ERESUME, it may execute with a stack that resides in host memory\nthereby enabling ROP exploits.\n\nThis vulnerability can be fixed by adding extra checks on untrusted RSP when\nconstructing the context of the exception handler.\n\n## Affected Versions\n\nFor Intel SGX SDK, the vulnerability affects all projects using the following\nversions.\n\n- Intel SGX SDK for Windows v2.12 and erlier\n- Intel SGX SDK for Linux v2.13 and earlier\n\n## Impacts on Teaclave\n\nTeaclave SGX SDK wraps Intel SGX SDK and provides a Rust development\nenvironment. The affected Intel SGX SDK version was recommended in Rust SGX SDK\nv1.1.3 (which is a pre-Apache release). Therefore, people using Rust SGX SDK\nv1.1.3 with the vulnerable Intel SGX SDK (v2.13 and earlier) are also\nvulnerable. *However, the current Teaclave SGX SDK is compatible with newer Intel SGX\nSDK versions. Therefore, we recommend all users to upgrade to the latest Intel\nSGX SDK.*\n\nFor Teaclave (i.e., the Teaclave FaaS platform), it uses Teaclave SGX SDK to\nbuild a confidential computing platform. Therefore, the Teaclave v0.2.0 released\nin March used the vulnerable Intel SGX SDK version.\n*However, the [v0.3.0 released](https://github.com/apache/incubator-teaclave/releases/tag/v0.3.0) [3]\nin August has upgraded the Intel SGX SDK to v2.14 with the fix. Therefore,\nthe latest release of Teaclave is not affected by this vulnerability.*\n\n## Patches & Mitigations\n\nThe vulnerability has been fixed in Intel SGX SDK in this patch:\n - Patch: <https://github.com/intel/linux-sgx/commit/edfe42a517b3e4b1d81204c3cdef6da6cb35fefc>\n\nTeaclave users can apply the following mitigations:\n\n- Use Teacalve SGX SDK with Intel SGX SDK for Linux version 2.14 or later\n- Upgrade to Teaclave 0.3.0 or later\n\n## Acknowledgements\n\nWe would like to thank Jinhua Cui, National University of Defense Technology and\nNational University of Singapore, Shweta Shinde, ETH Zurich , Zhijingcheng Yu,\nNational University of Singapore, and Prateek Saxena, National University of\nSingapore for notifying us about this issue.\n\n## References\n\n- [1] <https://jasonyu1996.github.io/SmashEx/>\n- [2] <https://www.intel.com/content/www/us/en/security-center/advisory/intel-sa-00548.html>\n- [3] <https://github.com/apache/incubator-teaclave/releases/tag/v0.3.0>\n- [SmashEx: Smashing SGX Enclaves Using Exceptions](https://arxiv.org/abs/2110.06657)\n- [Open Enclave SDK Elevation of Privilege Vulnerability](https://github.com/openenclave/openenclave/security/advisories/GHSA-mj87-466f-jq42)"},{"id":"/2021/10/15/developing-teaclave-application-with-teaclave-trustzone-sdk","metadata":{"permalink":"/blog/2021/10/15/developing-teaclave-application-with-teaclave-trustzone-sdk","editUrl":"https://github.com/apache/incubator-teaclave-website/tree/master/site/blog/blog/2021-10-15-developing-teaclave-application-with-teaclave-trustzone-sdk.md","source":"@site/blog/2021-10-15-developing-teaclave-application-with-teaclave-trustzone-sdk.md","title":"使用 Teaclave TrustZone SDK 开发 TrustZone 应用","description":"[[TOC]]","date":"2021-10-15T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[{"name":"Wenwen Ruan","key":null,"page":null}],"frontMatter":{"title":"使用 Teaclave TrustZone SDK 开发 TrustZone 应用","date":"2021-10-15T00:00:00.000Z","author":"Wenwen Ruan"},"unlisted":false,"prevItem":{"title":"Security Advisory of SmashEx and CVE-2021-0186","permalink":"/blog/2021/11/01/security-advisory-of-smashex-and-cve-2021-0186"},"nextItem":{"title":"Teaclave Meetup #8","permalink":"/blog/2021/10/14/teaclave-meetup-8"}},"content":"[[TOC]]\n\n在 [欢迎 RUST OP-TEE TRUSTZONE SDK 成为 TEACLAVE 子项目](https://teaclave.apache.org/blog/2021-03-15-welcome-rust-optee-trustzone-sdk-cn/) 一文中已经对Teaclave TrustZone SDK 项目进行了简单的介绍。在本文中，将会介绍使用 Teaclave TrustZone SDK 开发 TrustZone 应用程序。\n \n## Teaclave TrustZone SDK 应用开发环境搭建\n### 准备条件\n+ Ubuntu 系列\n\n*本文基于的 Teaclave TrustZone SDK 提交哈希值：8520a2018705edcebfb7e729bd2ced12414fc052*\n### 配置 Teaclave TrustZone SDK 编译环境\n下载 Teaclave TrustZone SDK 项目，初始化相关的子模块并安装 Rust 工具链以及交叉编译工具 Xargo。\n\n```sh\n$ git clone https://github.com/apache/incubator-teaclave-trustzone-sdk\n$ cd incubator-teaclave-trustzone-sdk\n$ ./setup.sh\n```\n\n初始化 OP-TEE 子模块。初始化完毕之后，在 `optee` 根目录下需要有 `build/`, `optee_os/` 和 `optee_client` 子目录。\n\n```sh\n$ git submodule update --init -- optee\n```\n\n在编译样例之前，需要设置环境变量。\n```sh\n$ source environment\n```\n默认情况下，目标平台是 `aarch64`，如果希望为 `arm` 平台编译，需要在 `source environment` 之前设置 `ARCH` 变量。\n```sh\n$ export ARCH=arm\n$ source environment\n```\n\n接着，下载 ARM 工具链并编译 OP-TEE 库。\n\n```sh\nmake optee\n```\n\n最后，编译 Teaclave TrustZone SDK 官方提供的例子。\n```sh\nmake examples\n```\n\n\n### 在 QEMU ARMv8 上运行 Teaclave TrustZone SDK 应用程序\n\n现在，Teaclave TrustZone SDK 官方提供的示例已经编译好了，但如果需要在 QEMU ARMv8 模拟器上运行这些示例，还需要准备一个支持 OP-TEE 的 QEMU 环境，从而在该环境上运行已经编译好的 SDK 中的示例。\n首先，需要安装 QEMU 环境需要的依赖。\n\n\n```sh\n$ sudo apt-get install android-tools-adb android-tools-fastboot autoconf \\\n        automake bc bison build-essential ccache cscope curl device-tree-compiler \\\n        expect flex ftp-upload gdisk iasl libattr1-dev libc6:i386 libcap-dev \\\n        libfdt-dev libftdi-dev libglib2.0-dev libhidapi-dev libncurses5-dev \\\n        libpixman-1-dev libssl-dev libstdc++6:i386 libtool libz1:i386 make \\\n        mtools netcat python-crypto python3-crypto python-pyelftools \\\n        python3-pycryptodome python3-pyelftools python-serial python3-serial \\\n        rsync unzip uuid-dev xdg-utils xterm xz-utils zlib1g-dev\n```\n也可以选择使用 Teaclave TrustZone SDK 官方提供的 docker，在 docker 中开发就无需下载上述依赖。\n```\n$ docker pull teaclave/teaclave-trustzone-sdk-build:0.2.1\n# start docker\n$ docker run -ti teaclave/teaclave-trustzone-sdk-build:0.2.1\n```\n\n下载 QEMU ARMv8 对应的 OP-TEE 的源代码。\n```sh\n$ mkdir -p ~/bin\n$ curl https://storage.googleapis.com/git-repo-downloads/repo-1 > ~/bin/repo && chmod a+x ~/bin/repo\n$ export PATH=~/bin:$PATH\n$ mkdir optee-qemuv8-3.14.0 && cd optee-qemuv8-3.14.0 && \\\n  repo init -u https://github.com/OP-TEE/manifest.git -m qemu_v8.xml -b 3.14.0 && \\\n  repo sync -j4 --no-clone-bundle\n```\n\n编译 QEMU ARMv8 OP-TEE。\n```sh\n$ cd build\n$ make -j2 toolchains && \\\n  make QEMU_VIRTFS_ENABLE=y CFG_TEE_RAM_VA_SIZE=0x00300000\n```\n在漫长的编译过程之后，还需要新建一个共享文件夹，用于和 QEMU 子系统共享示例的 host apps 和 TAs。\n\n 首先要将 `path/to/example/host/target/aarch64-unknown-linux-gnu/release/example` 和 `path/to/example/ta/target/aarch64-unknown-optee-trustzone/release/*.ta` 分别复制到 `incubator-teaclave-trustzone-sdk/out/host` 和 `incubator-teaclave-trustzone-sdk/out/ta/`。接着还需要将 `incubator-teaclave-trustzone-sdk/out/*` 中的文件复制到 QEMU 共享文件夹 `shared_folder/` 中。\n\n```\n$ mkdir shared_folder\n$ (cd /project/root/dir/ && make examples-install)\n$ cp -r /project/root/dir/out/* shared_folder/\n```\n如果处于一个没有 GUI 的运行环境，在启动 QEMU 之前，还需要修改 `qemu_v8.mk` 中的代码。以 OP-TEE QEMU 3.14.0 版本为例，注释掉 `optee-qemuv8-3.14.0/build/qemu_v8.mk` 中的 386-388 行。\n```makefile\n.PHONY: run-only\nrun-only:\n        ln -sf $(ROOT)/out-br/images/rootfs.cpio.gz $(BINARIES_PATH)/\n        $(call check-terminal)\n        $(call run-help)\n        # $(call launch-terminal,54320,\"Normal World\")\n        # $(call launch-terminal,54321,\"Secure World\")\n        # $(call wait-for-ports,54320,54321)\n        cd $(BINARIES_PATH) && $(QEMU_BUILD)/aarch64-softmmu/qemu-system-aarch64 \\\n```\n在启动 QEMU 之前前，需要运行 `nc` 来监听端口 `54320` 和 `54321`。\n```sh\n$ nc -l 127.0.0.1 -p 54320\n$ nc -l 127.0.0.1 -p 54321\n```\n进入 `qemu_v8.mk` 所在的目录启动 QEMU。 \n```\nmake run-only QEMU_VIRTFS_ENABLE=y QEMU_VIRTFS_HOST_DIR=$(pwd)/shared_folder\n```\n当 QEMU 启动之后，端口 `54320` 窗口中运行的是普通世界，端口 `54321` 窗口中运行的是安全世界。在普通世界中，根据提示输入 `root` 登录后，需要将共享文件夹挂载到 QEMU 子系统中，用于在 QEMU 中访问编译好的 CA/TA 可执行文件。\n\n```sh\n$ mkdir shared && mount -t 9p -o trans=virtio host shared\n```\n接着，需要将 TA 复制到 `/lib/optee_armtz` 目录下，提供给安全世界调用。\n```sh\n$ cd shared && cp ta/*.ta /lib/optee_armtz/\n```\n进入 `host` 文件夹中并执行 host apps。\n```sh\n$ cd host\n$ ./hello_world\noriginal value is 29\ninc value is 129\ndec value is 29\nSuccess\n```\n至此，我们成功地在 QEMU 环境中运行了 Teaclave TrustZone SDK 的 `hello_world-rs` 示例。\n\n### 配置 Teaclave TrustZone SDK 应用程序的 debug 环境\n\n在开发应用程序的时候，难免会有 debug 的需求，在这不一部分，将会简单介绍如何在 Teaclave TrustZone SDK 中配置 debug 环境。\n\n在编译 QEMU ARMv8 OPTEE 时需要关闭 ASLR，可以通过直接修改 `OP-TEE/optee_os/mk/config.mk` 文件中的 `CFG_CORE_ASLR` 为 `n`，注意修改之后还需要重新编译 `make run`。\n```makefile\n# CFG_CORE_ASLR ?= y\nCFG_CORE_ASLR ?= n\n```\n也可以直接在编译时添加编译信息： `make run CFG_CORE_ASLR=n`。\n\n由于程序是在远程系统上 (QEMU) 上被 debugged，所以在编译时还需要加上 `GDBSERVER=y`。\n\n在启动 gdb 之后，执行 `target remote :1234` 命令连接上 QEMU GDB 服务器端口。\n```sh\n$ ./path/to/qemu-v8-project/out-br/host/bin/aarch64-buildroot-linux-gnu-gdb\n(gdb) target remote :1234\nRemote debugging using :1234\nwarning: No executable has been specified and target does not support\ndetermining executable automatically.  Try using the \"file\" command.\n0xffffb30b00ea12b4 in ?? ()\n```\n接下来，加载 TEE 内核符号表。\n```sh\n(gdb) symbol-file /path/to/qemu-v8-project/optee_os/out/arm/core/tee.elf\n```\n以 `hello_world-rs` 为例，根据安全世界窗口提示，可知 `hello_world-rs` 的 TA text 部分的起始地址为 0x40014000。\n```\nD/LD:  ldelf:168 ELF (133af0ca-bdab-11eb-9130-43bf7873bf67) at 0x40014000\n```\n根据该地址提示，从该地址开始加载 `hello_world-rs` 的 ta 符号表。\n```sh\n(gdb) add-symbol-file /path/to/examples/hello_world-rs/ta/target/aarch64-unknown-optee-trustzone/debug/ta 0x40014000\n```\n然后，可以根据自己的需求在相应的函数或地址上打断点。\n```\n(gdb) b open_session\n```\n\n![QEMU 执行示意图](./img/2021-10-15-qemu-world-execution-windows.png)\n\n## Teaclave TrustZone SDK 示例 hello_world-rs 剖析\n### `hello_world-rs` 目录结构\n```\n├── Makefile\n├── host\n│   ├── Cargo.lock\n│   ├── Cargo.toml\n│   ├── Makefile\n│   └── src\n│       └── main.rs\n├── proto\n│   ├── Cargo.toml\n│   ├── build.rs\n│   └── src\n│       └── lib.rs\n├── ta\n│   ├── Cargo.lock\n│   ├── Cargo.toml\n│   ├── Makefile\n│   ├── Xargo.toml\n│   ├── build.rs\n│   ├── src\n│   │   └── main.rs\n│   ├── ta_aarch64.lds\n│   ├── ta_arm.lds\n│   └── ta_static.rs\n└── uuid.txt\n\n```\n+ `host` 文件夹中存放的是普通世界的 `untrusted code`。\n  + `host/src/main.rs` 是 `hello_world-rs` 应用程序执行的入口，`Cargo.toml` 描述了 `host` 部分的依赖， `Cargo.lock` 中包含了依赖项的完整信息，`Makefile` 定义了 `host` 部分的编译信息。\n+ `ta` 文件夹中存放的是安全世界中的 `trusted code`。\n  + 相比较 `host`，`ta` 文件夹中多了以下文件：`Xargo.toml` 是 TA 的交叉编译文件 ，`ta_aarch64.lds` 和 `ta_arm.lds` 分别定义了在 64 位架构和 32 位架构下 teaclave trustzone sdk 应用程序各部分在程序地址空间内的布局；`ta_static.rs` 定义了 TA 中的静态数据信息。\n+ `proto` 文件夹中存放的是 CA (Client Application) 和 TA (Trusted Application) 共享的数据结构，并承担着解析 `uuid.txt` 提取 UUID 的任务。\n+ `uuid.txt` 文件中记录的是 TA 的 UUID，是每个 TA 独一无二的身份标识。\n\n### `hello_world-rs` 重要代码文件解析\n\n+ `host/src/main.rs`\n\n进入 `main` 函数，首先调用 `Context::new` 函数建立起 `hello_world-rs` CA 和 TA 的逻辑联系，`ctx` 指向类型为 `Context` 的变量的地址，用于 CA 和 TA 的连接和通信。\n```rust\nlet mut ctx = Context::new()?;\n```\n调用 `open_session` 在 CA 和对应的 TA 中打开一个 `session`，并将 `hello_world-rs` 的 UUID 作为参数传入，用于指引 CA 连接对应 UUID 值的 TA。\n```rust\nlet uuid = Uuid::parse_str(UUID).unwrap();\nlet mut session = ctx.open_session(uuid)?;\n```\n\n将 `&mut session` 作为参数传入 `hello_world` 函数中。\n```rust\nhello_world(&mut session)?;\n```\n\n进入到 `hello_world` 函数中，首先将要进行运算的 `u32` 操作数用 `ParamValue` 类型包装为操作数 `p0`，设置其值为29，类型为 `ValueInout`，表示同时作为输入参数和返回值。\n```rust\nlet p0 = ParamValue::new(29, 0, ParamType::ValueInout);\n```\n`operation` 用于保存 CA 要传递给 TA 的参数信息，第一个参数一般保留为 0，由于这里只有一个要传递的参数 `p0`，其他参数都保留为 `ParamNone`。\n```rust\nlet mut operation = Operation::new(0, p0, ParamNone, ParamNone, ParamNone);\n```\n\nCA 端使用获取到的 `session`, `command_id` 和要传递的参数 `operation` 调用 `invoke_command` 执行特定的 `command`，该操作将会切换到安全世界。\n```rust\nsession.invoke_command(Command::IncValue as u32, &mut operation)?;\n```\n\n+ `ta/src/main.rs`\n\n`ta/src/main.rs` 中的 `invoke_command` 函数参数与 host 中调用的 `invoke_command` 略有不同，第二个参数是 `Paramters` 类型。当数据从 CA 传递到 TA 时，实际上执行的是按 bit 的复制操作，所以 `params` 中的数据就是从 `operation` 中传递过来的数据.\n```rust\nfn invoke_command(cmd_id: u32, params: &mut Parameters) -> Result<()> {\n```\n\n`values` 从 `params` 取出要操作的 `u32` 值，`match` 表达式根据传入的参数 `cmd_id` 匹配对应的操作。在下面的代码中，如果匹配到 `Command::IncValue`，就对 `values` 中的 `u32` 值执行 +100 的操作；如果匹配到 `Command::DecValue`，就执行 -100 的操作；如果匹配到其他值，就直接返回错误参数的错误类型。\n\n```rust\nfn invoke_command(cmd_id: u32, params: &mut Parameters) -> Result<()> {\n    trace_println!(\"[+] TA invoke command\");\n    let mut values = unsafe { params.0.as_value().unwrap() };\n    match Command::from(cmd_id) {\n        Command::IncValue => {\n            values.set_a(values.a() + 100);\n            Ok(())\n        }\n        Command::DecValue => {\n            values.set_a(values.a() - 100);\n            Ok(())\n        }\n        _ => Err(Error::new(ErrorKind::BadParameters)),\n    }\n}\n```\n+ `proto/src/lib.rs`\n\n`lib.rs` 中的枚举变量 `Command` 声明是开发者要实现的命令。\n\n```rust\npub enum Command {\n    IncValue,\n    DecValue,\n    Unknown,\n}\n```\n\n### 编译之后的 `hello_world-rs` 代码目录\n编译之后的代码目录如下所示，这里省略了 `release` 文件夹下的内容。\n\n```\n├── Makefile\n├── host\n│   ├── Cargo.lock\n│   ├── Cargo.toml\n│   ├── Makefile\n│   ├── src\n│   │   └── main.rs\n│   └── target                               #[generate] \n│       ├── aarch64-unknown-linux-gnu        #[generate] \n│       │   └── release                      #[generate]\n│       └── release                          #[generate]\n├── proto\n│   ├── Cargo.lock\n│   ├── Cargo.toml\n│   ├── build.rs\n│   ├── src\n│   │   └── lib.rs\n│   └── target                               #[generate]\n│       └── rls                              #[generate]\n│           └── debug                        #[generate]\n├── ta\n│   ├── Cargo.lock\n│   ├── Cargo.toml\n│   ├── Makefile\n│   ├── Xargo.toml\n│   ├── build.rs\n│   ├── src\n│   │   └── main.rs\n│   ├── ta_aarch64.lds\n│   ├── ta_arm.lds\n│   ├── ta_static.rs\n│   └── target                               #[generate]\n│       ├── aarch64-unknown-optee-trustzone  #[generate]\n│       │   └── release                      #[generate]\n│       └── release                          #[generate]\n└── uuid.txt\n```\n`hello_world-rs` 编译过程更类似于 Rust 程序编译。\n+ 编译不可信部分 host 文件夹，生成 `hello_world-rs` 可执行文件；\n+ 交叉编译可信部分 ta 文件夹，再用 UUID 和密钥进行签名，生成 `UUID.ta` 可执行文件。\n+ 在执行时，`hello_world-rs` 对 `UUID.ta` 验证通过后调用执行。\n\n\n## 开发者如何开发自己的 Teaclave TrustZone SDK 应用程序\n\n和前面介绍过的 [使用 TEACLAVE SGX SDK 开发 SGX 应用](https://teaclave.apache.org/blog/2021-08-25-developing-sgx-application-with-teaclave-sgx-sdk/) 相似，这里也同样通过对 Teaclave TrustZone SDK 示例程序 `hello_world-rs` 进行改写来介绍如何构造自己的 Teaclave TrustZone SDK。\n\n需要注意的是，Teaclave TrustZone SDK 是通过 UUID 唯一标识系统中的 TA，UUID 值不能重复，所以我们首先需要通过 [ITU-T UUID generator](https://www.itu.int/en/ITU-T/asn1/Pages/UUID/uuids.aspx) 网站申请属于自己的唯一的 UUID，并将 `uuid.rs` 文件中的内容修改为新得到的 UUID 值。\n```\n1487a406-160d-4641-957e-66292f8d1309\n```\n\n假设开发目标是为两个 `u8` 数组求得交集和并集，也就是要实现交集函数 `Intersection` 和并集函数 `Union` 两个功能函数。\n\n对 `proto/lib.rs` 进行修改，将 `Command` 中的成员替换为待实现的 `Intersection` 和 `Union`。\n\n```rust\npub enum Command {\n    Intersection,\n    Union,\n    Unknown,\n}\n\nimpl From<u32> for Command {\n    #[inline]\n    fn from(value: u32) -> Command {\n        match value {\n            0 => Command::Intersection,\n            1 => Command::Union,\n            _ => Command::Unknown,\n        }\n    }\n}\n```\n\n接着，进入 `host/src/main.rs` 中的 `main` 函数，添加进行数据计算的函数，将用于与 TA 通信的 session 内存地址作为参数传递到 `data_compute` 中。\n\n```rust\ndata_compute(&mut session)?;\n```\n\n在 `data_compute` 中，首先声明要进行数据处理的两个 `u8` 数组 `nums1` 和 `nums2`，以及用于存储数据处理结果的 `resu`。在示例代码 `hello_world` 中的变量声明使用的是 `ParamValue`，但这里我们需要访问数组，一段连续的内存变量而非变量。通过阅读 Teaclave TrustZone SDK client 端的 Rust 仓库 [Crate optee_teec](https://teaclave.apache.org/api-docs/trustzone-sdk/optee-teec/optee_teec/index.html)，可知 `ParamTmpRef` 用于定义临时内存访问。于是将这三个数组地址作为参数新建 `ParamTmpRef` 类型，并将 `ParamTmpRef` 类型变量传递到 `operation` 中，用于传递给 TA 交互信息。\n\n在准备好与 TA 交互的信息后，调用 `invoke_command` 通知对应的 TA 执行 `Command::Intersection` 指定的操作。\n\n```rust\n// in host/src/main.rs\nfn data_compute(session: &mut Session) -> optee_teec::Result<()> {\n    let nums1:[u8; 5] = [1, 2, 3, 4, 5];\n    let nums2:[u8; 5] = [4, 5, 6, 7, 8];\n    let mut resu = vec![0; 10];\n\n    let p1 = ParamTmpRef::new_input(&nums1);\n    let p2 = ParamTmpRef::new_input(&nums2);\n    let p3 = ParamTmpRef::new_output(&mut resu);\n    let mut operation = Operation::new(0, p1, p2, p3, ParamNone);\n\n    println!(\"intersection invoke\");\n    session.invoke_command(Command::Intersection as u32, &mut operation)?;\n}\n```\n`invoke_command` 函数的具体实现在 `ta/sec/main.rs` 文件中的 `invoke_command`。共享的参数通过 `params` 从 CA 传递到 TA 中，\n同样，可以根据 TA 端的 Rust 仓库 [optee_utee](https://teaclave.apache.org/api-docs/trustzone-sdk/optee-utee/optee_utee/index.html) 提供的接口函数抽丝剥茧般地提取出来 `ParamMemref` 类型的 `nums1`, `nums2` 和 `vec_resu`。\n\n```rust\n    let nums1 = unsafe { params.0.as_memref().unwrap().raw() };\n    let nums2 = unsafe { params.1.as_memref().unwrap().raw() };\n    let mut vec_resu = unsafe { params.2.as_memref().unwrap().raw() };\n\n    let nums1_size = unsafe { (*nums1).size };\n    let nums2_size = unsafe { (*nums2).size };\n```\n\n现在，进入 `match` 表达式中，将 `Command::from` 的枚举修改为 `Command::Intersection` 和 `Command::Union`。要实现的函数就填充到对应的分支括号中。\n\n```rust\n  match Command::from(cmd_id) {\n    Command::Intersection => {\n      Ok(())\n    }\n    Command::Union => {\n      Ok(())\n    }\n```\n\n下面的示例代码实现的是求两个数组之间的交集元素。具体的实现是通过一个额外的散列集 `set`，记录 `nums1` 中的所有元素，然后对 `nums2` 中的元素进行遍历，如果 `nums2` 中的元素也出现在了 `set` 中，那么该元素为 `nums1` 和 `nums2` 共有，是交集元素，写入结果向量 `vec_resu` 中，并移除掉 `set` 中的该元素。最后，将结果向量的 `size` 修改为共有的交集元素的个数。其中，要读取 `nums1` 和 `nums2` 数组中的元素，还需要解引用 `ParamMemref` 类型的指针读取出指向元素值的 `buffer` 指针地址，再使用 `offset` 偏移指针从而读出 `nums1` 和 `nums2` 的值。\n\n```rust\n      let mut set: HashSet<u8> = HashSet::new();\n      let mut vec_count = 0;\n      for i in 0..nums1_size {\n        let mut val_nums1 = 0;\n        unsafe {\n          val_nums1 = *((*nums1).buffer as *mut u8).offset(i as isize);\n        };\n        set.insert(val_nums1);\n      }\n\n      for i in 0..nums2_size {\n        let mut val_nums2 = 0;\n        unsafe {\n          val_nums2 = *((*nums2).buffer as *mut u8).offset(i as isize);\n        };\n\n        if set.contains(&val_nums2) {\n          unsafe { *((*vec_resu).buffer as *mut u8).offset(vec_count as isize) = val_nums2; }\n          vec_count += 1;\n          set.remove(&val_nums2);\n        }\n      }\n      unsafe{ (*vec_resu).size = vec_count; }\n```\n\n对于 `Union` 函数的实现，同样是利用一个额外的散列集 `set`，记录 `nums1` 中的所有元素，并直接将 `nums1` 中的元素写入结果向量 `vec_resu` 中，而后再依次读取 `nums2` 中的元素，如果该元素没有在 `set` 中出现，则写入结果向量 `vec_resu` 和散列集 `set` 中。\n```rust\n      let mut set: HashSet<u8> = HashSet::new();\n      let mut vec_count = 0;\n      for i in 0..nums1_size {\n        let mut val_nums1 = 0;\n        unsafe {\n          val_nums1 = *((*nums1).buffer as *mut u8).offset(i as isize);\n          *((*vec_resu).buffer as *mut u8).offset(vec_count as isize) = val_nums1;\n        }\n        vec_count += 1;\n        set.insert(val_nums1);\n      }\n\n      for i in 0..nums2_size {\n        let mut val_nums2 = 0;\n        unsafe {\n          val_nums2 = *((*nums2).buffer as *mut u8).offset(i as isize);\n        };\n\n        if !set.contains(&val_nums2) {\n          unsafe { *((*vec_resu).buffer as *mut u8).offset(vec_count as isize) = val_nums2; }\n          vec_count += 1;\n          set.insert(val_nums2);\n        }\n      }\n      unsafe{ (*vec_resu).size = vec_count; }\n\n```\n回到 `host/src/main.rs`，通过 `updated_size` 函数读取到在 `ta/src/main.rs` 中对 `vec_resu` 新设置的 `size` 值，也就是 `nums1` 和 `nums2` 共有的元素的个数，最后打印出结果向量 `resu` 的值。 \n\n```rust\n    // in data_compute function\n    let updated_size = operation.parameters().2.updated_size();\n    println!(\"Intersection resu = {:?}\", &resu[..updated_size]);\n```\n\n这样，我们就基于 Teaclave TrustZone SDK 提供的示例代码实现了自己的求交集和并集函数。\n\n## 总结\n\n本文首先介绍 Teaclave TrustZone SDK 项目的环境配置过程，然后介绍了简单示例 `hello_world-rs` 的组织结构和编译过程 ，最后，通过修改 `hello_world-rs` 实现 `intersection` 和 `union` 函数为例，介绍如何基于提供的 SampleCode 进行 Teaclave TrustZone SDK 应用程序的开发。 \n\n## 延伸阅读\n+ [Teaclave TrustZone SDK 文档](https://teaclave.apache.org/trustzone-sdk-docs/)\n+ [Teaclave TrustZone SDK 项目论文：《RusTEE: Developing Memory-Safe ARM TrustZone Applications》](https://dl.acm.org/doi/10.1145/3427228.3427262)"},{"id":"/2021/10/14/teaclave-meetup-8","metadata":{"permalink":"/blog/2021/10/14/teaclave-meetup-8","editUrl":"https://github.com/apache/incubator-teaclave-website/tree/master/site/blog/blog/2021-10-14-teaclave-meetup-8.md","source":"@site/blog/2021-10-14-teaclave-meetup-8.md","title":"Teaclave Meetup #8","description":"Agenda","date":"2021-10-14T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[{"name":"Mingshen Sun","key":null,"page":null}],"frontMatter":{"title":"Teaclave Meetup #8","date":"2021-10-14T00:00:00.000Z","author":"Mingshen Sun"},"unlisted":false,"prevItem":{"title":"使用 Teaclave TrustZone SDK 开发 TrustZone 应用","permalink":"/blog/2021/10/15/developing-teaclave-application-with-teaclave-trustzone-sdk"},"nextItem":{"title":"Podling Teaclave Report - October 2021","permalink":"/blog/2021/10/06/podling-teaclave-report-october-2021"}},"content":"## Agenda\n\n- Recent update in Teaclave — Mingshen Sun\n- Using and Customizing Teaclave SGX SDK — Shunfan Zhou\n\n## Notes\n\n### Recent Update in Teaclave — Mingshen\n\n**Platform**\n\n- [docker] start Teaclave docker services with auto-detection mechanism (#559).\n- Use `run-teaclave-service.sh` instead of using `docker-compose` directly.\n\n**SGX SDK**\n\n- v1.1.4-testing: [https://github.com/apache/incubator-teaclave-sgx-sdk/commits/v1.1.4-testing](https://github.com/apache/incubator-teaclave-sgx-sdk/commits/v1.1.4-testing)\n    - Rust `nightly-2021-09-13`\n    - Support Intel SGX SDK 2.15 and DCAP 1.12\n- Project template refactoring\n- README polishing\n\n**TrustZone SDK**\n\n- Teaclave/OP-TEE: Integrating examples in Rust TrustZone SDK in OP-TEE\n    - Multiple PRs to OP-TEE's `manifest`, `build` repos.\n    - Now in the `master` branch, should be available in the next release 3.15 in Oct 15.\n    - OP-TEE with Rust: [https://optee.readthedocs.io/en/latest/building/optee_with_rust.html](https://optee.readthedocs.io/en/latest/building/optee_with_rust.html)\n\n![OP-TEE with Rust](./img/optee-with-rust-doc.png)\n\n**Website**\n\n- Add project/organization logos in the \"Powered By\" page: [https://teaclave.apache.org/powered-by/](https://teaclave.apache.org/powered-by/)\n\n![Project Powered By Teaclave](./img/project-powered-by-teaclave-logo.png)\n\n- Redesign the \"Contributors\" page\n    - add Apache ID, GitHub ID to mentors, PPMC, and committers\n    - Tags for committers to show areas that they are familiar with\n- Add API Docs (references) of TrustZone SDK both for host and TA sides\n    - Host: [https://teaclave.apache.org/api-docs/trustzone-sdk/optee-teec](https://teaclave.apache.org/api-docs/trustzone-sdk/optee-teec)\n    - TA: [https://teaclave.apache.org/api-docs/trustzone-sdk/optee-utee](https://teaclave.apache.org/api-docs/trustzone-sdk/optee-utee)\n    \n![Teaclave TrustZone SDK Links in Homepage](./img/teaclave-trustzone-sdk-links-in-homepage.png)\n    \n- Blog\n    - [Podling Teaclave Report - October 2021](https://teaclave.apache.org/blog/2021-10-06-podling-teaclave-report-october-2021/) · Oct 05 2021\n    - [Announcing Apache Teaclave (incubating) 0.3.0](https://teaclave.apache.org/blog/2021-10-01-announcing-teaclave-0-3-0/) · Sep 30 2021\n\n**Community**\n\n- New committers: Yuan Zhuang and Rong Fan from Baidu\n- Discord: Connect directly with Teaclave community members (join link: [https://discord.gg/ynECXsxm5P](https://discord.gg/ynECXsxm5P))\n\n**Security**\n\n- *SmashEx: Smashing SGX Enclaves Using Exceptions* (to appear at CCS 2021):\n  Jinhua Cui (National University of Defense Technology, National University of\n  Singapore); Zhijingcheng Yu (National University of Singapore); Shweta Shinde\n  (ETH Zurich); Prateek Saxena (National University of Singapore); Zhiping Cai\n  (National University of Defense Technology)\n- [https://arxiv.org/ftp/arxiv/papers/2110/2110.06657.pdf](https://arxiv.org/ftp/arxiv/papers/2110/2110.06657.pdf)\n- CVE-2021-0186\n    - [https://www.intel.com/content/www/us/en/security-center/advisory/intel-sa-00548.html](https://www.intel.com/content/www/us/en/security-center/advisory/intel-sa-00548.html)\n    - **Description**: Improper input validation in the Intel(R) SGX SDK\n      applications compiled for SGX2 enabled processors may allow a privileged\n      user to potentially escalation of privilege via local access.\n    - **Affected Products**: Intel SGX SDK for Windows v2.12 and earlier, Intel\n      SGX SDK for Linux v2.13 and earlier, Intel® Processors supporting SGX2.\n    - Intel recommends updating the Intel® SGX SDK to the versions listed below.\n      Enclaves built with the new Intel® SGX SDK version should increment the\n      value of their ISVSVN field.\n- Patch: [https://github.com/intel/linux-sgx/commit/edfe42a517b3e4b1d81204c3cdef6da6cb35fefc](https://github.com/intel/linux-sgx/commit/edfe42a517b3e4b1d81204c3cdef6da6cb35fefc)\n\n![Patch in Intel SGX SDK](./img/cve-2021-0186-patch.png)\n\n### Using and Customizing Teaclave SGX SDK — Shunfan Zhou\n\n- Teaclave SGX SDK\n    - pro: security\n    - con: testing is hard\n- Case study: rust-bitcoin\n    - std\n    - Feature\n    - Port dependencies recursively\n- Some issues\n    - efforts of porting\n    - security: 1) updates of upstream, 2) unit tests\n    - More TEE backend: AMD SEV, ARM CCA\n- libs is not completed in SGX for vanilla Rust standard library\n- Phala libc-hacks\n    - directly use Intel's libc\n    - use ocall warpper functions\n- Conflicts: multiple language items in Rust\n- Runtime behavior checks\n- HW mode issue: `rand::thread_rnd()` is using CPUID, which is not allowed in SGX\n- Check instructions after compiling\n\n### Free Discussion\n\n- About AMD SEV in Azure: [https://azure.microsoft.com/en-us/blog/azure-and-amd-enable-lift-and-shift-confidential-computing/](https://azure.microsoft.com/en-us/blog/azure-and-amd-enable-lift-and-shift-confidential-computing/)\n\n## Attendees\n\n- Mingshen Sun\n- Qinkun Bao\n- He Sun\n- George\n- Hongbo Chen\n- hang\n- Kevin\n- Ben\n- Ruide\n- Rudong Zhou\n- shelven\n- Tongxin Li\n- Weijie Liu\n- Zha0Chan\n- Tianyi Li\n- DuanRan\n- Gordon\n- david\n\n\n## Group Photo\n\n![Group Photo](./img/teaclave-meetup-8-zoom.png)"},{"id":"/2021/10/06/podling-teaclave-report-october-2021","metadata":{"permalink":"/blog/2021/10/06/podling-teaclave-report-october-2021","editUrl":"https://github.com/apache/incubator-teaclave-website/tree/master/site/blog/blog/2021-10-06-podling-teaclave-report-october-2021.md","source":"@site/blog/2021-10-06-podling-teaclave-report-october-2021.md","title":"Podling Teaclave Report - October 2021","description":"Teaclave","date":"2021-10-06T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[{"name":"Mingshen Sun","key":null,"page":null}],"frontMatter":{"title":"Podling Teaclave Report - October 2021","date":"2021-10-06T00:00:00.000Z","author":"Mingshen Sun"},"unlisted":false,"prevItem":{"title":"Teaclave Meetup #8","permalink":"/blog/2021/10/14/teaclave-meetup-8"},"nextItem":{"title":"Announcing Apache Teaclave (incubating) 0.3.0","permalink":"/blog/2021/10/01/announcing-teaclave-0.3.0"}},"content":"## Teaclave\n\nTeaclave is a universal secure computing platform, making computation on privacy-sensitive data safe and simple.\n\nTeaclave has been incubating since 2019-08-20.\n\n### Three most important unfinished issues to address before graduating:\n\n  - Improve project structure and documentation\n  - Grow the community (attracting more committers, contributors, users)\n  - Publish Apache releases (resolving logistics on Apache release)\n\n### Are there any issues that the IPMC or ASF Board need to be aware of?\n\nNone.\n\n### How has the community developed since the last report?\n\nSince the last report, we have organized one monthly virtual meetup (we skipped one due to the public holiday). For each meetup, we have minutes write-up published on the Teaclave blog.\n  - Teaclave Meetup #7: <https://teaclave.apache.org/blog/2021-08-26-teaclave-meetup-7/>\n\nStarting from this meetup, we use Google Calendar to show the meetup schedule and location (i.e., the Zoom link).\n  - Teaclave Community Calendar: <https://calendar.google.com/calendar/u/0/embed?src=l1q5osem2br8i4bj7dgik5sae4@group.calendar.google.com>\n\nWe also have two new members elected since the last report:\n  - 2021-09-20: Yuan Zhuang (Apache ID: TBD), Committer\n  - 2021-09-20: Rong Fan (Apache ID: TBD), Commiter\n\n### How has the project developed since the last report?\n\nHere are the summaries of recent progress:\n\nTeaclave Faas Platform\n\n  - Add TVM MNIST example\n  - Add IDE helper script\n  - Add license header and include SkyWalking Eyes in CI for automatic checking\n  - Release v0.3.0: https://teaclave.apache.org/download/#teaclave\n  - Consolidate `docker-compose` scripts for servers with different SGX drivers\n\nTeaclave TrustZone SDK\n\n  - TEE Socket APIs and examples\n  - Upgrade building docker to Ubuntu 20.04\n  - Switch to GitHub Actions\n  - Add -rs to examples and update test scripts\n  - Update to OP-TEE 3.14.0\n\nTeaclave SGX SDK\n\n  - Intel SGX SDK 2.14\n  - Move wiki pages to the document directory for homepage rendering\n  - Better project template\n\nWebsite\n\n  - [blog] 使用 Teaclave SGX SDK 开发 SGX 应用 · Aug 24 2021: <https://teaclave.apache.org/blog/2021-08-25-developing-sgx-application-with-teaclave-sgx-sdk/>\n  - [blog] Announcing Apache Teaclave (incubating) 0.3.0 · Sep 30 2021: <https://teaclave.apache.org/blog/2021-10-01-announcing-teaclave-0-3-0/>\n  - [style] Update the contributors page to include Apache ID and tags for each committers\n\nCommunity Collaboration\n\n  - Teaclave/Intel: Integrating Graphene as a new Library OS executor\n  - Teaclave/OP-TEE: Integrating examples in Rust TrustZone SDK in OP-TEE\n\n### How would you assess the podling's maturity?\nPlease feel free to add your own commentary.\n\n  - [ ] Initial setup\n  - [ ] Working towards first release\n  - [x] Community building\n  - [ ] Nearing graduation\n  - [ ] Other:\n\n### Date of last release:\n\n  2021-08-23: Apache Teaclave (incubating) 0.3.0\n\n### When were the last committers or PPMC members elected?\n\n  - 2021-09-20: Yuan Zhuang (Apache ID: TBD), Committer\n  - 2021-09-20: Rong Fan (Apache ID: TBD), Committer\n\n### Have your mentors been helpful and responsive?\n\nYes, our mentors work responsively to help us with electing new mentors, developing new features, fixing bugs, and expanding the community.\n\n### Is the PPMC managing the podling's brand / trademarks?\n\nWe don't find any 3rd parties incorrectly using the podling's name and brand.  The VP, Brand has approved the project name. (PODLINGNAMESEARCH-175)"},{"id":"/2021/10/01/announcing-teaclave-0.3.0","metadata":{"permalink":"/blog/2021/10/01/announcing-teaclave-0.3.0","editUrl":"https://github.com/apache/incubator-teaclave-website/tree/master/site/blog/blog/2021-10-01-announcing-teaclave-0.3.0.md","source":"@site/blog/2021-10-01-announcing-teaclave-0.3.0.md","title":"Announcing Apache Teaclave (incubating) 0.3.0","description":"On behalf of the Teaclave community, I am happy to announce the third Apache","date":"2021-10-01T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[{"name":"Mingshen Sun","key":null,"page":null}],"frontMatter":{"title":"Announcing Apache Teaclave (incubating) 0.3.0","date":"2021-10-01T00:00:00.000Z","author":"Mingshen Sun"},"unlisted":false,"prevItem":{"title":"Podling Teaclave Report - October 2021","permalink":"/blog/2021/10/06/podling-teaclave-report-october-2021"},"nextItem":{"title":"Teaclave Meetup #7","permalink":"/blog/2021/08/26/teaclave-meetup-7"}},"content":"On behalf of the Teaclave community, I am happy to announce the *third* Apache\nIncubator release of Teaclave, 0.3.0. Teaclave is a universal secure computing\nplatform, making computation on privacy-sensitive data safe and simple.\nApache Teaclave (including the\n[FaaS platform](https://github.com/apache/incubator-teaclave),\n[SGX SDK](https://github.com/apache/incubator-teaclave-sgx-sdk),\nand [TrustZone SDK](https://github.com/apache/incubator-teaclave-trustzone-sdk)) is\nbeing used and contributed by developers from many organizations and\nother open source projects. Please see the [*powered by*](/powered-by) page to learn more.\n\nThis is the third official Apache Incubator release. In this release, we focus\nmore on bringing [WebAssembly](https://webassembly.org/) into Teaclave. Now, you\ncan run functions written in different languages in Teaclave with the\nWebAssembly executor. Specifically, we modify\n[WebAssembly Micro Runtime](https://github.com/bytecodealliance/wasm-micro-runtime) and add\nit as a new executor in Teaclave.\n\n## Highlights\n\nIn this release, we added a new WebAssembly executor which supports to run\nfunction in the WebAssembly bytecode. Therefore, in addition to native code and\nPython scripts, Teaclave can run many other languages which can be compiled in\nto WebAssembly. This enables a lot of functions of privacy-preseving computation\nthat are not easily rewritten in Rust or Python. Furthermore, because of the\necosystem of WebAssembly, we can even run deep neural network models in the\nWebAssembly executor.\n\n![Teaclave Function Executors](./img/teaclave-function-executors-wasm.png)\n\nTo illustrate the capability of the executor, we also support WebAssembly\nmachine learning models compiled by [Apache TVM](https://tvm.apache.org/).\nApache TVM is an open source machine learning compiler framework for CPUs, GPUs,\nand machine learning accelerators. TVM also supports WebAssembly runtime\nbackend. We also introduce a new MNIST inference example to show the usage of\nthe new executor with TVM.\n\n![Using the WebAssembly executor for Machine Learning Inference with TVM](./img/teaclave-tvm-webassembly.png)\n\n## 0.3.0 Release Notes\n\nHere is a list of notable changes in Teaclave version 0.3.0.\n\n**Features**\n\n  - Add the WebAssembly executor to support functions written in other languages.\n  - Examples of running C and Rust with the WebAssembly executor.\n  - Support inference tasks with models compiled by TVM.\n  - Add the MNIST inference example to demonstrate the ability of using TVM in Teaclave.\n\n**Enhancements**\n\n  - Add the script to simplify developing with editors with Rust's Language Server Protocol support.\n  - Upgrade SGX SDK dependencies, i.e., Intel SGX SDK to version 2.14.100.2, DCAP to version 1.11.100.2.\n\n**Bug Fixes**\n\n  - Update the SGX SDK used in the runtime dockerfile.\n  - Fix `Python.h` not found when compiling `acs_py_enclave.c`.\n  - Fix building system messed up by untracked `Cargo.lock` files.\n  - Fix dcap building issue.\n\n**Docs**\n\n  - Add instructions to configure URLs of input/output files in examples.\n  - Executing WebAssembly in Teaclave: <https://teaclave.apache.org/docs/executing-wasm/>.\n  - Inferencing with TVM in Teaclave: <https://teaclave.apache.org/docs/inference-with-tvm/>.\n\n## Download\n\nTeaclave 0.3.0 can be downloaded at [the download page](/download/). Note that \nit is essential to verify the integrity of the downloaded file using the\nPGP signature (the `.asc` file) or a hash (the `.sha256` file).\n\n## Documentation\n\nIf it is the first time to try Teaclave, we provide a simple but clear tutorial\nto guide you getting stated with Teaclave by invoking\n[your first function](/docs/my-first-function/) in Teaclave.\n\nBasically, you can build the Teaclave platform using docker with these commands:\n\n```sh\n$ tar zxvf apache-teaclave-0.3.0-incubating.tar.gz && cd \\\n  apache-teaclave-0.3.0-incubating\n$ # Instructions to verify the source tar: https://teaclave.apache.org/download/#verify-the-integrity-of-the-files\n\n$ docker run --rm -v $(pwd):/teaclave -w /teaclave \\\n  -it teaclave/teaclave-build-ubuntu-1804-sgx-2.14:latest \\\n   bash -c \". /root/.cargo/env && \\\n     . /opt/sgxsdk/environment && \\\n     mkdir -p build && cd build && \\\n     cmake -DTEST_MODE=ON -DSGX_SIM_MODE=ON -DGIT_SUBMODULE=OFF .. && \\\n     make\"\n```\n\nLaunch all services with `docker-compose` using simulation mode:\n\n```sh\n$ (cd docker && docker-compose -f docker-compose-ubuntu-1804-sgx-sim-mode.yml up --build)\n```\n\nAnd invoke function with a Python client:\n\n```sh\n$ cd examples/python\n$ PYTHONPATH=../../sdk/python python3 builtin_echo.py 'Hello, Teaclave!'\n[+] registering user\n[+] login\n[+] registering function\n[+] creating task\n[+] approving task\n[+] invoking task\n[+] getting result\n[+] done\n[+] function return:  b'Hello, Teaclave!'\n```\n\nIf you want to understand the internals of Teaclave, we provide several\ndocuments about the [design](/docs/#design) of Teaclave. Also, we extensively\ndocument our [codebase](/docs/#codebase) in each sub directories. At last, [API references](/docs/#api-references)\nare automatically generated and uploaded to our homepage.\n\n## Community\n\n- Join us on our [mailing list](https://lists.apache.org/list.html?dev@teaclave.apache.org) and [Discord channel](https://discord.gg/ynECXsxm5P).\n- Follow us at [@ApacheTeaclave](https://twitter.com/ApacheTeaclave).\n- Meet us at our [monthly community meetup](https://teaclave.apache.org/community/#calendar).\n- See [more](https://teaclave.apache.org/community/)."},{"id":"/2021/08/26/teaclave-meetup-7","metadata":{"permalink":"/blog/2021/08/26/teaclave-meetup-7","editUrl":"https://github.com/apache/incubator-teaclave-website/tree/master/site/blog/blog/2021-08-26-teaclave-meetup-7.md","source":"@site/blog/2021-08-26-teaclave-meetup-7.md","title":"Teaclave Meetup #7","description":"In Aug 26, we gathered on Zoom for the 7th Teaclave meetup. In this meetup,","date":"2021-08-26T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[{"name":"Mingshen Sun","key":null,"page":null}],"frontMatter":{"title":"Teaclave Meetup #7","date":"2021-08-26T00:00:00.000Z","author":"Mingshen Sun"},"unlisted":false,"prevItem":{"title":"Announcing Apache Teaclave (incubating) 0.3.0","permalink":"/blog/2021/10/01/announcing-teaclave-0.3.0"},"nextItem":{"title":"使用 Teaclave SGX SDK 开发 SGX 应用","permalink":"/blog/2021/08/25/developing-sgx-application-with-teaclave-sgx-sdk"}},"content":"In Aug 26, we gathered on Zoom for the 7th Teaclave meetup. In this meetup,\nMingshen briefly introduce recent updates in Teaclave, and also introduce new\nmembers attending the meetup.\n\nFor all Teaclave events, we publish a *Teaclave Community Event Calendar*:\n<https://calendar.google.com/calendar/u/0/embed?src=l1q5osem2br8i4bj7dgik5sae4@group.calendar.google.com>.\nYou can subscribe to see our latest schedule information including the Zoom\nlink.\n\nHere is the minutes for Teaclave Meetup #7 on Aug 26, 2021.\n\n## Attendees\n\n- Mingshen Sun\n- Ran Duan\n- Tianyi Li\n- Ruide Zhang\n- Yanhua Luo\n- Hongbo Chen\n- Weijie Liu\n- Tongxin Li\n- Wenhao Wang\n- Chan Zhao\n\n## Agenda\n\n- Recent updates in Teaclave - Mingshen Sun\n- Free discussion\n\n## Notes\n\n### Recent updates in Teaclave - Mingshen\n\n**Teaclave Faas Platform**\n\n- Add TVM MNIST example (#535)\n- Add IDE helper script (#539)\n- Release v0.3.0: [https://teaclave.apache.org/download/#teaclave](https://teaclave.apache.org/download/#teaclave)\n\n**Teaclave TrustZone SDK**\n\n- TEE Socket APIs and examples\n- Upgrade building docker to Ubuntu 20.04\n- Switch to GitHub Actions\n- Add -rs to examples and update test scripts (#34)\n- Update to OP-TEE 3.14.0 (#35)\n\n**Teaclave SGX SDK**\n\n- Intel SGX SDK 2.14\n\n**Website**\n\n- [blog] [Podling Teaclave Report - August 2021 · Aug 01 2021](https://teaclave.apache.org/blog/2021-08-02-podling-teaclave-report-august-2021/)\n- [blog] [使用 Teaclave SGX SDK 开发 SGX 应用 · Aug 24 2021](https://teaclave.apache.org/blog/2021-08-25-developing-sgx-application-with-teaclave-sgx-sdk/)\n\n**External Collaboration**\n\n- Teaclave/Intel: Integrating Graphene as a new Library OS executor\n- Teaclave/OP-TEE: Integrating examples in Rust TrustZone SDK in OP-TEE\n\n### Free Discussion\n\nIntro\n\n- New members: Tianyi Li from Ant Group, Wenhao Wang from CAS\n\nAbout Occlum NGO\n\n- Mingshen: what is Occlum NGO? [https://github.com/occlum/ngo](https://github.com/occlum/ngo)\n- Wenhao: related news: [https://juejin.cn/post/6963839027665436709](https://juejin.cn/post/6963839027665436709)\n- Ran: will discuss with the Occlum group\n\n## Group Photos\n\n![Teaclave Meetup #7](./img/teaclave-meetup-7-zoom.png)"},{"id":"/2021/08/25/developing-sgx-application-with-teaclave-sgx-sdk","metadata":{"permalink":"/blog/2021/08/25/developing-sgx-application-with-teaclave-sgx-sdk","editUrl":"https://github.com/apache/incubator-teaclave-website/tree/master/site/blog/blog/2021-08-25-developing-sgx-application-with-teaclave-sgx-sdk.md","source":"@site/blog/2021-08-25-developing-sgx-application-with-teaclave-sgx-sdk.md","title":"使用 Teaclave SGX SDK 开发 SGX 应用","description":"[[TOC]]","date":"2021-08-25T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[{"name":"Wenwen Ruan","key":null,"page":null}],"frontMatter":{"title":"使用 Teaclave SGX SDK 开发 SGX 应用","date":"2021-08-25T00:00:00.000Z","author":"Wenwen Ruan"},"unlisted":false,"prevItem":{"title":"Teaclave Meetup #7","permalink":"/blog/2021/08/26/teaclave-meetup-7"},"nextItem":{"title":"Podling Teaclave Report - August 2021","permalink":"/blog/2021/08/02/podling-teaclave-report-august-2021"}},"content":"[[TOC]]\n\n\n## Teaclave SGX SDK应用开发环境简介以及搭建\n\nIntel SGX (Software Guard Extension, 软件防护扩展) 因为其较为出色的性能和安全性，是目前最为学术界和工业界关注的 TEE (Trusted Execution Environment, 可信执行环境)。Intel SGX 在内存中划分了名为 enclave（飞地）的隔离区域，用来存放敏感数据和代码。通过提供该隔离的可信执行环境，enclave 在操作系统、BIOS 和虚拟机监控器等系统软件均不可信的情况下，仍然对 enclave 内部的代码和数据提供保护，保障用户的关键数据和代码的机密性和完整性。\n\n但如果 Intel SGX 程序仍然使用 C/C++ 这类内存不安全的语言开发的话，就会和传统软件一样面临着内存破坏漏洞的问题。对于 enclave 来说，受到的危害会更为严重，因为 enclave 中保存的多是机密数据和代码。Teaclave SGX 的主要目标就是通过使用高效的内存安全语言 —— Rust 来支持 enclave 应用程序的开发，从而在保证 Intel SGX enclave 内存安全的同时不会带来显著的性能开销。\n\nTeaclave SGX SDK 内部结构分为三层：\n\n+ 最底层是使用 C/C++ 和汇编实现的 Intel SGX SDK。\n+ 中间层是 Rust 对 C/C++ 的 FFI (Foreign function Interfaces, 外部函数接口)。\n+ 最高层是 Teaclave SGX SDK。\n\n![Teaclave SGX SDK 概要图](./img/2021-08-13-overview-of-teaclave-sgx-sdk-cn.png)\n\nTeaclave SGX SDK 应用程序开发者在进行开发时就只需要基于最上层的 Teaclave SGX SDK 来进行开发，底层的实现对于开发者来说是透明的。本文将从开发者的角度介绍基于 Teaclave SGX SDK 开发自己的应用程序的过程。\n\n### 准备条件\n\n+ Ubuntu16.04 或者 18.04 或者 20.04 (Teaclave SGX SDK v1.1.3 中增加了对 Ubuntu 20.04 的支持)\n+ docker 环境\n\n*本文基于 Teaclave SGX SDK v1.1.3 提交哈希值：d107bd0718f723221750a4f2973451b386cbf9d2* \n\n\n### 基于 docker 配置 Teaclave SGX SDK 开发环境\n\n首先需要用户机器 CPU 支持 Intel SGX 并且在 BIOS 上开启了 Intel SGX 支持。用户可以通过 [SGX-hardware项目](https://github.com/ayeks/SGX-hardware) 或者在 [Intel 官网](https://www.intel.com/content/www/us/en/products/details/processors.html) 中搜索自己的 CPU 型号查看是否支持 Intel SGX。下图以 Intel Core i7-7700K 处理器为例，如下图所示，该机型支持 SGX。\n\n![sgx-enable.png](./img/2021-08-13-sgx-enable.png)\n\n当确定 CPU 支持 Intel SGX 之后，还需要开启 BIOS 中的 SGX 选项。CPU 上的 SGX 选项可能有 `enabled` 或者 `software controlled`。具有 `enabled` 选项的主机直接在 BIOS 上选择 `enabled` 即可，而`software controlled` 表示 SGX 的开启需要由软件触发，还需通过 Intel 官方提供的 [sgx-software-enable](https://github.com/intel/sgx-software-enable) 开启。下载好 `sgx-software-enable` 之后，运行 `Makefile` 编译生成可执行代码 `sgx_enable` ，执行 `sudo ./sgx_enable` 顺利运行后重启主机，即可顺利开启 Intel SGX。 \n\n硬件条件准备完毕之后，还需要安装 [Linux SGX 驱动](https://download.01.org/intel-sgx/sgx-linux/2.10/distro/ubuntu16.04-server/sgx_linux_x64_driver_2.6.0_602374c.bin)（本实验环境的操作系统版本为 ubuntu16.04 ，安装时需要根据自己的操作系统版本号在 [官网](https://download.01.org/intel-sgx/) 下载对应的 Intel SGX 驱动） ，安装完毕之后需要确认 `/dev/isgx` 的存在。\n\n下载 Teaclave SGX SDK 以及支持编译 SGX 设备的 docker image。\n\n`$ https://github.com/apache/incubator-teaclave-sgx-sdk`\n\n`$ docker pull baiduxlab/sgx-rust`\n\n启动一个 docker，并且把 Teaclave SGX SDK 项目目录映射到 docker 中。\n\n`$ docker run -v /your/absolute/path/to/incubator-teaclave-sgx-sdk:/root/sgx -ti --device /dev/isgx baiduxlab/sgx-rust`\n\n在运行的 docker container 中启动 aesm 服务，**White list update request successful for Version** 语句意味着启动成功。\n\n````bash\nroot@docker:/# LD_LIBRARY_PATH=/opt/intel/sgx-aesm-service/aesm/ /opt/intel/sgx-aesm-service/aesm/aesm_service &\naesm_service[17]: [ADMIN]White List update requested\naesm_service[17]: Failed to load QE3: 0x4004\naesm_service[17]: The server sock is 0x56096ab991c0\naesm_service[17]: [ADMIN]White list update request successful for Version: 103\n````\n\n执行 Teaclave SGX SDK 中的简单实例 helloworld ，检查是否正常运行。\n\n```bash\nroot@docker:~# cd sgx/samplecode/helloworld/\nroot@docker:~/sgx/samplecode/helloworld# make\nroot@docker:~/sgx/samplecode/helloworld# cd bin/\nroot@docker:~/sgx/samplecode/helloworld/bin# ./app\n[+] global_eid: 2\nThis is normal world string passed into enclave!\nThis is a Rust string!\n[+] say_something success ...\n```\n至此，我们已经成功在自己的机器上跑起来了 Teaclave SGX SDK 的 helloworld 示例啦！\n\n## Teaclave SGX SDK 示例 helloworld 剖析\n\n接下来，我们通过阅读 helloworld 这个简单的例子来理解 Teaclave SGX SDK 应用程序的组织结构和运行方式。\n\n### helloworld 目录结构\n\n```\nhelloworld/ \n├── app \n│   ├── app.c \n│   └── app.h \n├── bin \n│   └── readme.txt \n├── enclave \n│   ├── Cargo.toml \n│   ├── Enclave.config.xml \n│   ├── Enclave.edl \n│   ├── Enclave.lds \n│   ├── Enclave_private.pem \n│   ├── Makefile \n│   ├── src \n│   │   └── lib.rs \n│   ├── x86_64-unknown-linux-sgx.json \n│   └── Xargo.toml \n├── lib \n│   └── readme.txt \n└── Makefile \n```\n\nhelloworld 的目录结构和 Intel SGX 的 [SampleEnclave](https://github.com/intel/linux-sgx/blob/HEAD/SampleCode/SampleEnclave) 目录结构非常类似。\n+ app 目录中存放的是不可信部分代码，包括 `main` 函数以及 `OCALL` 函数具体逻辑实现。\n+ enclave 目录中存放的是可信部分代码，主要是 `ECALL` 函数具体逻辑实现。\n    + 不同于 SGX ，应用安全区的代码实现位于 **`src/lib.rs`**, 该文件是整个 `helloworld` 文件夹中唯一使用 Rust 编写的文件，程序员可以在该文件中增加需要的功能。\n    + 另外，enclave 文件夹下多了 `Cargo.toml`, `src/lib.rs`, `x86_64-unknown-linux-sgx.json`, `Xargo.toml`：\n        + **`Cargo.toml`**: 项目清单文件，包括项目名称、项目版本以及依赖项等。\n        + **`x86_64-unknown-linux-sgx.json`** 和 **`Xargo.toml`** 描述了用于项目交叉编译的信息。\n\n### 重要代码文件解析\n\n+ **`Enclave.edl`** \\\n该文件规定了 Enclave 边界 `ECALL/OCALL` 的定义。\n\n```\nenclave {\n    from \"sgx_tstd.edl\" import *;\n    from \"sgx_stdio.edl\" import *;\n    from \"sgx_backtrace.edl\" import *;\n    from \"sgx_tstdc.edl\" import *;\n\n    trusted {\n        /* define ECALLs here. */\n        public sgx_status_t say_something([in, size=len] const uint8_t* some_string, size_t len);\n    };\n\n    untrusted {\n\n    };\n};\n```\n\n`trusted {...}` 中声明 `ECALL` 函数， `untrusted {...}` 中声明 `OCALL` 函数。本例中声明了一个 `ECALL` 函数 `say_something`，该函数的具体实现在 `src/lib.rs` 中，它的参数包括 `uint8_t *` 类型的指针和长度参数 `len`。\n\n+ **`app/app.c`** \n\n在 `app/app.c` 的 `main` 函数中有一个完整的调用 `ECALL` 的例子。\n\n```c\nsgx_ret = say_something(global_eid,\n                        &enclave_ret,\n                        (const uint8_t *) str,\n                        len);\n```\n\n这里的 `say_something` 似乎和 `Enclave.edl` 中的声明不太一样，ECALL传递参数时多了两个隐参数：`enclave_eid` 和 `say_something` 的返回值 `&enclave_ret`。而 `sgx_ret` 表示的是 ECALL 执行是否成功，是 SGX 的返回值。\n\n+ **`enclave/`文件夹部分** \n\n`enclave/Cargo.toml` 中声明了这是一个 `staticlib`，表明 Enclave 在最后会被编译成一个 `.a` 文件，该文件会和 Intel 提供的 `sgx_tstdc.a` 等文件链接形成 `enclave.so`，再经由 `sgx_sign` 工具配合 `Enclave.config.xml` 配置文件、`Enclave_private.pem` 签名私钥做签名并计算 `measurement` ，最后生成 `enclave.signed.so`，这是 Enclave 的完全体。\n\n+ **`enclave/src/lib.rs`** \n\n```rust\npub extern \"C\" fn say_something(some_string: *const u8, some_len: usize) -> sgx_status_t {\n\n    let str_slice = unsafe { slice::from_raw_parts(some_string, some_len) };\n    let _ = io::stdout().write(str_slice);\n\n    // A sample &'static string\n    let rust_raw_string = \"This is a \";\n    // An array\n    let word:[u8;4] = [82, 117, 115, 116];\n    // An vector\n    let word_vec:Vec<u8> = vec![32, 115, 116, 114, 105, 110, 103, 33];\n\n    // Construct a string from &'static string\n    let mut hello_string = String::from(rust_raw_string);\n\n    // Iterate on word array\n    for c in word.iter() {\n        hello_string.push(*c as char);\n    }\n\n    // Rust style convertion\n    hello_string += String::from_utf8(word_vec).expect(\"Invalid UTF-8\")\n                                               .as_str();\n\n    // Ocall to normal world for output\n    println!(\"{}\", &hello_string);\n\n    sgx_status_t::SGX_SUCCESS\n}\n```\n该函数实现了一个简单的将 `&[u8]` 数组转化为字符串输出的函数，注意在函数的最后调用的 `println!` 函数是一个 `OCALL`。 `println!` 的具体实现中加入了内置的 `OCALL`，并定义了内置的 `edl` ，import到了 `Enclave.edl` 中。 \n```\nenclave {\n    from \"sgx_tstd.edl\" import *;\n    from \"sgx_stdio.edl\" import *;\n    from \"sgx_backtrace.edl\" import *;\n    from \"sgx_tstdc.edl\" import *;\n```\n\n\n### 编译后的代码目录 \n经过编译之后的代码目录如下所示，这里省略了 `release` 文件夹下的内容。\n```\n├── app \n│   ├── app.c \n│   ├── app.h \n│   ├── app.o               #[generate] \n│   ├── Enclave_u.c         #[generate] \n│   ├── Enclave_u.h         #[generate] \n│   └── Enclave_u.o         #[generate] \n├── bin \n│   ├── app                 #[generate] \n│   ├── enclave.signed.so   #[generate] \n│   └── readme.txt \n├── enclave \n│   ├── Cargo.lock          #[generate] \n│   ├── Cargo.toml \n│   ├── Enclave.config.xml \n│   ├── Enclave.edl \n│   ├── Enclave.lds \n│   ├── Enclave_private.pem \n│   ├── enclave.so          #[generate] \n│   ├── Enclave_t.c         #[generate] \n│   ├── Enclave_t.h         #[generate] \n│   ├── Enclave_t.o         #[generate] \n│   ├── Makefile \n│   ├── src \n│   │   └── lib.rs \n│   ├── target              #[generate] \n│   │   ├── CACHEDIR.TAG    #[generate] \n│   │   └── release         #[generate] \n│   ├── x86_64-unknown-linux-sgx.json \n│   └── Xargo.toml \n├── lib \n│   ├── libenclave.a        #[generate] \n│   ├── libsgx_ustdc.a      #[generate] \n│   └── readme.txt \n└── Makefile \n```\nhelloworld 编译的基本流程类似于 Intel SGX:\n+ `edger8r` 将输入的 `EDL` 在 `app/` 目录下生成不可信代码 `Enclave_u.h` 和 `Enclave_u.c`；\n+ 编译不可信部分生成 `bin/app`；\n+ `edger8r` 在 `enclave/` 目录下生成可信代码 `Enclave_t.h` 和 `Enclave_t.c`；\n+ 编译并签名生成可信动态链接库 `enclave.signed.so`。  \n\n## 开发者如何开发自己的 Rust SGX Application\n同样类似于开发 Intel SGX Application，用户可以通过改写 Teaclave SGX SDK 所提供的 `samplecode`，在这里，我以一个简单的例子抛砖引玉。\n\n### 添加自定义的函数\n假设用户希望在 Teaclave SGX SDK 中实现一个简单的求两个数组的交集的函数，只需要直接在 `src/lib.rs` 中添加实现的函数。下面的示例代码 `intersection` 函数是希望添加的求交集函数，注意这里求到的交集结果是无重复元素的。传入的两个参数是需要求交集的 `i32` 向量，最后返回的是两个向量的交集。其具体的实现是通过一个额外的散列集，记录 `num1` 出现的元素，再对 `num2` 进行遍历，如果 `num2` 出现了散列集中的元素，则将该值 `push` 到交集数组中，并将散列表中的对应元素移除。当 `num2` 遍历完毕之后，返回交集数组。\n\n```rust\npub fn intersection(nums1: Vec<i32>, nums2: Vec<i32>) -> Vec<i32> {\n        use std::collections::HashSet;\n        let mut set: HashSet<i32> = HashSet::new();\n        let mut vec: Vec<i32> = Vec::new();\n\n        for i in nums1.iter() {\n            set.insert(*i);\n        }\n\n        for i in nums2.iter() {\n            if set.contains(i) {\n                vec.push(*i);\n                set.remove(i);\n            }\n        }\n        return vec;\n    }\n```\n\n考虑一个比较现实的场景，两个用户分别将自己的向量作为参数传入 enclave 中进行计算，这时候数据需要从不可信代码区域复制到可信代码区域。\n首先，需要在 `Enclave.edl` 文件中修改 `say_something` 函数的定义，输入参数为两个用户的向量指针以及对应的向量大小。\n```\npublic sgx_status_t say_something([in, size=len1] size_t* num1, size_t len1,\n                                  [in, size=len2] size_t* num2, size_t len2);\n```\n\n接着，在 `app.c` 文件中声明需要求交集的数组以及大小并仿照示例调用 `say_something`。 \n\n```c\n    size_t nums1[10] = {0,1,2,3,4,5,6,7,8,9};\n    size_t nums2[10] = {5,6,7,8,9,10,11,12,13,14};\n    size_t len1 = sizeof(nums1);\n    size_t len2 = sizeof(nums2);\n\n    sgx_ret = say_something(global_eid, \n                            &enclave_ret,\n                            nums1,\n                            len1,\n                            nums2,\n                            len2);\n```\n\n回到 `enclave/src/lib.rs`，`say_something` 传进来的是两个向量的起始地址以及大小。\n```rust\npub extern \"C\" fn say_something(nums1: *mut usize, len1: usize, nums2: *mut usize, len2: usize) -> sgx_status_t \n```\n由于数据是从非安全区复制到安全区的，还需要对 `intersection` 函数进行部分改写。传进来的参数是数组指针，以指针地址为起始地址，根据大小参数限制迭代范围并获得一个用于循环的序号变量 `i`，在 `for` 循环中使用 `offset` 偏移指针，解引用它，读出 `nums1` 和 `nums2` 的元素值。\n\n```rust\npub fn intersection(nums1: *mut usize, len1: usize, nums2: *mut usize, len2: usize) -> Vec<usize> {\n    use std::collections::HashSet;\n    let mut set: HashSet<usize> = HashSet::new();\n    let mut vec: Vec<usize> = Vec::new();\n\n    for i in 0..len1/mem::size_of::<usize>() {\n        let mut val_nums1 = 0;\n        unsafe {\n            val_nums1 = *nums1.offset(i as isize);\n        }\n        set.insert(val_nums1); \n    }\n    \n    for i in 0..len2/mem::size_of::<usize>() {\n        let mut val_nums2 = 0;\n        unsafe {\n            val_nums2 = *nums2.offset(i as isize);\n        }\n        if set.contains(&val_nums2) {\n            vec.push(val_nums2);\n            set.remove(&val_nums2);\n        }\n    }\n    return vec;\n}\n```\n\n完整的 `say_something` 函数如下所示。\n\n```rust\n#[no_mangle]\npub extern \"C\" fn say_something(nums1: *mut usize, len1: usize, nums2: *mut usize, len2: usize) -> sgx_status_t {\n    let vec: Vec<usize> = intersection(nums1, len1, nums2, len2); \n    println!(\"intersection set is {:?}\", vec);\n    sgx_status_t::SGX_SUCCESS\n}\n```\n\n重新编译并运行，得到运行结果：\n```bash\n[+] global_eid: 2\nintersection set is [5, 6, 7, 8, 9]\n[+] say_something success ...\n```\n我们基于 Teaclave SGX SDK 的 helloworld 实现了自己的求交集函数。\n\n### 调用 Teaclave SGX SDK 提供的 `crate`\n\nTeaclave SGX SDK 重写了很多 SGX 的库，当我们需要用某个库时，可以先在仓库中查看是否有相应的 `crate` 实现以及对应的 [doc](https://teaclave.apache.org/api-docs/crates-enclave/)。比如当我们希望生成一个随机数时，在 `C++` 或者 `Rust` 环境下，会想到使用 `rand` 库。自然而然地，Teaclave SGX SDK 也用 Rust 重写了 [`sgx_rand`](https://github.com/apache/incubator-teaclave-sgx-sdk/tree/master/sgx_rand) 库。 \n\n首先在 `enclave/Cargo.toml` 中的 `[target.'cfg(not(target_env = \"sgx\"))'.dependencies]` 部分添加 `sgx_rand` 库的地址。\n\n```toml\n[target.'cfg(not(target_env = \"sgx\"))'.dependencies]\nsgx_rand = {git = \"https://github.com/apache/teaclave-sgx-sdk.git\" }\n```\n\n现在万事俱备，只欠调用。回到 `lib.rs` 文件中，链接到 `sgx_rand` `crate`，导入其中的所有项，声明需要使用的模块。\n\n```rust\nextern crate sgx_rand;\nuse sgx_rand::Rng;\nuse sgx_rand::os::SgxRng;\n```\n\n调用 `gen_range` 函数生成 0-10 之间的随机数。\n\n```rust \nlet random = rng.gen_range(0, 10);\n```\n\n这样就可以在 Teaclave SGX SDK 中的 enclave 中通过调用官方 `crate` 随机生成一个随机数。\n\n## 总结\n本文首先介绍了 Teaclave SGX SDK 项目的基本结构，然后以 `helloworld` 为例子，介绍了一个简单的 Teaclave SGX SDK 的示例的组织结构和编译过程，最后，以在 `helloworld` 中实现 `intersection` 函数为例，介绍了如何基于提供的 SampleCode 进行 Teaclave SGX SDK 应用程序的开发。\n\n\n## 延伸阅读\n+ [一份主观的 SGX 导读：运行第一个 SGX 程序](https://github.com/dingelish/SGXfail/blob/master/01.md)\n+ [Teaclave 官网](http://teaclave.apache.org)\n+ [Teaclave SGX SDK 项目论文：《Towards Memory Safe Enclave Programming with Rust-SGX》](https://dl.acm.org/citation.cfm?id=3354241)"},{"id":"/2021/08/02/podling-teaclave-report-august-2021","metadata":{"permalink":"/blog/2021/08/02/podling-teaclave-report-august-2021","editUrl":"https://github.com/apache/incubator-teaclave-website/tree/master/site/blog/blog/2021-08-02-podling-teaclave-report-august-2021.md","source":"@site/blog/2021-08-02-podling-teaclave-report-august-2021.md","title":"Podling Teaclave Report - August 2021","description":"Teaclave","date":"2021-08-02T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[{"name":"Mingshen Sun","key":null,"page":null}],"frontMatter":{"title":"Podling Teaclave Report - August 2021","date":"2021-08-02T00:00:00.000Z","author":"Mingshen Sun"},"unlisted":false,"prevItem":{"title":"使用 Teaclave SGX SDK 开发 SGX 应用","permalink":"/blog/2021/08/25/developing-sgx-application-with-teaclave-sgx-sdk"},"nextItem":{"title":"Teaclave Meetup #6","permalink":"/blog/2021/07/29/teaclave-meetup-6"}},"content":"## Teaclave\n\nTeaclave is a universal secure computing platform, making computation on\nprivacy-sensitive data safe and simple.\n\nTeaclave has been incubating since 2019-08-20.\n\n### Three most important unfinished issues to address before graduating:\n\n- Improve project structure and documentation\n- Grow the community (attracting more committers, contributors, users)\n- Publish Apache releases (resolving logistics on Apache release)\n\n### Are there any issues that the IPMC or ASF Board need to be aware of?\n\nNone. \n\n### How has the community developed since the last report?\n\nSince the last report, we have organized three monthly virtual meetups. Many\npeople from the community share their usage experience of Teaclave. Also, we\ninvited some contributors to talk about some technical details of the design and\nimplementation. For each meetup, we have minutes write-up published on the\nTeaclave blog.\n  - Teaclave Meetup #4: <https://teaclave.apache.org/blog/2021-04-29-teaclave-meetup-4/>\n  - Teaclave Meetup #5: <https://teaclave.apache.org/blog/2021-06-24-teaclave-meetup-5/>\n  - Teaclave Meetup #6: <https://teaclave.apache.org/blog/2021-07-29-teaclave-meetup-6/>\n\nWe also have two new members:\n  - 2021-07-09, Hongbo Chen (ya0guang), Commiter\n  - 2021-07-25, Gordon King (garyw), Mentor\n\n### How has the project developed since the last report?\n\nHere are the summaries of recent progress of our three sub-projects:\n\nTeaclave:\n  - Change the executor's payload type from `String` to `Vec<u8>`.\n  - Unify the launch of teaclave services.\n  - Add WebAssembly Executor and corresponding examples.\n  - Upgrade Intel SGX SDK to the latest release (SGX 2.14.100.2, DCAP 1.11.100.2).\n  - Some minor fixes of the building system and documentation.\n\nTeaclave SGX SDK:\n  - Minor bug fixes.\n\nTeaclave TrustZone SDK:\n  - Release the first Apache Incubator version 0.1.0: [Announcing Apache Teaclave TrustZone SDK (Incubating) 0.1.0](https://teaclave.apache.org/blog/2021-06-16-announcing-teaclave-trustzone-sdk-0-1-0/).\n  - Update to OP-TEE 3.13.0.\n  - Implement the `iSocket` APIs and corresponding examples.\n  - Implement loadable plugin for TA and corresponding examples.\n  - Some minor fixes and repository cleanups.\n\n### How would you assess the podling's maturity?\nPlease feel free to add your own commentary.\n\n  - [ ] Initial setup\n  - [ ] Working towards first release\n  - [x] Community building\n  - [ ] Nearing graduation\n  - [ ] Other:\n\n### Date of last release:\n\n  2021-06-10: Apache Teaclave TrustZone SDK (incubating) 0.1.0\n\n### When were the last committers or PPMC members elected?\n\n  2021-07-25, Gordon King (garyw), Mentor\n\n### Have your mentors been helpful and responsive?\n\n  Yes, our mentors work responsively to help us with electing new mentors, proposing new features, and expanding the community.\n\n### Is the PPMC managing the podling's brand / trademarks?\n\n  We don't find any 3rd parties incorrectly using the podling's name and brand. The VP, Brand has approved the project name. (PODLINGNAMESEARCH-175)"},{"id":"/2021/07/29/teaclave-meetup-6","metadata":{"permalink":"/blog/2021/07/29/teaclave-meetup-6","editUrl":"https://github.com/apache/incubator-teaclave-website/tree/master/site/blog/blog/2021-07-29-teaclave-meetup-6.md","source":"@site/blog/2021-07-29-teaclave-meetup-6.md","title":"Teaclave Meetup #6","description":"In July 29, we gathered on Zoom for the sixth Teaclave meetup. In the meetup, we","date":"2021-07-29T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[{"name":"Mingshen Sun","key":null,"page":null}],"frontMatter":{"title":"Teaclave Meetup #6","date":"2021-07-29T00:00:00.000Z","author":"Mingshen Sun"},"unlisted":false,"prevItem":{"title":"Podling Teaclave Report - August 2021","permalink":"/blog/2021/08/02/podling-teaclave-report-august-2021"},"nextItem":{"title":"Teaclave Meetup #5","permalink":"/blog/2021/06/24/teaclave-meetup-5"}},"content":"In July 29, we gathered on Zoom for the sixth Teaclave meetup. In the meetup, we\nannounced our new mentor Gordon and invited Gordon to introduce the latest effort\non integrating Graphene into Teaclave.\n\n![Teaclave Meetup #6](./img/teaclave-meetup-6-zoom.png)\n\n## Schedule\n\n- Recent update of Teaclave, Mingshen (5m)\n- Introduction to Graphene, Gordon\n\n## Notes\n\n- [Proposal on Teaclave/Graphene integration](https://github.com/apache/incubator-teaclave/issues/525)\n- [Graphene v1.0: Toward A Reliable, Open-Source Library OS for SGX](https://grapheneproject.io/wp-content/uploads/2020/01/Intel_SGX_Day_19_Graphene_Talk.pdf)\n- [Library OS is the New Container](https://osseu18.sched.com/event/FxXc/library-os-is-the-new-container-why-is-library-os-a-better-option-for-compatibility-and-sandboxing-chia-che-tsai-uc-berkeley)\n- [Intel® TDX Architectural Extensions to Advance Confidential Computing in Public Clouds](https://static.sched.com/hosted_files/lsseu2020/46/Oct%2029_Architectural%20Extensions%20for%20VM%20Isolation%20to%20Advance%20Confidential%20Computing_Ravi%20Sahita_Jun%20Nakajima_v4b.pdf)"},{"id":"/2021/06/24/teaclave-meetup-5","metadata":{"permalink":"/blog/2021/06/24/teaclave-meetup-5","editUrl":"https://github.com/apache/incubator-teaclave-website/tree/master/site/blog/blog/2021-06-24-teaclave-meetup-5.md","source":"@site/blog/2021-06-24-teaclave-meetup-5.md","title":"Teaclave Meetup #5","description":"In Jun 24, we gathered in Zoom for the fifth monthly Teaclave meetup. In this","date":"2021-06-24T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[{"name":"Mingshen Sun","key":null,"page":null}],"frontMatter":{"title":"Teaclave Meetup #5","date":"2021-06-24T00:00:00.000Z","author":"Mingshen Sun"},"unlisted":false,"prevItem":{"title":"Teaclave Meetup #6","permalink":"/blog/2021/07/29/teaclave-meetup-6"},"nextItem":{"title":"Announcing Apache Teaclave TrustZone SDK (incubating) 0.1.0","permalink":"/blog/2021/06/16/announcing-teaclave-trustzone-sdk-0.1.0"}},"content":"In Jun 24, we gathered in Zoom for the fifth monthly Teaclave meetup. In this\nmeetup, we're glad to have Hongbo (@ya0guang) talking about his contributions on\nadding WebAssembly Micro Runtime to Teaclave as an executor (PR:\n[#504](https://github.com/apache/incubator-teaclave/pull/504),\n[#512](https://github.com/apache/incubator-teaclave/pull/512)).\n\n\n![Teaclave Meetup #5](./img/teaclave-meetup-5-zoom.png)\n\n## Schedule\n\n- Recent update of Teaclave, Mingshen (5m)\n- Executing WebAssembly in Teaclve, Hongbo (40m)\n- Open discussion\n\n## Notes\n\n### Recent Update of Teaclave\n\n**Teaclave TrustZone SDK version 0.1.0 released**\n- Vote result: [https://lists.apache.org/thread.html/r441addf283f6c8780326f372e39a9d723164f6d910184ea3686a5c4a%40%3Cdev.teaclave.apache.org%3E](https://lists.apache.org/thread.html/r441addf283f6c8780326f372e39a9d723164f6d910184ea3686a5c4a%40%3Cdev.teaclave.apache.org%3E)\n- Release notes: <https://github.com/apache/incubator-teaclave-trustzone-sdk/releases/tag/v0.1.0>\n- Download link: <https://teaclave.apache.org/download/>\n\n**Linaro OP-TEE Contributions meeting**\n- Recording: [https://linaro-org.zoom.us/rec/share/0o3Ku4zaXSrP-Ep0WI5P-XB-KAiP5d94kXbKmg43VqrnRHUmsLV_sv1wI01JbL0C.kSM-_ov2pc9Sggf_](https://linaro-org.zoom.us/rec/share/0o3Ku4zaXSrP-Ep0WI5P-XB-KAiP5d94kXbKmg43VqrnRHUmsLV_sv1wI01JbL0C.kSM-_ov2pc9Sggf_), Passcode: 9c.&%KR6\n- Slides: [https://drive.google.com/file/d/1YPig8k-xRyeRxuu1ALTmkqY-nxtH5upR/view?usp=sharing](https://drive.google.com/file/d/1YPig8k-xRyeRxuu1ALTmkqY-nxtH5upR/view?usp=sharing)\n\n### Executing WebAssembly in Teaclave\n\n![Executing WebAssembly in Teaclave](./img/teaclave-meetup-5-webassembly.png)\n\n- [Slides](./pdf/teaclave-meetup-5-executing-webassembly-in-teaclave.pdf)\n\nSome question and discussion:\n\n- Can we reuse the WebAssembly runtime to improve the performance of startup?\n- Bridging `tlibc` functions into WAMR.\n\n### Open Discussion\n\n- ARM CCA: <https://www.arm.com/why-arm/architecture/security-features/arm-confidential-compute-architecture>\n- EdgelessSys mablerun: <https://github.com/edgelesssys/marblerun>\n- Attestation mechanism in Google Cloud Confidential Computing"},{"id":"/2021/06/16/announcing-teaclave-trustzone-sdk-0.1.0","metadata":{"permalink":"/blog/2021/06/16/announcing-teaclave-trustzone-sdk-0.1.0","editUrl":"https://github.com/apache/incubator-teaclave-website/tree/master/site/blog/blog/2021-06-16-announcing-teaclave-trustzone-sdk-0.1.0.md","source":"@site/blog/2021-06-16-announcing-teaclave-trustzone-sdk-0.1.0.md","title":"Announcing Apache Teaclave TrustZone SDK (incubating) 0.1.0","description":"On behalf of the Teaclave community, I am happy to announce the release of","date":"2021-06-16T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[{"name":"Mingshen Sun","key":null,"page":null}],"frontMatter":{"title":"Announcing Apache Teaclave TrustZone SDK (incubating) 0.1.0","date":"2021-06-16T00:00:00.000Z","author":"Mingshen Sun"},"unlisted":false,"prevItem":{"title":"Teaclave Meetup #5","permalink":"/blog/2021/06/24/teaclave-meetup-5"},"nextItem":{"title":"Accepting Rust OP-TEE TrustZone SDK to Apache Teaclave (incubating) Proposal","permalink":"/blog/2021/06/04/accepting-rust-optee-trustzone-sdk-proposal"}},"content":"On behalf of the Teaclave community, I am happy to announce the release of\nTeaclave TrustZone SDK 0.1.0. This is the first Apache Incubator release since\nthe recent donation to the Teaclave community.\n\nTeaclave TrustZone SDK provides abilities to build safe TrustZone applications\nin Rust. The SDK is based on the OP-TEE project which follows GlobalPlatform TEE\nspecifications and provides ergonomic APIs. In addition, it enables capability\nto write TrustZone applications with Rust's standard library and many\nthird-party libraries (i.e., crates). Teaclave TrustZone SDK is a sub-project of\nApache Teaclave (incubating). To learn more about the design and history of\nTrustZone SDK,\nplease read the blog [Welcome Rust OP-TEE TrustZone SDK To Teaclave](https://teaclave.apache.org/blog/2021-03-14-welcome-rust-optee-trustzone-sdk/).\n\n## Highlights\n\nThis version implements the following Rust APIs in GlobalPlatform TEE\nspecifications:\n\n**TEE Client API** (`optee-teec`)\n- Context\n- Error\n- Operation\n- Parameter\n- Session\n- UUID\n\n**TEE Internal Core API** (`optee-utee`)\n- Arithmetical\n- Crypto Operation\n- Error\n- Object\n- Parameter\n- Time\n- Trace\n\nHere is a demonstration of using these Rust APIs to open a session and invoke a\nfunction to TA.\n\n![Teaclave TrustZone SDK APIs](./img/teaclave-trustzone-sdk-apis.png)\n\nWe also provides procedure macros to automatically generate bindings interfaces of TA:\n- `#[ta_create]`, `#[ta_destroy]`, `#[ta_open_session]`, `#[ta_close_session]`, `#[ta_invoke_command]`\n\nThese annotations will automatically generate helper functions to bridge the normal/secure worlds.\n\n![Teaclave TrustZone SDK Macros](./img/teaclave-trustzone-sdk-macros.png)\n\nThis version includes rewrites of all examples (e.g., AES, authentication, big\ninteger, HOTP) from OP-TEE repository. In addition, we include more examples\nusing `serde` for serialization and deserialization.\n\n![Examples in Teaclave TrustZone SDK](./img/teaclave-trustzone-sdk-examples.png)\n\nThis version is compatible with OP-TEE 3.13.0.\n\n## Getting Started\n\nHere is a simple instruction to download, build and test the TrustZone SDK:\n\n```\n$ wget https://dist.apache.org/repos/dist/dev/incubator/teaclave/trustzone-sdk-0.1.0-rc.1/apache-teaclave-trustzone-sdk-0.1.0-rc.1-incubating.tar.gz\n$ tar zxvf apache-teaclave-trustzone-sdk-0.1.0-rc.1-incubating.tar.gz && cd\napache-teaclave-trustzone-sdk-0.1.0-incubating\n\n$ # Instructions to verify the source tar:\nhttps://teaclave.apache.org/download/#verify-the-integrity-of-the-files\n\n$ # Building\n$ docker run --rm -it -v$(pwd):/teaclave-trustzone-sdk -w\n/teaclave-trustzone-sdk teaclave/teaclave-trustzone-sdk-build:0.1.1\nbash -c \"source environment && make\"\n\n$ # Testing\n$ docker run --rm -it -v$(pwd):/teaclave-trustzone-sdk -w\n/teaclave-trustzone-sdk teaclave/teaclave-trustzone-sdk-build:0.1.1\nbash -c \"source environment && cd ci && ./ci.sh\"\n```\n\nWe also provide a document [Getting Started with OP-TEE for QEMU\nARMv8](https://teaclave.apache.org/trustzone-sdk-docs/getting-started-with-optee-for-qemu-armv8/)\nto get started step by step.\n\n## Download\n\nYou can download the release from the\n[download](https://teaclave.apache.org/download/) page. Also, please checkout\nour [repository](https://github.com/apache/incubator-teaclave-trustzone-sdk)\nhosted on GitHub.\n\n## Contributing\n\nTeaclave TrustZone SDK is under the Apache License v2 and open source in The\nApache Way. We aim to create a project that is maintained and owned by the\ncommunity. All kinds of contributions are welcome. Thanks to our contributors."},{"id":"/2021/06/04/accepting-rust-optee-trustzone-sdk-proposal","metadata":{"permalink":"/blog/2021/06/04/accepting-rust-optee-trustzone-sdk-proposal","editUrl":"https://github.com/apache/incubator-teaclave-website/tree/master/site/blog/blog/2021-06-04-accepting-rust-optee-trustzone-sdk-proposal.md","source":"@site/blog/2021-06-04-accepting-rust-optee-trustzone-sdk-proposal.md","title":"Accepting Rust OP-TEE TrustZone SDK to Apache Teaclave (incubating) Proposal","description":"Abstract","date":"2021-06-04T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[{"name":"The Teaclave PPMC","key":null,"page":null}],"frontMatter":{"title":"Accepting Rust OP-TEE TrustZone SDK to Apache Teaclave (incubating) Proposal","date":"2021-06-04T00:00:00.000Z","author":"The Teaclave PPMC"},"unlisted":false,"prevItem":{"title":"Announcing Apache Teaclave TrustZone SDK (incubating) 0.1.0","permalink":"/blog/2021/06/16/announcing-teaclave-trustzone-sdk-0.1.0"},"nextItem":{"title":"Teaclave Meetup #4","permalink":"/blog/2021/04/29/teaclave-meetup-4"}},"content":"## Abstract\n\nRust OP-TEE TrustZone SDK provides abilities to build safe TrustZone\napplications in Rust. The SDK is based on the OP-TEE project which\nfollows GlobalPlatform TEE specifications and provides ergonomic APIs.\nMore information can be found at the project repository:\nhttps://github.com/sccommunity/rust-optee-trustzone-sdk.\n\n## Proposal\n\nRust OP-TEE TrustZone SDK provides abilities to build safe TrustZone\napplications in Rust.\n\n### Background\n\nThe Rust OP-TEE TrustZone project is being actively developed within\nBaidu. It was open source on Jan 30, 2019.\n\n### Rationale\n\nARM TrustZone is another hardware trusted execution environment\nimplementation. The goal of Teaclave is to provide a universal secure\ncomputing platform which is agnostic with TEE implementation.\nCurrently, Teaclave has Teaclave SGX SDK and only supports Intel SGX.\nWith the Rust OP-TEE TrustZone SDK, we can build the Teaclave platform\non ARM TrustZone.\n\n### Initial Goals\n\n- Transfer repository to the Apache Incubator under the Teaclave project\n- Code cleanup and more documentation\n\n#### Meritocracy:\n\nThe Rust OP-TEE TrustZone SDK project was originally developed by\nShengye Wan and Mingshen Sun within Baidu. The project now has new\ncommitters from around the world. Some open source projects like\nhttps://github.com/veracruz-project are using the SDK to build their\nsystems. We encourage everyone to ask questions and create pull\nrequests to the project.\n\n#### Community:\n\nWe see several open source projects which are using the SDK for\ndevelopment. Also, we already receive contributions from external\ncomitters. The community is growing overtime.\n\n#### Core Developers:\n\nThe core developers are:\n- Shengye Wan (simonsywan at gmail dot com)\n- Mingshen Sun (mssun at apache.org)\n\n#### Alignment:\n\nThe project is a complimentary of Teaclave's TEE backends.\n\n### Known Risks\n\nAn exercise in self-knowledge. Risks don't mean that a project is\nunacceptable. If they are recognized and noted, then they can be\naddressed during incubation.\n\n#### Project Name\n\nSince the project will be accepted as a subproject in Teaclave, the\nproject is renamed to Teaclave TrustZone SDK.\n\n#### Inexperience with Open Source:\n\nOne of the core developers, Mingshen Sun is from the Teaclave\ncommunity. He's familiar with The Apache Way for the open source\ncommunity.\n\n#### Length of Incubation:\n\nThe project will be in incubation with Apache Teaclave (incubating) project.\n\n### Documentation\n\n- https://github.com/sccommunity/rust-optee-trustzone-sdk/wiki/Getting-started-with-OPTEE-for-QEMU-ARMv8\n\n### Initial Source\n\n- https://github.com/sccommunity/rust-optee-trustzone-sdk\n\n### Source and Intellectual Property Submission Plan\n\nWe will submit a Software Grant for this project later.\n\n#### External Dependencies:\n\nThe dependencies have Apache compatible license, which is provided\nunder the BSD 2-Clause license.\n\n#### Cryptography:\n\nN/A\n\n### Required Resources\n\n#### Mailing lists:\n\nThe project shares the same mailing list of Teaclave.\n\n#### Git Repositories:\n\n- https://gitbox.apache.org/repos/asf/incubator-teaclave-trustzone-sdk.git\n- https://github.com/apache/incubator-teaclave-trustzone-sdk\n\n#### Issue Tracking:\n\nSame with Teaclave.\n\n#### Other Resources:\n\nN/A\n\n### Initial Committers\n\n- Mingshen Sun (mssun at apache dot org)\n- Shengye Wan (simonsywan at gmail dot com)"},{"id":"/2021/04/29/teaclave-meetup-4","metadata":{"permalink":"/blog/2021/04/29/teaclave-meetup-4","editUrl":"https://github.com/apache/incubator-teaclave-website/tree/master/site/blog/blog/2021-04-29-teaclave-meetup-4.md","source":"@site/blog/2021-04-29-teaclave-meetup-4.md","title":"Teaclave Meetup #4","description":"In April 29, we gathered in Zoom for the third monthly Teaclave meetup. In this","date":"2021-04-29T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[{"name":"Mingshen Sun","key":null,"page":null}],"frontMatter":{"title":"Teaclave Meetup #4","date":"2021-04-29T00:00:00.000Z","author":"Mingshen Sun"},"unlisted":false,"prevItem":{"title":"Accepting Rust OP-TEE TrustZone SDK to Apache Teaclave (incubating) Proposal","permalink":"/blog/2021/06/04/accepting-rust-optee-trustzone-sdk-proposal"},"nextItem":{"title":"Podling Teaclave Report - April 2021","permalink":"/blog/2021/04/10/podling-teaclave-report-april-2021"}},"content":"In April 29, we gathered in Zoom for the third monthly Teaclave meetup. In this\nmeetup, we're glad to have Jiang Jun from [Phala Network](https://phala.network/en/)\nto give a talk on Taclave SGX SDK meets Substrate. Phala Network is a\ndecentralized confidential computing cloud with tech stack includes Teaclave SGX\nSDK and Substrate.\n\n![Phala Network](./img/teaclave-meetup-phala-network.png)\n\nIn the meetup, we discuss use cases, technical details and implementation of\nPhala Network, as well as some difficulties with current version of Teaclave SGX\nSDK.\n\nWe are continuing work with out community together to improve the projects.\nHopefully, more users and developers can join in our community and share your\nexperience.\n\n![Teaclave Meetup #4](./img/teaclave-meetup-4-zoom.png)\n\nAt last, if you are interested in our meetup, please subscribe our mailing list\nfor the latest schedule of meetups."},{"id":"/2021/04/10/podling-teaclave-report-april-2021","metadata":{"permalink":"/blog/2021/04/10/podling-teaclave-report-april-2021","editUrl":"https://github.com/apache/incubator-teaclave-website/tree/master/site/blog/blog/2021-04-10-podling-teaclave-report-april-2021.md","source":"@site/blog/2021-04-10-podling-teaclave-report-april-2021.md","title":"Podling Teaclave Report - April 2021","description":"Teaclave","date":"2021-04-10T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[{"name":"Mingshen Sun","key":null,"page":null}],"frontMatter":{"title":"Podling Teaclave Report - April 2021","date":"2021-04-10T00:00:00.000Z","author":"Mingshen Sun"},"unlisted":false,"prevItem":{"title":"Teaclave Meetup #4","permalink":"/blog/2021/04/29/teaclave-meetup-4"},"nextItem":{"title":"Teaclave Meetup #3","permalink":"/blog/2021/03/25/teaclave-meetup-3"}},"content":"## Teaclave\n\nTeaclave is a universal secure computing platform, making computation on\nprivacy-sensitive data safe and simple.\n\nTeaclave has been incubating since 2019-08-20.\n\n### Three most important unfinished issues to address before graduating:\n\n- Improve project structure and documentation\n- Grow the community (attracting more committers, contributors, users)\n- Publish Apache releases (resolving logistics on Apache release)\n\n### Are there any issues that the IPMC or ASF Board need to be aware of?\n\nNone. \n\n### How has the community developed since the last report?\n\nSince the last report, we have started monthly virtual meetups for three times.\nMany people from the community share their usage experience of Teaclave. Also,\nwe invited some contributors to talk about some technical details of the design\nand implementation. For each meetup, we have minutes write-up published on the\nTeaclave blog.\n  - Teaclave Meetup #1: <https://teaclave.apache.org/blog/2021-01-27-teaclave-meetup-1/>\n  - Teaclave Meetup #2: <https://teaclave.apache.org/blog/2021-02-24-teaclave-meetup-2/>\n  - Teaclave Meetup #3: <https://teaclave.apache.org/blog/2021-03-24-teaclave-meetup-3/>\n\nIn addition, we have one more project (Crust Network) powered by Teaclave joined\nin our \"Powered By\" page on the Teaclave homepage.\n  - <https://teaclave.apache.org/powered-by/>\n\n### How has the project developed since the last report?\n\nDuring this period, we also accepted the Rust OP-TEE TrustZone SDK project to\nTeaclave as a sub-project, named as Teaclave TrustZone SDK. Similar to Teaclave\nSGX SDK, Teaclave TrustZone SDK will be the foundation of the Teaclave FaaS\nplatform to support multiple trusted execution environments.\n  - Welcome Rust OP-TEE TrustZone SDK TO Teaclave: <https://teaclave.apache.org/blog/2021-03-14-welcome-rust-optee-trustzone-sdk/>\n\nWe published a project roadmap in 2021:\n  - Roadmap in 2021: Project Maturity and Community Buildup: <https://teaclave.apache.org/blog/2021-01-19-roadmap-in-2021-project-maturity-and-community-buildup/>\n\nWe also announce the 0.2.0 release. In 0.2.0, we focus on various components\nincluding built-in functions, SDKs in different languages, docker, command line\ninterface, documents, etc.\n  - Announcing Apache Teaclave (incubating) 0.2.0: <https://teaclave.apache.org/blog/2021-03-01-announcing-teaclave-0-2-0/>\n\n### How would you assess the podling's maturity?\nPlease feel free to add your own commentary.\n\n  - [ ] Initial setup\n  - [ ] Working towards first release\n  - [x] Community building\n  - [ ] Nearing graduation\n  - [ ] Other:\n\n### Date of last release:\n\n  2021-03-02: Apache Teaclave (incubating) 0.2.0\n\n### When were the last committers or PPMC members elected?\n\n  2020-10-22, Ran Duan (rduan), Committer\n\n### Have your mentors been helpful and responsive?\n\n  Yes, our mentors work responsively to help us with accepting new project\n  donation into Teaclave.\n\n### Is the PPMC managing the podling's brand / trademarks?\n\n  We don't find any 3rd parties incorrectly using the podling's name and brand. The VP, Brand has approved the project name. (PODLINGNAMESEARCH-175)"},{"id":"/2021/03/25/teaclave-meetup-3","metadata":{"permalink":"/blog/2021/03/25/teaclave-meetup-3","editUrl":"https://github.com/apache/incubator-teaclave-website/tree/master/site/blog/blog/2021-03-25-teaclave-meetup-3.md","source":"@site/blog/2021-03-25-teaclave-meetup-3.md","title":"Teaclave Meetup #3","description":"In March 25, we gathered in Zoom for the third monthly Teaclave meetup. In this","date":"2021-03-25T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[{"name":"Mingshen Sun","key":null,"page":null}],"frontMatter":{"title":"Teaclave Meetup #3","date":"2021-03-25T00:00:00.000Z","author":"Mingshen Sun"},"unlisted":false,"prevItem":{"title":"Podling Teaclave Report - April 2021","permalink":"/blog/2021/04/10/podling-teaclave-report-april-2021"},"nextItem":{"title":"欢迎 Rust OP-TEE TrustZone SDK 成为 Teaclave 子项目","permalink":"/blog/2021/03/15/welcome-rust-optee-trustzone-sdk-cn"}},"content":"In March 25, we gathered in Zoom for the third monthly Teaclave meetup. In this\nmeetup, we're glad to have two speakers talking about some initial progress of\nTeaclave verification and comparison of public cloud attestation services.\n\n![Teaclave Meetup #3](./img/teaclave-meetup-3-zoom.jpg)\n\n## Schedule\n\n- Recent Update of Teaclave, Mingshen (3m)\n- Teaclave Verification, Sean (15m)\n- Comparison of Public Cloud Attestation Services, Mengyuan Li (45 m)\n\n## Teaclave Verification\n\nIn this session, Sean talked introduced the plan of Teaclave verification.\nThe main ideas is to create formal descriptions, specifications, and proofs for\nsome core components of Teaclave.\n\nThe initial effort on this field is trying to formally describe the access\ncontrol module in Teaclave. And then prove it with requirements defined in\n[Common Criteria for Information Technology Security Evaluation](https://www.commoncriteriaportal.org/files/ccfiles/CCPART2V3.1R5.pdf).\nThe security objective of access control module is to prevent unauthorized users\nfrom accessing the critical data through tasks and functions. By achieving the\nsecurity objective, the threats of runtime tasks and functions abuse are\neliminated under the assumptions identified in security problem definition.\nWith these objectives, we can find some corresponding requirements in Common\nCriteria, e.g., FIA_UAU.2 for user authentication before any action.\n\nThe initial work has been accepted as a separate project in Teaclave.\nIf you are interested in this topic, please see\n<https://github.com/apache/incubator-teaclave-verification> to learn more.\n\n## Comparison of Public Cloud Attestation Services\n\nThen, Mengyuan talked his recent research on attestation, especially, on public\ncloud attestation services.\n\n![Public Cloud Attestation Services](./img/public-cloud-attestation-services.png)\n\nHere the abstract of the talk:\n\nConfidential computing is an emerging security feature provided by more and more\npublic cloud service providers (e.g., Amazon AWS, Microsoft Azure, and Google\nCloud) in order to help customers protect their sensitive data in the cloud\nenvironment. Some popular confidential computing services include Intel Software\nGuard Extensions (SGX) enclaves and AMD Secure Encrypted Virtualization (SEV)\nVMs. These services are usually atop different hardware-based Trusted Execution\nEnvironments (TEE) technologies.\n\nMeanwhile, to help convince the customers the trustworthiness of the platform\nhardware and the integrity of codes inside the TEE, cloud services providers\nalso offer remote attestation services. In this talk, we will first cover the\nremote attestation workflow provided by some famous cloud TEE services,\nincluding Azure Open Enclave, Nitro Enclave, Google confidential computing VM\nand Fortanix. From the perspective of customers, we also focus on the\nattestation reports the customers can get. We then introduce Teaclave's current\nattestation design and discuss the attestation report standard Teaclave should\nfollow.\n\nHe also discussed the attestation design of Teaclave.\n\n![Public Cloud Attestation Services of Teaclave](./img/public-cloud-attestation-services-teaclave.png)\n\nIn the end, he also summarized the roles in the attestation ecosystem and\npositions of services/products discussed in this talk.\n\n![Public Cloud Attestation Services Summary](./img/public-cloud-attestation-services-summary.png)\n\nAt last, thanks for attending this meetup. I'll continue to drive this meetup\nand make it a monthly activity for the community. If you want to speak in the\nnext time, please post your proposed topic in the mailing list. I'll help you to\nschedule the time."},{"id":"/2021/03/15/welcome-rust-optee-trustzone-sdk-cn","metadata":{"permalink":"/blog/2021/03/15/welcome-rust-optee-trustzone-sdk-cn","editUrl":"https://github.com/apache/incubator-teaclave-website/tree/master/site/blog/blog/2021-03-15-welcome-rust-optee-trustzone-sdk-cn.md","source":"@site/blog/2021-03-15-welcome-rust-optee-trustzone-sdk-cn.md","title":"欢迎 Rust OP-TEE TrustZone SDK 成为 Teaclave 子项目","description":"English | 中文","date":"2021-03-15T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[{"name":"Mingshen Sun","key":null,"page":null}],"frontMatter":{"title":"欢迎 Rust OP-TEE TrustZone SDK 成为 Teaclave 子项目","date":"2021-03-15T00:00:00.000Z","author":"Mingshen Sun"},"unlisted":false,"prevItem":{"title":"Teaclave Meetup #3","permalink":"/blog/2021/03/25/teaclave-meetup-3"},"nextItem":{"title":"Welcome Rust OP-TEE TrustZone SDK to Teaclave","permalink":"/blog/2021/03/15/welcome-rust-optee-trustzone-sdk"}},"content":"[English](/blog/2021-03-14-welcome-rust-optee-trustzone-sdk) | [中文](/blog/2021-03-14-welcome-rust-optee-trustzone-sdk-cn)\n\nTrustZone 为手机、嵌入式设备、云计算等 ARM 生态提供安全的可信执行环境，用于包括\n安全支付、密钥管理、模型保护等场景。但是由于内存安全问题，TrustZone 中运行的安全\n应用 (trusted application 或叫 TA) 的安全性大打折扣。\n例如[高通 QSEE 内存安全问题](http://bits-please.blogspot.com/2016/05/qsee-privilege-escalation-vulnerability.html)\n[1] 造成的安全世界（secure world) 的漏洞，\n后果甚至可以[拿到全磁盘加密的密钥](http://bits-please.blogspot.com/2016/06/extracting-qualcomms-keymaster-keys.html) [2]。\n\n2019 年初百度开源了 Rust OP-TEE TrustZone SDK，为当今广泛使用的开源 TrustZone 实\n现 OP-TEE 提供了一套**内存安全**、**使用方便**的 SDK。SDK 基于 GlobalPlatform 的\nTEE 标准，为开发者提供标准的开发接口。除此之外 Rust OP-TEE TrustZone SDK **支持\n标准库**和**第三方库**，提高了 TA 的开发速度，并扩展了 TrustZone 的应用场景。\n\n为了加速隐私安全生态发展，完善 TrustZone 的技术基础设施，百度在 2021 年初正式把\n项目捐赠给 Apache 基金会，作为 Teaclave 的子项目之一，同时更名为 Teaclave\nTrustZone SDK，新的项目代码库地址为：\n[https://github.com/apache/incubator-teaclave-trustzone-sdk](https://github.com/apache/incubator-teaclave-trustzone-sdk)\n。Teaclave TrustZone SDK 与 Teaclave SGX SDK 一样，可以为 Teaclave FaaS 隐私安全\n计算平台提供底层支持，赋能多平台可信执行环境的隐私安全计算生态。\n\n## Teaclave TrustZone SDK 设计和实现\n\nTeaclave TrustZone SDK 在 GlobalPlatform 标准的 API 上重新设计了安全的 Rust 接口，\n使用 Rust 编写 TA（图中的 trusted apps）和 app（图中 client apps）能够大大减少内\n存安全问题，确保可信执行环境的安全。\n\n![Teaclave TrustZone SDK Design](./img/teaclave-trustzone-sdk-design.png)\n\n通过使用 Rust 的过程宏（procedure macro）自动生成边界代码，减少了开发中不必要的\n负担，并且能够避免开发中因为粗心造成的安全问题。如下图所示，只需要在相应的函数上\n加 `#[ta_create]`, `#[ta_open_session]`, `#[ta_close_session]`, `#[ta_destory]`,\n`#[ta_invoke_command]`。\n\n![Teaclave TrustZone SDK Macros](./img/teaclave-trustzone-sdk-macros.png)\n\n通过利用 Rust 的丰富的类型系统，能在编译时报告内存安全问题，例如下图中对于\nclient 的实现，相比复杂并且类型简单的 C 接口，Rust API 语义更清晰，并提供强类型\n检查。\n\n![Teaclave TrustZone SDK APIs](./img/teaclave-trustzone-sdk-apis.png)\n\n项目中提供了 13 个样例程序，包括加解密，安全存储，HOTP 等等。同时，我们还展示了\n使用 Rust 的第三方库 serde 作为边界的序列化来传递复杂参数，避免出现安全边界设计\n不当引发的内存安全问题。\n\n## 快速上手、文档\n\nTeaclave TrustZone SDK 的 API 都提供了对应的文档，在项目 Wiki 中，我们提供了一个\n快速上手的例子，在 QEMU 模拟器中运行使用 TrustZone SDK 的 trusted app。链接如下：\n[https://github.com/apache/incubator-teaclave-trustzone-sdk/wiki/Getting-started-with-OPTEE-for-QEMU-ARMv8](https://github.com/apache/incubator-teaclave-trustzone-sdk/wiki/Getting-started-with-OPTEE-for-QEMU-ARMv8)\n。更多关于 Teaclave TrustZone SDK 的设计和性能等都在论文 RusTEE: Developing\nMemory-Safe ARM TrustZone Applications 中找到，此论文也收录于 ACSAC 2020。\n\n![Teaclave TrustZone Paper](./img/teaclave-trustzone-sdk-paper.png)\n\n## Teaclave TrustZone SDK 时间线\n\n- 2019 年初开源。\n- 2019 年在 Linaro Connect 和 RustCon Asia 对外发布，得到了 ARM 的支持，现在其隐私计算相关项目中使用。\n- 2020 年相关文章发表在国际顶级安全会议 ACSAC，得到学术界肯定。\n- 随着隐私安全计算的发展，多个开源项目开始使用，例如由 ARM Research 主导的 Veracruz 开源项目使用 SDK 构建其隐私计算试验项目，Veracurz 也将加入隐私计算联盟（Confidential Computing Consortium）。\n- 2021 年 2 月升级 TrustZone SDK 支持 OP-TEE 3.11 和 3.12。\n- 2021 年 2 月启动项目捐赠流程，通过社区投票并提交 Software Grant Agreement。\n- 2021 年 3 月项目 repository 正式移交到 Apache 组织下，隶属于 Apache Teaclave (incubating) 项目。\n\n![Teacalve TrustZone SDK Timeline](./img/teaclave-trustzone-sdk-timeline.png)\n\n## Teaclave 开源社区\n\nTrustZone SDK 加入 Apache 后，将与 Teaclave 开源社区共同发展，非常欢迎大家的贡献，\n一起推动隐私安全计算生态 。已有至少四家公司或组织在产品中使用 Teaclave，并且有超\n过九个开源项目使用了 Teaclave 平台和 Teaclave SGX SDK。这些都给项目的发展提供源\n源不断的动力。更多信息可以在我们的官网 community 下查看：\n[https://teaclave.apache.org/community/](https://teaclave.apache.org/community/)\n\n![Teaclave Commmunity](./img/teaclave-ecosystem-cn.png)\n\nTeaclave 的开源是 [The Apache Way](https://www.apache.org/theapacheway/)\n([https://www.apache.org/theapacheway/](https://www.apache.org/theapacheway/))\n的开源，无论是代码、文档、设计还是路线图规划，我们都会在社区的各个渠道中讨论。如\n果 你想关注 Teaclave，亦或想加入我们的讨论，可以在 [Github issues](https://lists.apache.org/list.html?dev@teaclave.apache.org)，邮件列 表\n回复我们、发起新的话题。也可以关注我们的 Twitter 账号\n[@ApacheTeaclave](https://twitter.com/ApacheTeaclave)了解最新动态。除此之外，\n我们在[官网](https://teaclave.apache.org/docs/papers-talks/)\n([https://teaclave.apache.org/](https://teaclave.apache.org/))中提供了\nTeaclave 相关的演讲、论文和文章，包括 TrustZone SDK 之前的演讲 slides 以及视频。\n\n参考链接：\n\n[1] Qualcomm's Secure Execution Environment (QSEE) privilege escalation\nvulnerability and exploit (CVE-2015-6639) :\n[http://bits-please.blogspot.com/2016/05/qsee-privilege-escalation-vulnerability.html](http://bits-please.blogspot.com/2016/05/qsee-privilege-escalation-vulnerability.html)\n\n[2] Extracting Qualcomm's KeyMaster Keys - Breaking Android Full Disk\nEncryption:\n[http://bits-please.blogspot.com/2016/06/extracting-qualcomms-keymaster-keys.html](http://bits-please.blogspot.com/2016/06/extracting-qualcomms-keymaster-keys.html)"},{"id":"/2021/03/15/welcome-rust-optee-trustzone-sdk","metadata":{"permalink":"/blog/2021/03/15/welcome-rust-optee-trustzone-sdk","editUrl":"https://github.com/apache/incubator-teaclave-website/tree/master/site/blog/blog/2021-03-15-welcome-rust-optee-trustzone-sdk.md","source":"@site/blog/2021-03-15-welcome-rust-optee-trustzone-sdk.md","title":"Welcome Rust OP-TEE TrustZone SDK to Teaclave","description":"English | 中文","date":"2021-03-15T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[{"name":"Mingshen Sun","key":null,"page":null}],"frontMatter":{"title":"Welcome Rust OP-TEE TrustZone SDK to Teaclave","date":"2021-03-15T00:00:00.000Z","author":"Mingshen Sun"},"unlisted":false,"prevItem":{"title":"欢迎 Rust OP-TEE TrustZone SDK 成为 Teaclave 子项目","permalink":"/blog/2021/03/15/welcome-rust-optee-trustzone-sdk-cn"},"nextItem":{"title":"Apache Teaclave (incubating) 0.2.0 发布","permalink":"/blog/2021/03/02/announcing-teaclave-0.2.0-cn"}},"content":"[English](/blog/2021-03-14-welcome-rust-optee-trustzone-sdk) | [中文](/blog/2021-03-14-welcome-rust-optee-trustzone-sdk-cn)\n\nTrustZone is a security feature by ARM SoC to provide a trusted execution\nenvironment to protect areas like mobile computing, edge computing, and\nemerging confidential computing, supporting scenarios like payments, key\nmanagement, model protection, etc. However, one major security threat in\nTrustZone applications is the memory safety issue. For instance, a\nvulnerability of Qualcomm's QSEE is caused by the memory safety issue [1].\nAttackers can even get the full-disk encryption key by exploiting such kind of\nvulnerability [2].\n\nIn 2019, Baidu open sourced the Rust OP-TEE TrustZone SDK project, enabling\nsafe, functional, and ergonomic development of TrustZone app developments.\nThe SDK provides a safer APIs based on the GlobalPlatform's TEE standard.\nIn addition, Rust OP-TEE TrustZone SDK also support Rust's standard library and\nthird-party crates (i.e., libraries). This will improve the efficiency of\ndevelopments of TrustZone apps, and also extend its usage scenarios.\n\nTo accelerate the development of confidential computing ecosystem and improve\nTrustZone's foundation, Baidu has donated Rust OP-TEE TrustZone SDK to Apache Software\nFoundation as a subproject of Teaclave, and renamed it as Teaclave TrustZone SDK.\nThe location of new repository is \n[https://github.com/apache/incubator-teaclave-trustzone-sdk](https://github.com/apache/incubator-teaclave-trustzone-sdk).\nSimilar to Teaclave SGX SDK, Teaclave TrustZone SDK will be the foundation of\nTeaclave FaaS platform to support multiple trusted execution environments.\n\n## Design and Implementation of Teaclave TrustZone SDK\n\nBased on the GlobalPlatform's C APIs, Teaclave TrustZone SDK provides safer Rust interfaces.\nWith the SDK, TrustZone apps will not be affected by any memory safety issues\ncaused by the Rust's strong type system.\n\n![Teaclave TrustZone SDK Design](./img/teaclave-trustzone-sdk-design.png)\n\nWe also created procedure macros to help developments. For example, developers\ncan simply put\n`#[ta_create]`, `#[ta_open_session]`, `#[ta_close_session]`, `#[ta_destory]`,\nand `#[ta_invoke_command]` annotations before corresponding functions. These\nannotations will automatically generate helper functions to bridge the normal/secure worlds.\n\n![Teaclave TrustZone SDK Macros](./img/teaclave-trustzone-sdk-macros.png)\n\nBy using the rich type system of Rust, the memory safety issues will be reported\nat compile time. For example, in the following case, compared to C's APIs, the\nRust APIs have clearer semantics and more strict type checking.\n\n![Teaclave TrustZone SDK APIs](./img/teaclave-trustzone-sdk-apis.png)\n\nThe project also has 13 samples, including encryption/decryption, secure storage, HOTP, etc.\nAlso, we provide a message passing sample code by using `serde` for\nserialization and de-serialization between different worlds to avoid any\nsecurity issues caused by improper design in boundaries.\n\n## Getting Started and Documentations\n\nAll APIs in Teaclave TrustZone SDK are well documented. In the project's Wiki\npage, we have [a quick-start document](https://github.com/apache/incubator-teaclave-trustzone-sdk/wiki/Getting-started-with-OPTEE-for-QEMU-ARMv8)\nto guide you compiling and running a TrustZone app in QEMU emulators.\nYou can find more design and performance evaluation in our paper published in ACSAC 2020.\n\n![Teaclave TrustZone Paper](./img/teaclave-trustzone-sdk-paper.png)\n\n## Teaclave TrustZone SDK Timeline\n\n- 2019: Open source.\n- 2019: Talks in Linaro Connect and RustCon Asia.\n- 2020: Technical report published in ACSAC 2020.\n- 2020: Many open source projects started to use the SDK. E.g., [Veracruz by ARM Research](https://github.com/veracruz-project/veracruz)\n  is an experimental projects on confidential computing using the SDK.\n- Feb 2021: Support OP-TEE 3.11 and 3.12.\n- Feb 2021: Initial the donation procedure.\n- Mar 2021: Officially transferred to Teaclave.\n\n![Teacalve TrustZone SDK Timeline](./img/teaclave-trustzone-sdk-timeline.png)\n\nReferences:\n\n[1] Qualcomm's Secure Execution Environment (QSEE) privilege escalation\nvulnerability and exploit (CVE-2015-6639) :\n[http://bits-please.blogspot.com/2016/05/qsee-privilege-escalation-vulnerability.html](http://bits-please.blogspot.com/2016/05/qsee-privilege-escalation-vulnerability.html)\n\n[2] Extracting Qualcomm's KeyMaster Keys - Breaking Android Full Disk\nEncryption:\n[http://bits-please.blogspot.com/2016/06/extracting-qualcomms-keymaster-keys.html](http://bits-please.blogspot.com/2016/06/extracting-qualcomms-keymaster-keys.html)"},{"id":"/2021/03/02/announcing-teaclave-0.2.0-cn","metadata":{"permalink":"/blog/2021/03/02/announcing-teaclave-0.2.0-cn","editUrl":"https://github.com/apache/incubator-teaclave-website/tree/master/site/blog/blog/2021-03-02-announcing-teaclave-0.2.0-cn.md","source":"@site/blog/2021-03-02-announcing-teaclave-0.2.0-cn.md","title":"Apache Teaclave (incubating) 0.2.0 发布","description":"English | 中文","date":"2021-03-02T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[{"name":"Mingshen Sun","key":null,"page":null}],"frontMatter":{"title":"Apache Teaclave (incubating) 0.2.0 发布","date":"2021-03-02T00:00:00.000Z","author":"Mingshen Sun"},"unlisted":false,"prevItem":{"title":"Welcome Rust OP-TEE TrustZone SDK to Teaclave","permalink":"/blog/2021/03/15/welcome-rust-optee-trustzone-sdk"},"nextItem":{"title":"Announcing Apache Teaclave (incubating) 0.2.0","permalink":"/blog/2021/03/02/announcing-teaclave-0.2.0"}},"content":"[English](/blog/2021-03-01-announcing-teaclave-0-2-0/) | [中文](/blog/2021-03-01-announcing-teaclave-0-2-0-cn/)\n\nApache Teaclave (incubating) 是一个隐私安全计算平台，为隐私数据计算赋能。基于硬\n件安全能力，Teaclave 确保敏感数据在可信域外和离岸场景下安全可控的流通和处理，无\n需担心隐私数据泄露和滥用。 Teaclave 同时支持多方参与的联合计算，打破企业和组织中\n的数据孤岛。Teaclave 于 2019 年由百度捐赠进入 Apache 基金会孵化器。在 2020 年 10\n月发布第一个开源社区版本。\n\nTeaclave 使用 Intel SGX， 提供基于硬件隔离、内存加密、远程证实等安全技术保护数据\n隐私计算任务。 Teaclave 平台提供了函数即服务（function-as-a-service）接口，降低\n了使用门槛。平台中也实现了众多内置函数，例如机器学习算法，多方联 合求交，加解密\n计算等等常用功能。更重要的是，开发者还可以使用 Python 自由编写函数来操作隐私数据，\n在中平台执行。最后，为了避免内存安全漏洞带来的安全风险，Teaclave 还使用内存安全\n编程语言 Rust 编写。\n\n2021 年 3 月 2 日，我们迎来了 Teaclave 第二个社区版本的发布 0.2.0。在这一版本中，\n我们重点放在提供更多的内建函数，不同语言的客户端 SDK，更方便的 docker 部署环境，\n命令行接口，文档等等。\n\n## Teaclave 0.2.0 亮点介绍\n\n在 0.2.0 中，我们添加了多种语言的客户端 SDK，现在我们提供了 Python、Rust、C、\nSwift 四种语言的接口，在 Teaclave Meetup #2 中，我们已经介绍了不同语言 SDK 的组\n织结构和框架。简单来说，我们使用 JSON 序列化/反序列化的方式作为多语言的边界。下\n图描述了这几种语言 SDK 的关系，以及一些事例的接口。\n\n![Teaclave Client SDKs](./img/teaclave-client-sdks.png)\n\n## Teaclave 0.2.0 版本详情\n\n详细来讲 0.2.0 包括一下修改以及新功能：\n\n### Functions\n\n- 增加内置的 PCA (Principal Component Analysis) 函数\n- 添加泄漏密码查询内置函数 (#447)\n\n### SDK\n\n- 增加 Rust 客户端 SDK (#455)\n- 增加 C 客户端 SDK (#470)\n- 增加 Swift 客户端 SDK，也就是 iOS framework\n- 修改 SDK 中接口的 CMAC 格式为 byte array\n\n### Docker\n\n- 增加 `teaclave-file-service` 容器作为示例程序的远程文件系统 (#446)\n- 修复在仿真模式下的 docker compose 文件 (#462)\n\n### CLI\n\n- 增加 `attesation` 的子命令，可以展示当前 SGX 平台的远程认证报告\n\n### 文档\n\n- 增加 codebase 中的文档\n- 增加在 Azure Confidential Compute VM 中部署 Teaclave 的文档介绍\n\n### 其他\n\n- 在 binder 模块中增加 input/output buffer 的检查以及测试\n- 使用 Github Action 进行 PR 的编译、测试以及格式检查\n- 文档的打磨\n\n## 如何下载\n\nTeaclave 0.2.0 版本可以在官网下载页面找到（注意验证 PGP 签名和 hash）。\n\n## 快速入门\n\n如果您想尝试使用 Teaclave，我们提供了一个简单的上手文档（[https://teaclave.apache.org/docs/my-first-function/](https://teaclave.apache.org/docs/my-first-function/)）来执行一个打印 hello world 的函数。\n\n简单来说，你可以通过以下命令使用 docker 编译 Teaclave：\n\n```\n$ cd incubator-teaclave\n$ docker run --rm -v $(pwd):/teaclave -w /teaclave \\\n  -it teaclave/teaclave-build-ubuntu-1804-sgx-2.9.1:latest \\\n   bash -c \". /root/.cargo/env && \\\n     . /opt/sgxsdk/environment && \\\n     mkdir -p build && cd build && \\\n     cmake -DTEST_MODE=ON .. && \\\n     make\"\n```\n\n然后使用 `docker-compose` 在仿真模式下执行 Teaclave 的所有服务：\n\n```\n$ (cd docker && docker-compose -f docker-compose-ubuntu-1804-sgx-sim-mode.yml up --build)\n```\n\n最后，就可以在 examples 目录下使用 Python 调用 echo 函数打印 \"Hello, Teaclave!\"：\n\n```\n$ cd examples/python\n$ PYTHONPATH=../../sdk/python python3 builtin_echo.py 'Hello, Teaclave!'\n[+] registering user\n[+] login\n[+] registering function\n[+] creating task\n[+] approving task\n[+] invoking task\n[+] getting result\n[+] done\n[+] function return:  b'Hello, Teaclave!'\n```\n\n如果你想深入的了解 Teaclave 的内部设计和实现，我们还有更多设计文档、API 文档、代码库文档等你发现。"},{"id":"/2021/03/02/announcing-teaclave-0.2.0","metadata":{"permalink":"/blog/2021/03/02/announcing-teaclave-0.2.0","editUrl":"https://github.com/apache/incubator-teaclave-website/tree/master/site/blog/blog/2021-03-02-announcing-teaclave-0.2.0.md","source":"@site/blog/2021-03-02-announcing-teaclave-0.2.0.md","title":"Announcing Apache Teaclave (incubating) 0.2.0","description":"English | 中文","date":"2021-03-02T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[{"name":"Mingshen Sun","key":null,"page":null}],"frontMatter":{"title":"Announcing Apache Teaclave (incubating) 0.2.0","date":"2021-03-02T00:00:00.000Z","author":"Mingshen Sun"},"unlisted":false,"prevItem":{"title":"Apache Teaclave (incubating) 0.2.0 发布","permalink":"/blog/2021/03/02/announcing-teaclave-0.2.0-cn"},"nextItem":{"title":"Teaclave Meetup #2","permalink":"/blog/2021/02/25/teaclave-meetup-2"}},"content":"[English](/blog/2021-03-01-announcing-teaclave-0-2-0/) | [中文](/blog/2021-03-01-announcing-teaclave-0-2-0-cn/)\n\nOn behalf of the Teaclave community, I am happy to announce the *second* Apache\nIncubator release of Teaclave, 0.2.0. Teaclave is a universal secure computing\nplatform, making computation on privacy-sensitive data safe and simple.\n\nIn 0.2.0, we focus on various components including built-in functions, SDKs in\ndifferent languages, docker, command line interface, documents, etc.\n\n## Highlights\n\nIn version 0.2.0, we added more client SDKs in different languages; Rust, C, and\neven Swift. In [Teaclave Meetup #2](/blog/2021-02-24-teaclave-meetup-2), we\nintroduced the design of client SDKs.\nBasically, we are using JSON serialization/deserialization to make the interface\nsimple and easy to work on.\n\n![Teaclave Client SDKs](./img/teaclave-client-sdks.png)\n\n## 0.2.0 Release Notes\n\nSpecifically, we have following updates:\n\n### Functions\n\n- Add the builtin PCA (Principal Component Analysis) function\n- Add the exposed password checking built-in function (#447)\n\n### SDK\n\n- Add Rust client SDK (#455)\n- Add C client SDK and examples (#470)\n- Add Swift SDK (iOS framework)\n- Change CMAC format from string to bytes array\n\n### Docker\n\n- Add a `teaclave-file-service `container to the docker compose file to help run the examples (#446)\n- Fix sim mode docker compose file (#462)\n\n### CLI\n\n- [cli] Add the attest subcommand to display attestation report from the remote Teaclave service\n\n### Documents\n\n- [docs] Add permalink for codebase's README (#428)\n- [docs] Add document of Deploying Teaclave on Azure Confidential Computing Virtual Machines\n\n### Bug Fixes\n\n- [binder] Add checks and test case for input/output buffer. (#423)\n\n### Misc\n\n- Start to use GitHub Action (#473)\n- Add GitHub issue templates (#476)\n- Document polishing\n\n## Download\n\nTeaclave 0.2.0 can be downloaded at [the download page](/download/). Note that \nit is essential to verify the integrity of the downloaded file using the\nPGP signature (the `.asc` file) or a hash (the `.sha256` file).\n\n## Documentation\n\nIf it is the first time to try Teaclave, we provide a simple but clear tutorial\nto guide you getting stated with Teaclave by invoking\n[your first function](/docs/my-first-function/) in Teaclave.\n\nBasically, you can build the Teaclave platform using docker with these commands:\n\n```sh\n$ cd incubator-teaclave\n$ docker run --rm -v $(pwd):/teaclave -w /teaclave \\\n  -it teaclave/teaclave-build-ubuntu-1804-sgx-2.9.1:latest \\\n   bash -c \". /root/.cargo/env && \\\n     . /opt/sgxsdk/environment && \\\n     mkdir -p build && cd build && \\\n     cmake -DTEST_MODE=ON .. && \\\n     make\"\n```\n\nLaunch all services with `docker-compose` using simulation mode:\n\n```sh\n$ (cd docker && docker-compose -f docker-compose-ubuntu-1804-sgx-sim-mode.yml up --build)\n```\n\nAnd invoke function with a Python client:\n\n```sh\n$ cd examples/python\n$ PYTHONPATH=../../sdk/python python3 builtin_echo.py 'Hello, Teaclave!'\n[+] registering user\n[+] login\n[+] registering function\n[+] creating task\n[+] approving task\n[+] invoking task\n[+] getting result\n[+] done\n[+] function return:  b'Hello, Teaclave!'\n```\n\nIf you want to understand the internals of Teaclave, we provide several\ndocuments about the [design](/docs/#design) of Teaclave. Also, we extensively\ndocument our [codebase](docs/#codebase) in each sub directories. At last, [API references](docs/#api-references)\nare automatically generated and uploaded to our homepage."},{"id":"/2021/02/25/teaclave-meetup-2","metadata":{"permalink":"/blog/2021/02/25/teaclave-meetup-2","editUrl":"https://github.com/apache/incubator-teaclave-website/tree/master/site/blog/blog/2021-02-25-teaclave-meetup-2.md","source":"@site/blog/2021-02-25-teaclave-meetup-2.md","title":"Teaclave Meetup #2","description":"Last time, we discussed setting the meetup as a regular activity (i.e., the","date":"2021-02-25T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[{"name":"Mingshen Sun","key":null,"page":null}],"frontMatter":{"title":"Teaclave Meetup #2","date":"2021-02-25T00:00:00.000Z","author":"Mingshen Sun"},"unlisted":false,"prevItem":{"title":"Announcing Apache Teaclave (incubating) 0.2.0","permalink":"/blog/2021/03/02/announcing-teaclave-0.2.0"},"nextItem":{"title":"Teaclave Meetup #1","permalink":"/blog/2021/01/28/teaclave-meetup-1"}},"content":"Last time, we discussed setting the meetup as a regular activity (i.e., the\nlast Thursday in each Month). On Feb 25, we organized the second Teaclave\nvirtual meetup. Around ten people from the community showed up in the virtual\nmeetup. Thanks for attending the meetup. Hope to see more people in the next\nmeetup and sharing your ideas.\n\n![Teaclave Meetup #2](./img/teaclave-meetup-2-zoom.png)\n\nFor people who were not available at this time, here is a short summary.\n\n## Schedule\n\n- Recent updates on Teaclave, Mingshen Sun (15 m)\n- Q&A and free discussion (45 m)\n\n## Recent Updates on Teaclave\n\nMingshen shared some recent updates on Teaclave with following outlines:\n\n- Teaclave TrustZone SDK donation\n- Releasing Apache Teaclave (incubating) 0.2.0\n- Teaclave Client SDK in Swift (iOS framework)\n- Talks in OC3 - Open Confidential Computing Conference 2021, Mar 11\n\n### Rust OP-TEE TrustZone SDK donation\n\nFor the recent donation on Rust OP-TEE TrustZone SDK, here is a timeline of the\nproject. Currently, this project is under transfer and will be under the\nApache organization on GitHub in the next few days.\n\n![Rust OP-TEE TrustZone SDK Donation Timeline](./img/rust-optee-trustzone-sdk-donation-timeline.png)\n\n### Teaclave Client SDKs\n\nMingshen also gave a brief introduction on the design and implementation of\nTeaclave client SDKs in different languages and their relationships.\n\n![Teaclave Client SDKs](./img/teaclave-client-sdks.png)\n\n## Demo of Rust Std Aware Cargo\n\nOne of our contributor `lyj` also demonstrated his efforts on std aware Cargo\n(#311 in `incubator-teaclave-sgx-sdk`). By using this method, people no longer\nneeds `Xargo` or `no-std` to build the SGX enclave. Hope this improvement will\nease the development of SGX enclaves and porting crates.\n\nAt last, thanks for attending this meetup. I'll continue to drive this meetup\nand make it a monthly activity for the community. If you want to speak in the\nnext time, please post your proposed topic in the mailing list. I'll help you to\nschedule the time."},{"id":"/2021/01/28/teaclave-meetup-1","metadata":{"permalink":"/blog/2021/01/28/teaclave-meetup-1","editUrl":"https://github.com/apache/incubator-teaclave-website/tree/master/site/blog/blog/2021-01-28-teaclave-meetup-1.md","source":"@site/blog/2021-01-28-teaclave-meetup-1.md","title":"Teaclave Meetup #1","description":"We just finished the first public virtual meetup. Around 11 people from the","date":"2021-01-28T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[{"name":"Mingshen Sun","key":null,"page":null}],"frontMatter":{"title":"Teaclave Meetup #1","date":"2021-01-28T00:00:00.000Z","author":"Mingshen Sun"},"unlisted":false,"prevItem":{"title":"Teaclave Meetup #2","permalink":"/blog/2021/02/25/teaclave-meetup-2"},"nextItem":{"title":"Roadmap in 2021: Project Maturity and Community Buildup","permalink":"/blog/2021/01/20/roadmap-in-2021-project-maturity-and-community-buildup"}},"content":"We just finished the first public virtual meetup. Around 11 people from the\ncommunity show up in the virtual meetup. Thanks for attending the meetup. \n\n![Teaclave Meetup #1](./img/teaclave-meetup-1-zoom.png)\n\nFor people who were not available at this time, here is a short summary:\n\n## Schedule\n\n- Recent Update and Roadmap in 2021 by Mingshen Sun (40 minutes)\n- Q&A and free discussion (20 minutes)\n## Recent Updates of Teaclave\n\n- Teaclave TrustZone SDK donation\n- Rust/C client SDK\n- GitHub Actions, GitHub Issue templates\n- GSoC call for proposals\n- Teaclave meetup call for speakers\n\n## 2021 Objectives of Teaclave Projects\n\n- Teaclave FaaS Platform: The best platform for secure computing applications.\n  The most influential open source project in the secure computing community.\n- Teaclave SGX SDK: Keep the leading position in SGX SDK. Healthy and\n  sustainable community.\n- Teaclave TrustZone SDK: Become a mature project for developing TrustZone\n  applications.\n- MesaPy for SGX (not in ASF, but related with Teaclave): Mature Python\n  scripting VM for SGX. More versatile scenarios: data analytics, machine\n  learning, and smart contract.\n\n## Project Release Timeline\n\n- Release Teaclave SGX SDK's Apache official release (Q1, Q3)\n- Regular releases of Teaclave FaaS Platform (Q1, Q2, Q3, Q4)\n- Teaclave TrustZone SDK Apache donation (Q1)\n- Teaclave TrustZone SDK apache official release (Q2)\n- MesaPy for SGX Apache donation (Q2)\n- MesaPy for SGX Apache official release (Q3)\n\n## Community Activities\n\n- Regular meetup (monthly)\n- Annually Teaclave workshop (H2)\n- Blogs (monthly)\n\n## To-do List\n- [RFC] Roadmap in 2021: Project Maturity and Community Buildup\n  (https://github.com/apache/incubator-teaclave/issues/460)\n\nAt last, thanks for attending this meetup. I'll continue to drive this meetup\nand make it a monthly activity for the community. If you want to speak in the\nnext time, please post your proposed topic in the mailing list. I'll help you\nto schedule the time."},{"id":"/2021/01/20/roadmap-in-2021-project-maturity-and-community-buildup","metadata":{"permalink":"/blog/2021/01/20/roadmap-in-2021-project-maturity-and-community-buildup","editUrl":"https://github.com/apache/incubator-teaclave-website/tree/master/site/blog/blog/2021-01-20-roadmap-in-2021-project-maturity-and-community-buildup.md","source":"@site/blog/2021-01-20-roadmap-in-2021-project-maturity-and-community-buildup.md","title":"Roadmap in 2021: Project Maturity and Community Buildup","description":"Last year, we published an RFC - \"Roadmap: Towards the First Public Release\". Thanks","date":"2021-01-20T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[{"name":"Mingshen Sun","key":null,"page":null}],"frontMatter":{"title":"Roadmap in 2021: Project Maturity and Community Buildup","date":"2021-01-20T00:00:00.000Z","author":"Mingshen Sun"},"unlisted":false,"prevItem":{"title":"Teaclave Meetup #1","permalink":"/blog/2021/01/28/teaclave-meetup-1"},"nextItem":{"title":"Podling Teaclave Report - January 2021","permalink":"/blog/2021/01/01/podling-teaclave-report-january-2021"}},"content":"Last year, we published an RFC - \"[Roadmap: Towards the First Public Release](https://github.com/apache/incubator-teaclave/issues/121)\". Thanks\nfor the continuous efforts made by the community. We have completed several\nmilestones and amazing achievements.\n\nSpecifically, we published the first Apache incubator release - [version 0.1.0](https://teaclave.apache.org/blog/2020-10-21-announcing-teaclave-0-1-0/). In this release, we refactored and rewrote almost all core components for\nbetter engineering. New features and enhancements was implemented and well\ntested. Also we wrote plenty of documents for the design, implementation, as\nwell as the code base. Furthermore, the [homepage](https://teaclave.apache.org/)\nof Apache Teaclave (incubating) was built and online, which contains many\nuseful information on the project and community. We also organized several\noffline meetups to build up and grow the Teaclave family. In addition, for\nbetter explaining the project, we introduced the blog in the Teaclave homepage\nand then published an [article about the ecosystem](https://teaclave.apache.org/blog/2020-12-08-teaclave-ecosystem/).\nIn this article, we spent some time to summarize existing open source projects\npowered by Teaclave. Last but not least, we also attended SGX Workshop and\nApacheCon to introduce our project. Overall we're very glad to see the\ndevelopment of the project and growth of the community.\n\nIn the year of 2021, we need to focus on the maturity of the project and\nbuilding a healthier and more sustainable community. Therefore, I summarize\nseveral to-do lists here. There are mainly four parts. The first three are about\nthe project's features and enhancements, which include Teaclave FaaS framework,\nTeaclave SGX SDK, and Teaclave TrustZone SDK (this project just completed the\ndonation voting, more things need to do later). The last one is about community\nbuildup. Yes, this is a very long list. Please let me know if you are interested\nin. I'm more than happy to help you if not familiar with Teaclave, SGX, or Rust.\nAt last, this is not a complete list. Feel free to comment and discuss in this\nthread.\n\n## Teaclave FaaS Framework\n\n  - Support WebAssembly executor\n  - Expose attestation related functions to the executor runtime\n  - Database persistency\n  - Execution report for end user\n  - Async RPC framework for better throughput performance\n  - Monitoring\n  - Performance/Scalability evaluation\n  - Multi-language client SDK: C, Rust client SDK\n  - Improve legacy code using latest compiler features\n  - Documentation: Lifecycle of a task in Teaclave\n  - Documentation: How to launch a multi-party secure computation task\n  - Documentation: FAQ\n  - Technical report\n  - Use a separated service and rule evaluation engine for access control\n  - Implement KMS\n  - Attestation specification for third party enclaves\n  - Automatic state transition of pre-approved tasks\n  - Local configuration of attestation method\n  - Better attestation report freshness management\n  - Refactor RPC interfaces\n  - Add a secure logging service\n  - Active enclaves status service\n  - Support multiple TEE implementations\n  - GRPC or thrift compatibility\n  - Universal TEE interface design and implementation\n\n## Teaclave SGX SDK\n\n  - Security auditing and enhancement\n  - Code polishing\n  - Publish an Apache release\n  - Design a proper development, releasing development lifecycle\n  - Documentation polishing\n  - Tutorial\n  - Maintenance of Rust crates for Teaclave\n  - Document porting guideline for Rust crates for SGX\n  - std Aware Cargo supports\n  - Rust secure file system\n\n## Teaclave TrustZone SDK\n\n  - Keep update to the latest Rust standard library\n  - Keep update to the latest OP-TEE version\n  - Rust Crates for TrustZone, examples\n  - Design attestation framework for TZ\n\n## Teaclave Community\n\n  - Organize meetups on topics around Teaclave\n  - Give public talks to developers\n  - Reach out to more Teaclave users\n  - Collaboration with industry and academia\n  - Blogs on Rust, TEE, and Teaclave"},{"id":"/2021/01/01/podling-teaclave-report-january-2021","metadata":{"permalink":"/blog/2021/01/01/podling-teaclave-report-january-2021","editUrl":"https://github.com/apache/incubator-teaclave-website/tree/master/site/blog/blog/2021-01-01-podling-teaclave-report-january-2021.md","source":"@site/blog/2021-01-01-podling-teaclave-report-january-2021.md","title":"Podling Teaclave Report - January 2021","description":"Teaclave","date":"2021-01-01T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[{"name":"Mingshen Sun","key":null,"page":null}],"frontMatter":{"title":"Podling Teaclave Report - January 2021","date":"2021-01-01T00:00:00.000Z","author":"Mingshen Sun"},"unlisted":false,"prevItem":{"title":"Roadmap in 2021: Project Maturity and Community Buildup","permalink":"/blog/2021/01/20/roadmap-in-2021-project-maturity-and-community-buildup"},"nextItem":{"title":"The Teaclave Secure Computing Ecosystem - Projects Powered by Teaclave","permalink":"/blog/2020/12/09/teaclave-ecosystem"}},"content":"## Teaclave\n\nTeaclave is a universal secure computing platform.\n\nTeaclave has been incubating since 2019-08-20.\n\n### Three most important unfinished issues to address before graduating:\n\n  1. Improve project structure and documentation\n  2. Grow the community (attracting more committers, contributors, users)\n  3. Publish more Apache releases\n\n### Are there any issues that the IPMC or ASF Board need to be aware of?\n\nNone. \n\n### How has the community developed since the last report?\n\n- We received contributions from a new external contributor.\n- We found a new project using Teaclave SGX SDK called Veracruz, which is a\n  framework for defining and deploying collaborative, privacy-preserving\n  computations amongst a group of mutually mistrusting individuals.\n- We summarized the community and projects powered by Teaclave and published\n  a blog on our homepage.\n- Rust TrustZone SDK will be accepted in Teaclave as a subproject. The community\n  is discussing and voting the acceptance.\n- The community has accepted a new committer.\n\n### How has the project developed since the last report?\n\n- Add PCA function in the builtin executor.\n- Add exposed password checking function in the builtin executor.\n- Add the attestation subcommand to display attestation report form the Intel\n  attestation service.\n- Add document to support deploying on Azure confidential computing VM.\n\n\n### How would you assess the podling's maturity?\nPlease feel free to add your own commentary.\n\n  - [ ] Initial setup\n  - [ ] Working towards first release\n  - [x] Community building\n  - [ ] Nearing graduation\n  - [ ] Other:\n\n### Date of last release:\n\n  2020-10-09\n\n### When were the last committers or PPMC members elected?\n\n  2020-10-22\n\n### Have your mentors been helpful and responsive?\n\nYes, our mentors are very helpful and responsive on our discussion about security\nreporting and new projects acceptance voting.\n\n### Is the PPMC managing the podling's brand / trademarks?\nWe don't find any 3rd parties incorrectly using the podling's name and brand.\nThe VP, Brand has approved the project name. (PODLINGNAMESEARCH-175)"},{"id":"/2020/12/09/teaclave-ecosystem","metadata":{"permalink":"/blog/2020/12/09/teaclave-ecosystem","editUrl":"https://github.com/apache/incubator-teaclave-website/tree/master/site/blog/blog/2020-12-09-teaclave-ecosystem.md","source":"@site/blog/2020-12-09-teaclave-ecosystem.md","title":"The Teaclave Secure Computing Ecosystem - Projects Powered by Teaclave","description":"English | 中文","date":"2020-12-09T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[{"name":"Mingshen Sun","key":null,"page":null}],"frontMatter":{"title":"The Teaclave Secure Computing Ecosystem - Projects Powered by Teaclave","date":"2020-12-09T00:00:00.000Z","author":"Mingshen Sun"},"unlisted":false,"prevItem":{"title":"Podling Teaclave Report - January 2021","permalink":"/blog/2021/01/01/podling-teaclave-report-january-2021"},"nextItem":{"title":"Teaclave 安全计算开源生态 - 由 Teaclave 驱动的开源项目一览","permalink":"/blog/2020/12/04/teaclave-ecosystem-cn"}},"content":"[English](/blog/2020-12-09-teaclave-ecosystem/) | [中文](/blog/2020-12-04-teaclave-ecosystem-cn/)\n\nApache Teaclave (incubating) is an open source universal secure computing\nplatform, making computation on privacy-sensitive data safe and simple. With\nhardware-based security capabilities (e.g., Intel SGX), Teaclave enables\nsensitive data to be circulated and processed under security control, even in\noff-site and offshore environments, without being compromised or misused. By\nproviding muti-party interfaces, Teaclave can help to \"bridge the data islands\"\nwithin/among organizations and companies.\n\n## Highlights\n\nIn a nutshell, Teaclave have these four highlights:\n\n- **Secure and Attestable**: Teaclave adopts multiple security technologies to\n  enable secure computing, in particular, Teaclave uses Intel SGX to serve the\n  most security-sensitive tasks with hardware-based isolation, memory encryption\n  and attestation. Also, Teaclave is written in Rust to prevent memory-safety\n  issues.\n- **Function-as-a-Service**: Teaclave is a function-as-a-service platform\n  supports tasks like privacy-preserving machine learning, private set\n  intersection, and crypto computation. In addition, developers can also write\n  and execute Python function. Teaclave supports both general secure computing\n  tasks and flexible multi-party secure computation.\n- **Ease of Use**: Teaclave builds its components in containers, therefore, it\n  supports deployment both locally and within cloud infrastructures. Teaclave\n  also provides convenient endpoint APIs, client SDKs and command line tools.\n- **Flexibility**: Components in Teaclave are designed in modular, and some like\n  remote attestation can be easily embedded in other projects. In addition,\n  Teaclave SGX SDK can also be used separately to write standalone SGX enclaves\n  for other purposes.\n\n![Secure Computing and Intel SGX](./img/secure-computing-intel-sgx.png)\n\n## **Teaclave Ecosystem**\n\nTeaclave provides an open ecosystem in the Apache Way to various parties like\nproject developers, platform users, service providers, first/third-party library\nusers. In a border view, the Teaclave community aims to support commercial\nproducts, academic research projects, teaching platform, and other open source\nprojects powered by Teaclave.\n\n<center><img src=\"./img/teaclave-ecosystem.png\" width=\"85%\" /></center>\n\nDue to the importance of porting, maintaining, auditing of third-party libraries\nin the trusted computing environments, we maintains hundreds of Rust's libraries\nfor TEE, e.g., crypto, scientific computation, and machine learning libraries.\nWith these libraries around the Teaclave ecosystem, this drives the development\nof other projects powered by Teaclave. Furthermore, we are also incubating many\nimportant TEE components like [MesaPy for SGX](https://github.com/mesalock-linux/mesapy/tree/sgx),\nand [Rust OP-TEE TrustZone SDK]((https://github.com/sccommunity/rust-optee-trustzone-sdk).\n\nThe Teaclave open-source ecosystem is also supporting many commercial products.\nFor example, Baidu, as a platform service provider, has announced the\n[MesaTEE](https://anquan.baidu.com/product/mesatee)\nsecure computing platform, providing a secure, efficient, and extensible secure\ncomputing solution to help companies and organizations for privacy-preserving\ndata exchange/computation.\n\nIn addition, the Teaclave ecosystem is also actively sponsoring academic\nresearch in trusted execution environment and system security like topics about\nsecurity in TEE, designing of memory-safe SGX SDK, security of supply chains,\netc. Many studies has been published in top-tier conferences.\n\n## Projects powered by Teaclave\n\nBecause of the openness and flexibility of Teaclave, many projects are based on\nthe Teaclave platforms and Teaclave SGX SDK. Here, we summarize several popular\nopen source or commercial products powered by Teaclave. We hope more\norganizations and companies can come and join the ecosystem, pushing forward the\nboundary of data privacy and secure computation.\n\n  - [Advanca](https://github.com/advanca/advanca): A privacy-preserving\n    general-purpose compute/storage infrastructure for Dapps.\n  - [Anonify](https://github.com/LayerXcom/anonify): A blockchain-agnostic\n    execution environment with privacy and auditability based on TEE.\n![Anonify: A blockchain-agnostic execution environment with privacy and auditability](./img/anonify.png)\n  - [Enigma Core](https://github.com/enigmampc/enigma-core): Enigma Core\n    library. The domain: Trusted and Untrusted App in Rust.\n  - [Crypto.com Chain](https://github.com/crypto-com/chain): Alpha version\n    prototype of Crypto.com Chain.\n  - [Occlum](https://github.com/occlum/occlum): Occlum is a memory-safe,\n    multi-process library OS for Intel SGX. This project plans to join the\n    Confidential Computing Consortium in the near future.\n  - [Phala Network](https://github.com/Phala-Network/phala-blockchain):\n    A TEE-Blockchain hybrid architecture implementing Confidential Contract on\n    Polkadot.\n  - [SafeTrace](https://github.com/enigmampc/SafeTrace): Privacy preserving\n    voluntary COVID-19 self-reporting platform for contact tracing.\n  - [Secret Network](https://github.com/enigmampc/SecretNetwork): A\n    blockchain-based, open-source protocol that lets anyone perform computations\n    on encrypted data, bringing privacy to smart contracts and public\n![Secret Network is a blockchain-based, open-source protocol that lets anyone perform computations on encrypted data, bringing privacy to smart contracts and public blockchains.](./img/secret-network.png)\n    blockchains.\n  - [substraTEE](https://github.com/scs/substraTEE): Trusted Off-Chain Compute\n    Framework for substrate blockchains.\n  - [Veracruz](https://github.com/veracruz-project/veracruz): Veracruz is a\n    framework for defining and deploying collaborative, privacy-preserving\n    computations amongst a group of mutually mistrusting individuals.\n  This project plans to join the Confidiential Computing Consortium in the near future.\n\n![Projects powered by Teaclave](./img/logo-projects-powered-by-teaclave.png)\n\nIn summary, all above projects are trying to utilize capabilities from TEE, like\nhardware-isolation, memory encryption and remote attestation, to protect data\ncomputation or serve as trusted party.\nBased on Teaclave SGX SDK, some projects like Occlum and Veracruz aim to provide a more flexible TEE\nframework. Others like Secret Network and substraTEE want to implement a trusted\nnode for their business logics. Also, some projects are using some common\ncomponents like remote attestation libraries in their code base. Overall, the\nTeaclave ecosystem has empowered lots of successful projects. We have a list of\nprojects powered by Teaclave in the community homepage.\n\nAt last, everyone are very welcome to join the Teaclave community and contribute\nto the secure computing ecosystem. Hope to see more users and contributors in\nthe Teaclave community. BTW, if there are any other amazing projects I didn't\nmention you plan to work on, please also share with me. I'm more than happy to\nlearn more about it."},{"id":"/2020/12/04/teaclave-ecosystem-cn","metadata":{"permalink":"/blog/2020/12/04/teaclave-ecosystem-cn","editUrl":"https://github.com/apache/incubator-teaclave-website/tree/master/site/blog/blog/2020-12-04-teaclave-ecosystem-cn.md","source":"@site/blog/2020-12-04-teaclave-ecosystem-cn.md","title":"Teaclave 安全计算开源生态 - 由 Teaclave 驱动的开源项目一览","description":"English | 中文","date":"2020-12-04T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[{"name":"Mingshen Sun","key":null,"page":null}],"frontMatter":{"title":"Teaclave 安全计算开源生态 - 由 Teaclave 驱动的开源项目一览","date":"2020-12-04T00:00:00.000Z","author":"Mingshen Sun"},"unlisted":false,"prevItem":{"title":"The Teaclave Secure Computing Ecosystem - Projects Powered by Teaclave","permalink":"/blog/2020/12/09/teaclave-ecosystem"},"nextItem":{"title":"让安全计算更简单 - Apache Teaclave (incubating) 0.1.0 正式发布","permalink":"/blog/2020/10/29/announcing-teaclave-0.1.0-cn"}},"content":"[English](/blog/2020-12-09-teaclave-ecosystem/) | [中文](/blog/2020-12-04-teaclave-ecosystem-cn/)\n\nApache Teaclave (incubating) ([https://teaclave.apache.org/](https://teaclave.apache.org/))是全球首个通用安全计算平台，为隐私数据计算赋能，让安全计算更简单。Teaclave 基于硬件安全能力（Intel SGX），确保敏感数据在可信域外和离岸场景下安全可控的流通和处理，无需担心隐私数据泄露和滥用。同时，Teaclave 还支持多方参与的联合计算，打破企业和组织中的数据孤岛。Teaclave 于 2019 年 8 月进入 Apache 基金会孵化器，2020 年 10 月，Teaclave 社区正式通过并发布了 0.1.0 版。\n\n## Teaclave 的四大亮点\n\n简单来说，Teaclave 有四大亮点：\n\n- **安全性**：Teaclave 使用多重安全技术保护隐私数据的计算。我们使用 Intel SGX，提供基于硬件隔离、内存加密、远程证实等安全技术保护数据隐私计算任务。不仅如此，为了避免内存安全漏洞带来的安全风险，Teaclave 还使用内存安全编程语言 Rust 编写。\n- **功能性**：Teaclave 平台提供了更加便利的函数即服务（function-as-a-service）接口，大大的降低了使用门槛。平台中也实现了众多内置函数，例如机器学习算法，多方联合求交，加解密计算等等常用功能。更重要的是，开发者还可以使用 Python 自由编写函数来操作隐私数据，提交至 Teaclave 平台执行。与传统 FaaS 框架不同的是，Teaclave 提供了灵活的多方参与计算接口，大大简化多方安全计算的流程。\n- **易用性**：Teaclave 提供便利的部署方式，支持在本地和云上以容器的方式进行部署。项目中还提供了完善的接口，客户端 SDK 以及命令行工具帮助开发者使用平台的功能。\n- **灵活性**：Teaclave 设计了灵活的组件和服务框架，其他项目仅需少量修改就可以使用 Teaclave 中的各种组件。例如，可以在项目中使用 Teaclave 远程证实库作为第三方依赖库，或者直接单独部署使用 Teaclave 中的数据库服务等。当然，开发者也可使用 Teaclave SGX SDK （原 Rust SGX SDK）来构建全新的 SGX 应用。\n\n![Secure Computing and Intel SGX](./img/secure-computing-intel-sgx.png)\n\n## **Teaclave 开源生态**\n\nTeaclave 提供了一个开放的开源生态，其中既有 Teaclave 项目的开发者，也包括安全计算平台的用户、服务提供商，以及在安全计算相关项目中使用了 Teaclave 中的核心库和第三方常用库的使用者。另一方面，Teaclave 生态服务于商业产品、学术研究项目、可信计算教学平台，同时社区也支持由 Teaclave 驱动的第三方开源项目。\n\n<center><img src=\"./img/teaclave-ecosystem-cn.png\" width=\"75%\" /></center>\n\n在可信执行环境中，第三方库的移植、维护、审计尤为重要。我们为 Teaclave 生态提供了上百个 Rust 的第三方开发库，比如密码学库，科学计算库，机器学习库等等，大大的丰富了 Teaclave 生态，并且驱动了其他基于 Teaclave 的开源项目发展。除了维护第三方库，我们也孵化出了一些重要的 TEE 组件，比如，针对 SGX 环境的 Python 解释器 - MesaPy ([https://github.com/mesalock-linux/mesapy/tree/sgx](https://github.com/mesalock-linux/mesapy/tree/sgx))，以及对 TrustZone 后端 TEE 实现的 SDK - Rust OP-TEE TrustZone SDK ([https://github.com/sccommunity/rust-optee-trustzone-sdk](https://github.com/sccommunity/rust-optee-trustzone-sdk))。\n\nTeaclave 开源生态也支持着众多商业产品。比如，基于 Teaclave 开源代码，百度作为平台服务提供商，构建了 MesaTEE 安全计算平台，该平台提供了强安全、高性能、易扩展的芯片级数据安全计算解决方案。协助机构之间解决数据合作过程中数据安全和隐私问题，打破数据孤岛。 通过私有化或云服务帮助金融、政务、互联网等行业在联合建模、联合营销、联合风控等场景下一站式完成数据联合计算，实现 “数据可用不可见”的安全体验。\n\nTeaclave 生态也支持着可信计算和系统安全相关的学术研究，其中包括可信执行环境的安全，内存安全的 SGX SDK 设计，SGX 第三方库生态的安全等等相关课题。其中有多篇学术成果发表在国际顶级会议上。\n\n## **由 Teaclave 驱动的开源项目**\n\n正因为 Teaclave 的开源、开放及其灵活性，许多项目基于 Teaclave 平台或 SGX SDK 构建，以下列举了几个由 Teaclave 驱动的开源项目或商业产品。希望更多的公司、项目能够加入安全计算的生态当中，共同推动数据隐私、安全计算的发展。\n\n- **Advanca** 是服务于去中心化应用（Dapps）的一个通用的隐私保护计算/存储基础设施。[https://github.com/advanca/advanca](https://github.com/advanca/advanca)\n- **Anonify**: 在区块链上利用可信执行环境 (TEE) 技术，向用户提供防篡改的数据共享技术设施；在灵活执行业务逻辑同时，保证分布式账本中各个参与者的数据隐私。[https://github.com/LayerXcom/anonify](https://github.com/LayerXcom/anonify)\n\n![Anonify: A blockchain-agnostic execution environment with privacy and auditability](./img/anonify.png)\n\n- **Enigma** 联合多个区块链厂商构建去中心化网络联盟 — Secret Network，为区块链用户提供数据隐私保护服务。在 Secret Network 中，用户数据密文作为输入被智能合约执行，执行结果基于共识协议验证后上链。[https://github.com/enigmampc/enigma-core](https://github.com/enigmampc/enigma-core), [https://github.com/enigmampc/SecretNetwork](https://github.com/enigmampc/SecretNetwork)\n\n![Secret Network is a blockchain-based, open-source protocol that lets anyone perform computations on encrypted data, bringing privacy to smart contracts and public blockchains.](./img/secret-network.png)\n\n- **Crypto.com** 的试验性项目 Crypto.com chain 中使用 Teaclave 进行 SGX 应用的开发。[https://github.com/crypto-com/chain](https://github.com/crypto-com/chain)\n- **Phala Network** 是一个 TEE-区块链混合结构实施的智能合约。[https://github.com/Phala-Network/phala-blockchain](https://github.com/Phala-Network/phala-blockchain)\n- **SafeTrace** 项目是一个隐私保护的新型冠状病毒追踪系统，使用 SGX 保证用户的位置数据能够安全的进行交换。[https://github.com/enigmampc/SafeTrace](https://github.com/enigmampc/SafeTrace)\n- **substraTEE** 为 substrate blockchains 提供了可信的 off-chain 计算框架。[https://github.com/scs/substraTEE](https://github.com/scs/substraTEE)\n- **Occlum** 项目是基于 Teaclave SGX SDK 提供了一个 library OS 类型的 SGX 可信执行环境，使应用程序几乎不需要修改源代码即可放入 SGX 上运行。该项目即将加入 Confidiential Computing Consortium 机密计算联盟。[https://github.com/occlum/occlum](https://github.com/occlum/occlum)\n- **Veracruz** 是一个多方不信任环境下的隐私保护的计算框架。该项目即将加入 Confidiential Computing Consortium 机密计算联盟。[https://github.com/veracruz-project/veracruz](https://github.com/veracruz-project/veracruz)\n\n![Projects powered by Teaclave](./img/logo-projects-powered-by-teaclave.png)\n\n以上些项目都是利用 TEE 提供的硬件隔离、内存加密、远程证实等特性，保护业务中数据计算的隐私。一些项目在 SGX SDK 基础上提供了更为便利的可信执行环境框架，比如 Occlum 和 Veracruz。另外一些项目使用 SGX SDK 编写 TEE 应用保护其业务逻辑中的数据隐私，或提供可信的节点，如 Secret Network 和 substraTEE。还有一些项目移植使用 Teaclave 平台里的通用模块，比如远程证实代码库等等。更多关于由 Teaclave 驱动的开源项目列表可以在官网中查看（[https://teaclave.apache.org/community/](https://teaclave.apache.org/community/)）。\n\n最后，Teaclave 项目非常欢迎大家共同参与社区，推动隐私安全计算发展。"},{"id":"/2020/10/29/announcing-teaclave-0.1.0-cn","metadata":{"permalink":"/blog/2020/10/29/announcing-teaclave-0.1.0-cn","editUrl":"https://github.com/apache/incubator-teaclave-website/tree/master/site/blog/blog/2020-10-29-announcing-teaclave-0.1.0-cn.md","source":"@site/blog/2020-10-29-announcing-teaclave-0.1.0-cn.md","title":"让安全计算更简单 - Apache Teaclave (incubating) 0.1.0 正式发布","description":"English | 中文","date":"2020-10-29T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[{"name":"Mingshen Sun","key":null,"page":null}],"frontMatter":{"title":"让安全计算更简单 - Apache Teaclave (incubating) 0.1.0 正式发布","date":"2020-10-29T00:00:00.000Z","author":"Mingshen Sun"},"unlisted":false,"prevItem":{"title":"Teaclave 安全计算开源生态 - 由 Teaclave 驱动的开源项目一览","permalink":"/blog/2020/12/04/teaclave-ecosystem-cn"},"nextItem":{"title":"Announcing Apache Teaclave (incubating) 0.1.0","permalink":"/blog/2020/10/22/announcing-teaclave-0.1.0"}},"content":"[English](/blog/2020-10-21-announcing-teaclave-0-1-0/) | [中文](/blog/2020-10-28-announcing-teaclave-0-1-0-cn/)\n\nApache Teaclave (incubating) 作为全球首个开源通用安全计算平台，在 2020 年 10 月\n21 日社区投票正式通过 0.1.0 的版本发布。0.1.0 版是 Teaclave 社区发展重要的里程碑，\n它是暨 Teaclave 进入 Apache 孵化器后发布的第一个正式版本，这意味着 Teaclave 通向\nApache 顶级项目之路走上了正轨。\n\nTeaclave 是一个安全计算平台，为隐私数据计算赋能。基于硬件安全能力，Teaclave 确保\n敏感数据在可信域外和离岸场景下安全可控的流通和处理，无需担心隐私数据泄露和滥用。\nTeaclave 同时支持多方参与的联合计算，打破企业和组织中的数据孤岛。\n\n简单来说，Teaclave 有以下四个亮点：\n\n- **安全性**：Teaclave 使用多重安全技术保护隐私数据的计算。我们使用 Intel SGX，\n  提供基于硬件隔离、内存加密、远程证实等安全技术保护数据隐私计算任务。不仅如此，\n  为了避免内存安全漏洞带来的安全风险，Teaclave 还使用内存安全编程语言 Rust 编写。\n- **功能性**：Teaclave 平台提供了更加便利的函数即服务（function-as-a-service）接\n  口，大大的降低了使用门槛。平台中也实现了众多内置函数，例如机器学习算法，多方联\n  合求交，加解密计算等等常用功能。更重要的是，开发者还可以使用 Python 自由编写函\n  数来操作隐私数据，提交至 Teaclave 平台执行。与传统 FaaS 框架不同的是，Teaclave\n  提供了灵活的多方参与计算接口，大大简化多方安全计算的流程。\n- **易用性**：Teaclave 提供便利的部署方式，支持在本地和云上以容器的方式进行部署。\n  项目中还提供了完善的接口，客户端 SDK 以及命令行工具帮助开发者使用平台的功能。\n- **灵活性**：Teaclave 设计了灵活的组件和服务框架，其他项目仅需少量修改就可以使\n  用 Teaclave 中的各种组件。例如，可以在项目中使用 Teaclave 远程证实库作为第三方\n  依赖库，或者直接单独部署使用 Teaclave 中的数据库服务等。\n  \n![Teaclave Architecture](./img/teaclave-architecture.png)\n\n在 Teaclave 进入 Apache 孵化器后，我们启动了对项目的重构计划，同时对整个项目代码\n和交互的梳理，0.1.0 的发布是项目从诞生到成长的第一步。简单来说，我们在以下几个方\n面做了代码重构和功能特性完善：提供了更完善的函数和数据注册执行，重新设计的函数的\n开发流程，支持兼容 protobuf 的 RPC 定义接口，支持分布式执行服务，支持自定义执行\n器，提供更佳完善的文档，重新设计了错误处理机制，完善测试框架和测试用例，实现了更\n多的内置函数，支持了更加灵活的远程证实方式（DCAP），重新设计 RPC 方式等等。更多\n更详细的修改可以看我们的[版本发布文档](https://github.com/apache/incubator-teaclave/releases/tag/v0.1.0)。这次\n发布一共修改了 876 个源文件，新增了 78,237 行代码，删除了 54,846 行代码，并且在\nGitHub issue 上解决了来自社区的 102 个问题。\n\nTeaclave 0.1.0 版本可以在[官网下载页面](/download/)找到（注意验证 PGP 签名和 hash）。\n\n在新版本中我们提供了非常全面和详细的文档，如果是第一次了解和接触 Teaclave，我们\n提供了一个简单易上手的[新手入门文档](/docs/my-first-function/)，你可以在这个文档中\n学习如何在 Teaclave 中编译和运行一个简单的函数。当然，如果你想深入的了解\nTeaclave 的内部设计和实现，我们还有更多设计文档、API 文档、代码库文档等你发现。\n\n感谢一直以来关注、使用、提问、为项目贡献代码的人们，Teaclave 项目的发展离不开[社区](/community/)的支持与帮助。在此，我们非常高\n兴的宣布，已有四家公司或组织在产品中使用 Teaclave，并且有超过九个开源项目使用了\nTeaclave 平台和 Teaclave SGX SDK。这些都给项目的发展提供源源不断的动力。\n\nTeaclave 的开源是 [The Apache Way](https://www.apache.org/theapacheway/)的\n开源，无论是代码、文档、设计还是路线图规划，我们都会在社区的各个渠道中讨论。如果\n你想关注 Teaclave，亦或想加入我们的讨论，可以在 [Github issues](https://lists.apache.org/list.html?dev@teaclave.apache.org)，邮件列\n表回复我们、发起新的话题。也可以关注我们的 Twitter 账号\n[@ApacheTeaclave](https://twitter.com/ApacheTeaclave)了解最新动态。除此之外，\n我们在[官网](/docs/papers-talks/)中提供了\nTeaclave 相关的演讲、论文和文章，包括今年在 ApacheCon 的演讲 slides 和视频。\n\n在此，感谢我们所有[贡献者](/contributors/)对于项\n目的贡献，感谢 Apache 社区[导师们](/contributors/#mentors)的指导，感谢所有帮助\n扩大社区、宣传社区、讨论路线图、组织社区活动的 [PPMC 和 committer 成员](/contributors/#committers)，\n还要感谢正在了解\n和尝试使用 Teaclave 的人们，以及回馈 Teaclave 社区的公司。你们都为 Teaclave 开源\n社区的发展做了巨大的贡献。\n\n最后，0.1.0 只是 Teaclave 的开端，我们还会和 Teaclave 社区继续努力，推动隐私安全\n计算的发展。\n\n**Teaclave，让安全计算更简单。**"},{"id":"/2020/10/22/announcing-teaclave-0.1.0","metadata":{"permalink":"/blog/2020/10/22/announcing-teaclave-0.1.0","editUrl":"https://github.com/apache/incubator-teaclave-website/tree/master/site/blog/blog/2020-10-22-announcing-teaclave-0.1.0.md","source":"@site/blog/2020-10-22-announcing-teaclave-0.1.0.md","title":"Announcing Apache Teaclave (incubating) 0.1.0","description":"English | 中文","date":"2020-10-22T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[{"name":"Mingshen Sun","key":null,"page":null}],"frontMatter":{"title":"Announcing Apache Teaclave (incubating) 0.1.0","date":"2020-10-22T00:00:00.000Z","author":"Mingshen Sun"},"unlisted":false,"prevItem":{"title":"让安全计算更简单 - Apache Teaclave (incubating) 0.1.0 正式发布","permalink":"/blog/2020/10/29/announcing-teaclave-0.1.0-cn"},"nextItem":{"title":"Podling Teaclave Report - October 2020","permalink":"/blog/2020/10/12/podling-teaclave-report-october-2020"}},"content":"[English](/blog/2020-10-21-announcing-teaclave-0-1-0/) | [中文](/blog/2020-10-28-announcing-teaclave-0-1-0-cn/)\n\nOn behalf of the Teaclave community, I am happy to announce the *first* Apache\nIncubator release of Teaclave, 0.1.0. Teaclave is a universal secure computing\nplatform, making computation on privacy-sensitive data safe and simple.\n\nThe 0.1.0 release marks an important milestone for the Teaclave community. This\nis the first public release of the Teaclave platform. Moreover, this is the\nfirst official release since we entered Apache Incubator on August 19, 2019.\n\n## Project highlights\n\nSince this is our first public release, I still want to emphasize the highlights\nof the Teaclave project.\n\nApache Teaclave (incubating) has following highlights:\n\n- **Security**: Teaclave adopts multiple security technologies to enable secure\n  computing. In particular, Teaclave uses Intel SGX to serve the most\n  security-sensitive tasks with *hardware-based isolation*, *memory encryption*,\n  and *attestation*. Also, Teaclave is written in Rust to prevent\n  *memory-safety* issues.\n- **Functionality**: Teaclave is provided as a *function-as-a-service platform*.\n  With many built-in functions, it supports tasks like machine learning, private\n  set intersection, crypto computation, etc. In addition, developers can also\n  deploy and execute Python scripts in Teaclave. More importantly, unlike\n  traditional FaaS, Teaclave supports both general secure computing tasks and\n  *flexible single- and multi-party computation*.\n- **Usability**: Teaclave builds its components in containers, therefore, it\n  supports deployment both locally and within cloud infrastructures. Teaclave\n  also provides convenient endpoint APIs, client SDKs, and command-line tools.\n- **Modularity**: Components in Teaclave are designed in modular, and some components \n  like remote attestation can be easily embedded in other projects. In addition,\n  Teaclave SGX SDK can also be used separately to write standalone SGX enclaves\n  for other purposes.\n\n![Teaclave Architecture](./img/teaclave-architecture.png)\n\n## Changes since entering Apache Incubator\n\nSince we entered Apache Incubator, we started an ambitious task of refactoring\nand improving the project in many perspectives. These include:\n\n* Supporting function and data registration.\n    - input data of a function can be fetched from external storage\n    - reuse registered function in new tasks\n* Redesigning function development workflow.\n    - developers only need to write python script with native libraries written in Rust\n* Providing persistent database implementation.\n    - port rusty-leveldb to SGX enclave using protected FS to secure file I/O\n    - add dedicated database service called \"storage service\" for data persistency\n* Supporting protobuf compatible RPC protocol.\n    - refactor existing service protocol with `.proto` files\n    - redesign PRC protocol with remote attestation\n* Supporting distributed workers.\n    - support docker deployment\n    - decouple services into different containers\n* Supporting customized workers.\n    -  service provider can deploy with other kinds of customized workers besides builtin worker\n* Providing better documentation.\n* Providing better error handling.\n    - errors can be propagated through RPC\n    - better error triage\n* Testsuite cleanup/refactoring.\n* Implementing more built-in functions: we have nine built-in functions, including\n  echo, face detection, gbdt predict/train, logistic regression predict/train,\n  online decrypt, ordered set intersect, private join and compute, and RSA sign.\n* Supporting more flexible attestation mechanisms (DCAP): providing a reference\n  implementation of DCAP attestation service and supporting DCAP in our\n  attestation library and build system as well.\n* RPC enhancement.\n    - multi-language client\n* Many other changes.\n\nThese changes include 876 files changed, 78,237 insertions, and 54,846 deletions.\nWe have also closed 102 issues on GitHub to answer questions from the community\nand implementing feature requests.\n\n## Download\n\nTeaclave 0.1.0 can be downloaded at [the download page](/download/). Note that \nit is essential to verify the integrity of the downloaded file using the\nPGP signature (.asc file) or a hash (.md5 or .sha* file).\n\n## Documentation\n\nIf it is the first time to try Teaclave, we provide a simple but clear tutorial\nto guide you getting stated with Teaclave by invoking\n[your first function](/docs/my-first-function/) in Teaclave.\n\nBasically, you can build the Teaclave platform using docker with these commands:\n\n```sh\n$ cd incubator-teaclave\n$ docker run --rm -v $(pwd):/teaclave -w /teaclave \\\n  -it teaclave/teaclave-build-ubuntu-1804-sgx-2.9.1:latest \\\n   bash -c \". /root/.cargo/env && \\\n     . /opt/sgxsdk/environment && \\\n     mkdir -p build && cd build && \\\n     cmake -DTEST_MODE=ON .. && \\\n     make\"\n```\n\nLaunch all services with `docker-compose`:\n\n```sh\n$ (cd docker && docker-compose -f docker-compose-ubuntu-1804.yml up --build)\n```\n\nAnd invoke function with a Python client:\n\n```sh\n$ cd examples/python\n$ PYTHONPATH=../../sdk/python python3 builtin_echo.py 'Hello, Teaclave!'\n[+] registering user\n[+] login\n[+] registering function\n[+] creating task\n[+] approving task\n[+] invoking task\n[+] getting result\n[+] done\n[+] function return:  b'Hello, Teaclave!'\n```\n\nIf you want to understand the internals of Teaclave, we provide several\ndocuments about the [design](/docs/#design) of Teaclave. Also, we extensively\ndocument our [codebase](docs/#codebase) in each sub directories. At last, [API references](docs/#api-references)\nare automatically generated and uploaded to our homepage.\n\n## Community\n\nAlong our road to the first public release, we also see the growth of the\ncommunity who started to follow the project and using in their products. We have\nseen at least four [organizations](community/#organizations) using Teaclave in\ntheir products, and more than nine open source [projects](community/#projects)\nbuilding on top of Teaclave platform or Teaclave SGX SDK.\n\nWe build several channels to communicate with the community including GitHub issues,\n[mailing lists](https://lists.apache.org/list.html?dev@teaclave.apache.org), and\nTwitter account ([@ApacheTeaclave](https://twitter.com/ApacheTeaclave)).\n\nWe also attended ApacheCon this year to introduce Teaclave to the Apache community.\nIf you missed the talk, please find the slides and other materials of talks,\npapers, and related articles at [this page](/docs/papers-talks/).\n\n## Thanks\n\nI'd like to thank all [contributors](/contributors/) to build this community.\nThanks to our project [mentors](/contributors/#mentors), who help us to\nunderstand the Apache way of open source. Furthermore, \nthanks to all [PPMC members and committers](/contributors/#committers)\nfor governing and expanding the community, organizing meetups, discussing\nroadmap, designing components, writing documents, contributing code, and\nadvertising the project. Moreover, thanks to all [external contributors](/contributors/#contributors-2)\nwho send pull requests to fix bugs\nand implementing features. In addition, I'd like to thank people who tries\nTeaclave themselves, files bugs or feature requests. This also helps us to\nunderstand the project and figure out where we can improve.\nFinally, I'd like to thank companies who use Teaclave and contribute back to\nthe community.\n\nAt last, 0.1.0 is just the start of Teaclave. We will continue working hard with\nthe community implementing new features, writing documents, and expanding the\ncommunity.\n\nHappy Teaclaving. Cheers!"},{"id":"/2020/10/12/podling-teaclave-report-october-2020","metadata":{"permalink":"/blog/2020/10/12/podling-teaclave-report-october-2020","editUrl":"https://github.com/apache/incubator-teaclave-website/tree/master/site/blog/blog/2020-10-12-podling-teaclave-report-october-2020.md","source":"@site/blog/2020-10-12-podling-teaclave-report-october-2020.md","title":"Podling Teaclave Report - October 2020","description":"Teaclave","date":"2020-10-12T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[{"name":"Mingshen Sun","key":null,"page":null}],"frontMatter":{"title":"Podling Teaclave Report - October 2020","date":"2020-10-12T00:00:00.000Z","author":"Mingshen Sun"},"unlisted":false,"prevItem":{"title":"Announcing Apache Teaclave (incubating) 0.1.0","permalink":"/blog/2020/10/22/announcing-teaclave-0.1.0"},"nextItem":{"title":"Podling Teaclave Report - July 2020","permalink":"/blog/2020/06/29/podling-teaclave-report-july-2020"}},"content":"## Teaclave\n\nTeaclave is a universal secure computing platform, making computation on\nprivacy-sensitive data safe and simple.\n\nTeaclave has been incubating since 2019-08-20.\n\n### Three most important unfinished issues to address before graduating:\n\n  1. Improve project structure and documentation\n  2. Grow the community (attracting more committers, contributors, users)\n  3. Publish Apache releases (resolving logistics on Apache release)\n\n### Are there any issues that the IPMC or ASF Board need to be aware of?\n\nNone. \n\n### How has the community developed since the last report?\n\nSince the last report, we received contributions from a new contributor. We also\nreceived many issue reports and questions regarding the usages, bugs, and\nroadmap of Teaclave. Also, we presented the Teaclave project in recent ApacheCon\nto the community and received some useful feedback.\n\n### How has the project developed since the last report?\n\nThe main goal of development since the last report is to resolve logistics\ntowards the first Apache release. This includes license checking, building\nsystem improvement, documentation and write-ups. On Oct 9th, the Teaclave\ncommunity and incubator has passed 0.1.0 release voting.\n\n### How would you assess the podling's maturity?\nPlease feel free to add your own commentary.\n\n  - [ ] Initial setup\n  - [X] Working towards first release\n  - [X] Community building\n  - [ ] Nearing graduation\n  - [ ] Other:\n\n### Date of last release:\n\n2020-10-09\n\n### When were the last committers or PPMC members elected?\n\nWe haven't started new committers or PPMC members elections yet. Currently, our\nwork focuses on the first Apache release. We'll switch to community building in\nthe next quarter. Currently, we already have potential candidates for the new\nPPMC members election.\n\n### Have your mentors been helpful and responsive?\n\nYes. They have been helpful and very responsive for the first public release. \n\n### Is the PPMC managing the podling's brand / trademarks?\nWe don't find any 3rd parties incorrectly using the podling's name and brand.\nThe VP, Brand has approved the project name. (PODLINGNAMESEARCH-175)"},{"id":"/2020/06/29/podling-teaclave-report-july-2020","metadata":{"permalink":"/blog/2020/06/29/podling-teaclave-report-july-2020","editUrl":"https://github.com/apache/incubator-teaclave-website/tree/master/site/blog/blog/2020-06-29-podling-teaclave-report-july-2020.md","source":"@site/blog/2020-06-29-podling-teaclave-report-july-2020.md","title":"Podling Teaclave Report - July 2020","description":"Teaclave","date":"2020-06-29T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[{"name":"Mingshen Sun","key":null,"page":null}],"frontMatter":{"title":"Podling Teaclave Report - July 2020","date":"2020-06-29T00:00:00.000Z","author":"Mingshen Sun"},"unlisted":false,"prevItem":{"title":"Podling Teaclave Report - October 2020","permalink":"/blog/2020/10/12/podling-teaclave-report-october-2020"},"nextItem":{"title":"Podling Teaclave Report - April 2020","permalink":"/blog/2020/04/01/podling-teaclave-report-april-2020"}},"content":"## Teaclave\n\nTeaclave is a universal secure computing platform, making computation\non privacy-sensitive data safe and simple.\n\nTeaclave has been incubating since 2019-08-20.\n\n### Three most important unfinished issues to address before graduating:\n\n 1. Improve project structure and documentation\n 2. Grow the community (attracting more committers, contributors, users)\n 3. Publish Apache releases (resolving logistics on Apache release)\n\n### Are there any issues that the IPMC or ASF Board need to be aware of?\n\nNo.\n\n### How has the community developed since the last report?\n\nSince the last report, we started to reach out to people using the\nproject and collect suggestions and encourage them to join in the\ncommunity. We have found four organizations and eight projects that\nare using either the Teaclave platform and Teaclave's Rust SGX SDK.\n\nWe also created a website for the project:\nhttps://teaclave.apache.org/, which contains project description,\ncommunity, contributors, documentations and blog posts.\n\nWe started a thread to discuss the logo design, but haven't received\nany proposal for now. We will drive this issue in the next few weeks.\n\nWe observed more people posting feature suggestions and\nbuild/deployment issues. More than five new contributors begin to\ncontribute bug fixes and introduce new examples.\n\nWe started preparing the first Apache release such as logistics on\nlicenses of third-party libraries.\n\n### How has the project developed since the last report?\n\nSince the last report, we have completed the development roadmap\ntowards the first public release\n(https://github.com/apache/incubator-teaclave/issues/121) proposed\nlast year. We began to put more efforts on improving documents and\nbuilding community.\n\nWe wrote many documents in recent weeks including:\n\n - Try: Tutorials on using the Teaclave platform.\n - Design: Some explanations of design choices we made.\n - Contribute: Documents on contributing to Teaclave, such as\ndebugging tips and Rust development guideline.\n - Codebase: Documents for each sub-directory (i.e., libraries in Teaclave).\n - API Docs: Generated API documentations like APIs of Client SDK.\n\nWe also provided more examples to help beginners to understand the\nbasic usages of the projects.\n\n### How would you assess the podling's maturity?\n\n - [ ] Initial setup\n - [x] Working towards first release\n - [x] Community building\n - [ ] Nearing graduation\n - [ ] Other:\n\n### Date of last release:\n\nN/A\n\n### When were the last committers or PPMC members elected?\n\nWe haven't started new committers or PPMC members elections yet.\nCurrently, our work focuses on improving the documents to make the\nproject more approachable for newcomers. Additionally, we see some\nregular contributors recently mainly focus on helping to improve\nexamples, SDK, etc.\n\n### Have your mentors been helpful and responsive?\n\nYes, our mentors help us with the website development and logo design.\nAlso, our mentors provided valuable thoughts regarding Intel's recent\nsecurity issues.\n\n### Is the PPMC managing the podling's brand / trademarks?\n\nWe don't find any 3rd parties incorrectly using the podling's name and\nbrand. The VP, Brand has approved the project name.\n(PODLINGNAMESEARCH-175)"},{"id":"/2020/04/01/podling-teaclave-report-april-2020","metadata":{"permalink":"/blog/2020/04/01/podling-teaclave-report-april-2020","editUrl":"https://github.com/apache/incubator-teaclave-website/tree/master/site/blog/blog/2020-04-01-podling-teaclave-report-april-2020.md","source":"@site/blog/2020-04-01-podling-teaclave-report-april-2020.md","title":"Podling Teaclave Report - April 2020","description":"Teaclave","date":"2020-04-01T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[{"name":"Mingshen Sun","key":null,"page":null}],"frontMatter":{"title":"Podling Teaclave Report - April 2020","date":"2020-04-01T00:00:00.000Z","author":"Mingshen Sun"},"unlisted":false,"prevItem":{"title":"Podling Teaclave Report - July 2020","permalink":"/blog/2020/06/29/podling-teaclave-report-july-2020"},"nextItem":{"title":"Podling Teaclave Report - January 2020","permalink":"/blog/2020/01/01/podling-teaclave-report-january-2020"}},"content":"## Teaclave\n\nTeaclave is a universal secure computing platform.\n\nTeaclave has been incubating since 2019-08-20.\n\n### Three most important unfinished issues to address before graduating:\n\n  1. Improving project structure and documentation\n  2. Grow the community (committers, contributors, users)\n  3. Publish Apache release\n\n### Are there any issues that the IPMC or ASF Board need to be aware of?\n\nNo.\n\n### How has the community developed since the last report?\n\n  - Since last report, one external contributor has became our regular\n    contributor.\n  - Compared to the last report, we have seen more pull request from external\n    contributors.\n  - We received emails from some companies which are interested in the\n    project and willing to make some contributions for the secure computing\n    community.\n  - Since we are mainly working on GitHub, with the help of the INFRA team,\n    we can sync the notifications of GitHub with our mailing list.\n\n### How has the project developed since the last report?\n\n  - Since last report, the whole project has been refactored to be more\n    functional, as well as readable and approachable for new contributors.\n  - We have rewrote the framework for implementing enclave services. Also, we\n    have redesigned current services into seven core services\nincluding access control,\n    authentication, execution, frontend, management, scheduler, and storage\n    service. Communication protocols between services are defined in protobuf.\n  - RPC between services has been redesigned to supported TLS-based attestation.\n  - We have added DCAP attestation algorithm in the platform so that people can\n    deploy the system in environments without Intel's attestation service.\n  - Communication between app and enclave has been also redesigned\nwith better APIs.\n  - All updates is currently in the `develop` branch. We plan to merge\ninto `master`\n    when main refactoring is done.\n\n### How would you assess the podling's maturity?\nPlease feel free to add your own commentary.\n\n  - [ ] Initial setup\n  - [x] Working towards first release\n  - [ ] Community building\n  - [ ] Nearing graduation\n  - [ ] Other:\n\n### Date of last release:\n\nN/A\n\n### When were the last committers or PPMC members elected?\n\nWe haven't started new committers or PPMC members elections yet. Currently, our\nwork focus on improving the design and documents to make the project more\napproachable for newcomers.\n\n### Have your mentors been helpful and responsive?\n\nYes, our mentors help use to resolve the mailing list moderator issues.\n\n### Is the PPMC managing the podling's brand / trademarks?\n\nWe don't find any 3rd parties incorrectly using the podling's name and brand.\nThe VP, Brand has approve the project name. (PODLINGNAMESEARCH-175)"},{"id":"/2020/01/01/podling-teaclave-report-january-2020","metadata":{"permalink":"/blog/2020/01/01/podling-teaclave-report-january-2020","editUrl":"https://github.com/apache/incubator-teaclave-website/tree/master/site/blog/blog/2020-01-01-podling-teaclave-report-january-2020.md","source":"@site/blog/2020-01-01-podling-teaclave-report-january-2020.md","title":"Podling Teaclave Report - January 2020","description":"Teaclave","date":"2020-01-01T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[{"name":"Mingshen Sun","key":null,"page":null}],"frontMatter":{"title":"Podling Teaclave Report - January 2020","date":"2020-01-01T00:00:00.000Z","author":"Mingshen Sun"},"unlisted":false,"prevItem":{"title":"Podling Teaclave Report - April 2020","permalink":"/blog/2020/04/01/podling-teaclave-report-april-2020"},"nextItem":{"title":"Mitigation of Intel-SA-00219 in Teaclave SGX SDK","permalink":"/blog/2019/12/03/mitigation-of-intel-sa-00219-in-teaclave-sgx-sdk"}},"content":"## Teaclave\n\nTeaclave is a universal secure computing platform.\n\nTeaclave has been incubating since 2019-08-20.\n\n### Three most important unfinished issues to address before graduating:\n\n  1. Improving project structure and documentation\n  2. Grow the community (committers, contributors, users)\n  3. Publish Apache release\n\n### Are there any issues that the IPMC or ASF Board need to be aware of?\n\nNo.\n\n### How has the community developed since the last report?\n\n  - Since last report, we planned to schedule an online meetup recently.\n  - We have also received contributions of two new contributors.\n  - We draft a roadmap RFC for discussion.\n  - We use GitHub issues to track bugs, features, enhancements. Issues\nlabeled with \"good first issues\" is more approachable for newcomers.\n\n### How has the project developed since the last report?\n\n  - Resolve all renaming issues of INFRA (INFRA-19532)\n  - Refactor components: `teaclave_utils`, `teaclave_config`,\n`teaclave_cli`, `teaclave_binder`\n  - Rewrite README.md to clearly explain the project's highlights in\nsecurity, functionality, and usability.\n  - Start to use protobuf for RPC definition\n  - SGX SDK starts to use Intel SGX SDK v2.7.1\n\n### How would you assess the podling's maturity?\n\n  - [ ] Initial setup\n  - [x] Working towards first release\n  - [ ] Community building\n  - [ ] Nearing graduation\n  - [ ] Other:\n\n### Date of last release:\n\nN/A\n\n### When were the last committers or PPMC members elected?\n\nWe haven't started new committers or PPMC members elections yet.\nCurrently, our work focus on improving the design and documents to\nmake the project more approachable for newcomers.\n\n### Have your mentors been helpful and responsive?\n\nYes. Last month, we changed name from MesaTEE to Teaclave. There are a\nlot of changes need to be done. The mentors and infra teams help us a\nlot on the transfer.\n\n### Is the PPMC managing the podling's brand / trademarks?\n\nWe don't find any 3rd parties incorrectly using the podling's name and\nbrand. The VP, Brand has approve the project name.\n(PODLINGNAMESEARCH-175)"},{"id":"/2019/12/03/mitigation-of-intel-sa-00219-in-teaclave-sgx-sdk","metadata":{"permalink":"/blog/2019/12/03/mitigation-of-intel-sa-00219-in-teaclave-sgx-sdk","editUrl":"https://github.com/apache/incubator-teaclave-website/tree/master/site/blog/blog/2019-12-03-mitigation-of-intel-sa-00219-in-teaclave-sgx-sdk.md","source":"@site/blog/2019-12-03-mitigation-of-intel-sa-00219-in-teaclave-sgx-sdk.md","title":"Mitigation of Intel-SA-00219 in Teaclave SGX SDK","description":"Background","date":"2019-12-03T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[{"name":"Yu Ding","key":null,"page":null}],"frontMatter":{"title":"Mitigation of Intel-SA-00219 in Teaclave SGX SDK","date":"2019-12-03T00:00:00.000Z","author":"Yu Ding"},"unlisted":false,"prevItem":{"title":"Podling Teaclave Report - January 2020","permalink":"/blog/2020/01/01/podling-teaclave-report-january-2020"},"nextItem":{"title":"Aapache Incubation Proposal","permalink":"/blog/2019/08/20/apache-incubation-proposal"}},"content":"## Background\n\nIntel issued [Intel SA-00219](https://www.intel.com/content/www/us/en/security-center/advisory/intel-sa-00219.html) on Nov 12, 2019, with CVE number [CVE-2019-0117](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0117). Intel also published a [guidance](https://software.intel.com/en-us/download/intel-sgx-sdk-developer-guidance-intel-sa-00219) to instruct the developers/researchers. Then Intel released [Intel SGX SDK v2.7.1](https://01.org/intel-softwareguard-extensions/downloads/intel-sgx-linux-2.7.1-release-version-string-2.7.101.3), including new memory allocation primitives and corresponding patches in PSW enclaves.\n\nThis article is to help people understand Intel-SA-00219, and how Teaclave SGX SDK handles it.\n\n## The problem statement and my thoughts\n\nThe only statement I found is on the [Intel-SA-00219 page](https://www.intel.com/content/www/us/en/security-center/advisory/intel-sa-00219.html):\n\n> Organize the code/data within enclave memory to avoid putting sensitive materials in DWORD0 and DWORD1 of cache line. The effectiveness of this mitigation is dependent on the ability for the software to avoid the affected memory region. To assist the enclave application providers to modify their code, Intel is releasing SGX SDK update (Windows version 2.5.101.3, Linux version 2.7.101.3) with new memory allocation APIs to avoid the affected memory region. More details about the APIs can be found [here](https://software.intel.com/en-us/download/intel-sgx-sdk-developer-guidance-intel-sa-00219).\n\nIntel does not directly describe the vulnerability here. But it's clear that the 64-byte cache line would contain 8-byte or sensitive data, which can be keys protected by Intel SGX. So the following memory layout can be problematic in SGX:\n\n```\n --------------------------------------------------------------------------------------\n| attacker accessible data A | private key (inaccessible) | attacker accessible data B |\n --------------------------------------------------------------------------------------\n```\n\nIt's equal to a vulnerable data structure like:\n\n```\nstruct foo {\n    uint64_t A;\n    uint64_t secret;\n    uint64_t B;\n}\n```\n\nwhere `foo.A` and `foo.B` are accessible by design, while `foo.secret` is not.\n\nIf an attacker somehow can access either A or B, he probably will have first or last 8-byte of the \"inaccessible\" secret in cache line. Then something bad may happen.\n\nSo, the most straightforward mitigation is to insert additional \"guard bytes\" before and after the sensitive data:\n\n```\n ----------------------------------------------------------------------------------------------\n| attacker data A | 8-byte guard | private key (inaccessible) | 8-byte guard | attacker data B |\n ----------------------------------------------------------------------------------------------\n```\n\nIt results in a modified structure like\n\n```\nstruct foo {\n    uint64_t A;\n    (private) uint64_t _guard0;\n    uint64_t secret;\n    (private) uint64_t _guard1;\n    uint64_t B;\n}\n```\n\nFurther investigation from Intel's code reveals that `_guard1` is not required. So it can be:\n\n```\n     -------------------------------------------------------------------------------\n    | attacker data A | 8-byte guard | private key (inaccessible) | attacker data B |\n     -------------------------------------------------------------------------------\n```\n\n## Intel's new allocator primitive\n\nIntel's guidance provides:\n\n(1) A C++ template `custom_alignment_aligned`\n(2) A C function `sgx_get_aligned_ptr` and one of its parameter's type `struct align_req_t`\n(3) A dynamic memory allocator function `sgx_aligned_malloc`\n\nAfter spending hours on Intel's code, I realized that these primitives are helping developers allocate a larger object which:\n\na) contains all fields of the original object.\nb) adds \"guard bytes\" before and after each \"specified secret field\".\nc) align each \"specified secret field\" on demand\n\n## Intel's patches on PSW enclaves\n\nThe most easy to understand example is from `psw/ae/pse_op/session_mgr.cpp`:\n\n```diff\n@@ -417,7 +461,12 @@ pse_op_error_t pse_exchange_report(uint64_t tick,\n {\n     pse_op_error_t status = OP_SUCCESS;\n     sgx_dh_session_t sgx_dh_session;\n-    sgx_key_128bit_t aek;\n+    //\n+    // securely align aek\n+    //\n+    //sgx_key_128bit_t aek;\n+    sgx::custom_alignment_aligned<sgx_key_128bit_t, sizeof(sgx_key_128bit_t), 0, sizeof(sgx_key_128bit_t)> oaek;\n+    sgx_key_128bit_t& aek = oaek.v;\n     sgx_dh_session_enclave_identity_t initiator_identity;\n     cse_sec_prop_t * pcse_sec = NULL;\n     secu_info_t* psec_info = NULL;\n```\n\nThe template generates a larger struct `oaek`. Size of `sgx_key_128bit_t` is 16 bytes, and `sizeof(oaek)` equals to 32. And the offset of `oaek.v` is 8.\n\nAnd in the same file, another fix is:\n\n```diff\n--- a/psw/ae/pse/pse_op/session_mgr.cpp\n+++ b/psw/ae/pse/pse_op/session_mgr.cpp\n@@ -29,21 +29,65 @@\n  *\n  */\n\n-\n+#include <sgx_secure_align.h>\n #include \"utility.h\"\n #include \"session_mgr.h\"\n #include \"pse_op_t.h\"\n #include \"sgx_dh.h\"\n\n // ISV enclave <-> pse-op sessions\n-static pse_session_t        g_session[SESSION_CONNECTION];\n+//\n+// securely align all ISV enclave - pse sessions' secrets\n+//\n+static sgx::custom_alignment_aligned<pse_session_t, 16, __builtin_offsetof(pse_session_t, active.AEK), 16> og_session[SESSION_CONNECTION];\n+//\n+// following allows existing references to g_session[index]\n+// to not have to change\n+//\n+class CSessions\n+{\n+public:\n+    pse_session_t& operator[](int index) {\n+        return og_session[index].v;\n+    }\n+};\n+static CSessions g_session;\n static uint32_t             g_session_count = 0;\n```\n\nIt seems that the original global `g_session` array is vulnerabile to INTEL-SA-00219. So Intel created a new structure `CSessions` and reloaded the `[]` operator, and used `custom_alignment_aligned` template to create the array of guarded `CSessions`.\n\nWe can see some more complex samples in the same file, such as:\n\n```diff\n // ephemeral session global variables\n static uint8_t              g_nonce_r_pse[EPH_SESSION_NONCE_SIZE] = {0};      // nonce R(PSE) for ephemeral session establishment\n static uint8_t              g_nonce_r_cse[EPH_SESSION_NONCE_SIZE] = {0};      // nonce R(CSE) for ephemeral session establishment\n-static pairing_data_t       g_pairing_data;                       // unsealed pairing data\n-eph_session_t               g_eph_session;                        // ephemeral session information\n+\n+//\n+// securely align pairing data\n+// Id_pse and Id_cse aren't secrets\n+// I don't think pairingNonce is a secret and even if it is, we can't align\n+// all of [mk, sk, pairingID, pairingNonce]\n+//\n+//static pairing_data_t       g_pairing_data;                       // unsealed pairing data\n+static sgx::custom_alignment<pairing_data_t,\n+    //__builtin_offsetof(pairing_data_t, secret_data.Id_pse), sizeof(((pairing_data_t*)0)->secret_data.Id_pse),\n+    //__builtin_offsetof(pairing_data_t, secret_data.Id_cse), sizeof(((pairing_data_t*)0)->secret_data.Id_cse),\n+    __builtin_offsetof(pairing_data_t, secret_data.mk), sizeof(((pairing_data_t*)0)->secret_data.mk),\n+    __builtin_offsetof(pairing_data_t, secret_data.sk), sizeof(((pairing_data_t*)0)->secret_data.sk),\n+    __builtin_offsetof(pairing_data_t, secret_data.pairingID), sizeof(((pairing_data_t*)0)->secret_data.pairingID)\n+    //__builtin_offsetof(pairing_data_t, secret_data.pairingNonce), sizeof(((pairing_data_t*)0)->secret_data.pairingNonce)\n+    > opairing_data;\n+pairing_data_t& g_pairing_data = opairing_data.v;\n+//\n+// securely align pse - cse/psda ephemeral session secrets\n+//\n+//eph_session_t               g_eph_session;                        // ephemeral session information\n+sgx::custom_alignment<eph_session_t,\n+    __builtin_offsetof(eph_session_t, TSK), sizeof(((eph_session_t*)0)->TSK),\n+    __builtin_offsetof(eph_session_t, TMK), sizeof(((eph_session_t*)0)->TMK)\n+> oeph_session;\n+//\n+// this reference trick requires change to declaration\n+// in other files, but still cleaner than changing\n+// all references\n+//\n+eph_session_t& g_eph_session = oeph_session.v;\n\n /**\n  * @brief Check the status of the ephemeral session\n```\n\nTo understand it, let me expand `struct pairing_data_t` here:\n\n```\n/* Pairing blob unsealed and usable inside of enclave*/\ntypedef struct _pairing_data_t\n{\n    se_plaintext_pairing_data_t plaintext; // does not involved\n    struct se_secret_pairing_data_t {\n            SHA256_HASH         Id_pse;\n            SHA256_HASH         Id_cse;\n            SIGMA_MAC_KEY       mk;\n            SIGMA_SECRET_KEY    sk;\n            SIGMA_SECRET_KEY    pairingID;  // old_sk used for repairing check\n            Nonce128_t          pairingNonce;\n            EcDsaPrivKey        VerifierPrivateKey;\n    } secret_data;\n} pairing_data_t;\n```\n\nThe patch seems to protect `mk`, `sk`, and `pairingID`, and all the other fields are commented out. What's more, this patch uses a **undocumented** template `sgx::custom_alignment` defined as:\n\n```cpp\n    template <class T, std::size_t... OLs>\n    using custom_alignment = custom_alignment_aligned<T, alignof(T), OLs...>;\n```\n\n## Experiments on the undocument template\n\nTo test how the undocumented template work, I write the following codes:\n\n```cpp\n    struct foo {\n        uint64_t secret1[5];       // offset = 0\n    };\n\n    typedef sgx::custom_alignment<foo, __builtin_offsetof(foo, secret1), sizeof(((foo*)0)->secret1)> AFOO;\n\n    printf(\"=== Size of foo = %u ===\\n\", sizeof(foo));                               // 40\n    printf(\"=== Size of bar = %u ===\\n\", sizeof(AFOO));                              // 64\n    printf(\"=== offset of AROO.v = %u ===\\n\", __builtin_offsetof(AFOO, v));          // 8\n    printf(\"=== offset of secret1 = %u ===\\n\", __builtin_offsetof(AFOO, v.secret1)); // 8\n```\n\nSo we can see that the structure of AROO is:\n\n```cpp\nstruct AROO {\n    uint64_t _padding_head[1]         // offset = 0, len = 8\n    struct {\n        uint64_t secret1[5];          // offset = 8, len = 40\n    } v;\n    uint64_t _padding_tail[2];        // offset = 40, len = 16\n```\n\nIt seems the undocumented C++ template aligns `AROO` to the next level, and add 8-byte headings into it. If we add the second secret in `foo` like:\n\n```cpp\n    struct foo {\n        uint64_t secret1[5];       // offset = 0\n        uint64_t secret2[1];       // offset = 40\n    };\n\n    typedef sgx::custom_alignment<foo,\n                __builtin_offsetof(foo, secret1), sizeof(((foo*)0)->secret1),\n                __builtin_offsetof(foo, secret2), sizeof(((foo*)0)->secret2)\n            > AFOO;\n\n    printf(\"=== Size of foo = %u ===\\n\", sizeof(foo));            // 48\n    printf(\"=== Size of bar = %u ===\\n\", sizeof(AFOO));           // 64\n    printf(\"=== offset of AROO.v = %u ===\\n\", __builtin_offsetof(AFOO, v));           // 8\n    printf(\"=== offset of AROO.v.secret1 = %u ===\\n\", __builtin_offsetof(AFOO, v.secret1));           // 8\n    printf(\"=== offset of AROO.v.secret2 = %u ===\\n\", __builtin_offsetof(AFOO, v.secret2));           // 48\n```\n\nwe can see that the structure of AROO is:\n\n```cpp\nstruct AROO {\n    uint64_t _padding_head[1]         // offset = 0, len = 8\n    struct {\n        uint64_t secret1[5];          // offset = 8, len = 40\n        uint64_t secret2[1];          // offset = 48, len = 8\n    } v;\n    uint64_t _padding_tail[1];        // offset = 56, len = 8\n```\n\nIf we increase `secret2` to 16-bytes, it works well as usual. And the `_padding_tail` will have **zero length**. So does it means that *only extra heading is required for mitigation*? But it'll not compile if we make `secret2` 24-bytes, like:\n\n```c++\n    struct foo {\n        uint64_t secret1[5];       // offset = 0\n        uint64_t secret2[3];       // offset = 40\n    };\n\n    typedef sgx::custom_alignment<foo,\n                __builtin_offsetof(foo, secret1), sizeof(((foo*)0)->secret1),\n                __builtin_offsetof(foo, secret2), sizeof(((foo*)0)->secret2)\n            > AFOO;\n```\n\nGCC would terminate on:\n\n```\nmake[1]: Entering directory '/root/linux-sgx/SampleCode/Cxx11SGXDemo'\nIn file included from Enclave/TrustedLibrary/Libcxx.cpp:47:0:\n/opt/sgxsdk/include/sgx_secure_align.h: In instantiation of 'struct sgx::__custom_alignment_internal::custom_alignment<ecall_lambdas_demo()::foo, 8ul, -1>':\nEnclave/TrustedLibrary/Libcxx.cpp:125:53:   required from here\n/opt/sgxsdk/include/sgx_secure_align.h:123:13: error: static assertion failed: No viable offset\n             static_assert(LZ > 0, \"No viable offset\");\n             ^\n/opt/sgxsdk/include/sgx_secure_align.h:125:48: error: size of array is negative\n             char __no_secret_allowed_in_here[LZ];\n                                                ^\nMakefile:255: recipe for target 'Enclave/TrustedLibrary/Libcxx.o' failed\n```\n\nNothing changes if we switch to the original template `sgx::custom_alignment_aligned`. So I guess the template does not support structures:\n\n- contains secrets consecutively,  and\n- the consecutive secrets' size is larger than a certain number (not sure yet)\n\nIf we break down `secret1` and `secret2` by inserting something in the middle, the template works:\n\n```c++\nstruct foo {\n  uint64_t secret1[5];       // offset = 0\n  char     dumb;             // offset = 40\n  uint64_t secret2[3];       // offset = 48\n};\n\ntypedef sgx::custom_alignment<foo,\n__builtin_offsetof(foo, secret1), sizeof(((foo*)0)->secret1),\n__builtin_offsetof(foo, secret2), sizeof(((foo*)0)->secret2)\n  > AFOO;\n\nprintf(\"=== Size of foo = %u ===\\n\", sizeof(foo));            // 72\nprintf(\"=== Size of bar = %u ===\\n\", sizeof(AFOO));           // 128\nprintf(\"=== offset of AROO.v = %u ===\\n\", __builtin_offsetof(AFOO, v));           // 24\nprintf(\"=== offset of AROO.v.secret1 = %u ===\\n\", __builtin_offsetof(AFOO, v.secret1));           // 24\nprintf(\"=== offset of AROO.v.secret2 = %u ===\\n\", __builtin_offsetof(AFOO, v.secret2));           // 72\n```\n\n## Changes/Actions required\n\nFrom Intel's usage, we can learn that:\n\n**Don't construct a sensitive data structure directly. Always allocate an aligned structure and fill it up later **\n\nIt means:\n\n* if you allocate something sensitive (e.g. keys in `sgx_key_128bit_t`) on stack/heap, you probably need to allocate another guarded structure first, and get a mutable reference to its inner data.\n* if you want to make `sgx_key_128bit_t` as the type of return value, you can choose between (1) return a guarded structure, or (2) takes an additional argument of caller-allocated, mutuable reference of `sgx_key_128bit_t` and fill it.\n\n## Rust SGX provided primitive\n\n* We provided `AlignBox` as a replacement of `Box`\n\n  * `Box` is somewhat tricky because it always \"initialize on stack first and copy to heap later\". [copyless](https://github.com/kvark/copyless) provides a novel primitive to solve [it but it does not always effective](https://github.com/dingelish/realbox). To this end, we created `AlignBox` which guarantees \"on-heap initialization\" without copying any bits. Usage:\n\n    ```rust\n    let heap_align_obj = AlignBox::<struct_align_t>::heap_init_with_req(|mut t| {\n      t.key1 = [0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff];\n      t.pad1 = [0x00; 16];\n      t.key2 = [0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff];\n      t.pad2 = [0x00; 16];\n      t.key3 = [0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff];\n      t.pad3 = [0x00; 16];\n      t.key4 = [0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff];\n      }, 16, &str_slice);\n    assert!(heap_align_obj.is_some());\n    ```\n\n* We provided aligned key type for each built-in key type. The layout are calculated by Intel's template.\n\n  * `sgx_align_key_128bit_t`\n  * `sgx_align_mac_128bit_t`\n  * `sgx_align_key_256bit_t`\n  * `sgx_align_mac_256bit_t`\n  * `sgx_align_ec256_dh_shared_t`\n  * `sgx_align_ec256_private_t`\n\nWe modified `sgx_tcrypto`, `sgx_tse`, and `sgx_tdh` and use the above primitives for enhancement, following the above required changes. One sample is from `sgx_tcrypto`:\n\n```rust\n+    let mut align_mac = sgx_align_mac_128bit_t::default();\n+    let ret = unsafe {\n+        sgx_rijndael128_cmac_msg(key as * const sgx_cmac_128bit_key_t,\n+                                 src.as_ptr() as * const u8,\n+                                 size as u32,\n+                                 &mut align_mac.mac as * mut sgx_cmac_128bit_tag_t)\n+    };\n```\n\nWe allocate an aligned structure first, and then fill it up using Intel's crypto primitive later."},{"id":"/2019/08/20/apache-incubation-proposal","metadata":{"permalink":"/blog/2019/08/20/apache-incubation-proposal","editUrl":"https://github.com/apache/incubator-teaclave-website/tree/master/site/blog/blog/2019-08-20-apache-incubation-proposal.md","source":"@site/blog/2019-08-20-apache-incubation-proposal.md","title":"Aapache Incubation Proposal","description":"s","date":"2019-08-20T00:00:00.000Z","tags":[],"hasTruncateMarker":true,"authors":[{"name":"The Teaclave PPMC","key":null,"page":null}],"frontMatter":{"title":"Aapache Incubation Proposal","date":"2019-08-20T00:00:00.000Z","author":"The Teaclave PPMC"},"unlisted":false,"prevItem":{"title":"Mitigation of Intel-SA-00219 in Teaclave SGX SDK","permalink":"/blog/2019/12/03/mitigation-of-intel-sa-00219-in-teaclave-sgx-sdk"}},"content":"<!-- truncate -->s\n\n```\nMesaTEE Apache Incubation Proposal\n\n= Abstract =\n\nMesaTEE is a framework for universal secure computing.\n\n= Proposal =\n\nMesaTEE is the next-gen solution to enable general computing service for\nsecurity-critical scenarios. It will allow even the most sensitive data to\nbe securely processed to enable offshore businesses without leakage.\n\nThe solution combines the advanced Hybrid Memory Safety (HMS) model and the\npower of the Trusted Computing technologies (e.g., TPM) as well as the\nConfidential Computing technologies (e.g., Intel SGX).\n\n  * Code base:\n    * https://github.com/mesalock-linux/mesatee\n    * https://github.com/baidu/rust-sgx-sdk\n  * Website: https://mesatee.org\n  * Documentation: https://mesatee.org/doc/mesatee_sdk/\n\n= Background =\n\nThe emerging technologies of big data analytics, machine learning, cloud/edge\ncomputing, and blockchain are significantly boosting our productivity, but at\nthe same time they are bringing new confidentiality and integrity concerns. On\npublic cloud and blockchain, sensitive data like health and financial records\nmay be consumed at runtime by untrusted computing processes running on\ncompromised platforms; during in-house data exchange, confidential information\nmay cross different clearance boundaries and possibly fall into the wrong hands;\nalso not to mention the privacy issue arises in offshore data supply chains.\n\nAlthough the consequences of data breaching have been extensively elaborated, we\nshould also note that proprietary computing algorithms themselves, such as AI\nmodels, also need to be well protected. Once leaked, attackers can steal the\nintellectual properties, or launch whitebox attacks and easily exploit the\nweaknesses of the models.\n\nFacing all these risky scenarios, we are in desperate need of a trusted and\nsecure mechanism, enabling us to protect both private data and proprietary\ncomputing models during a migratable execution in potentially unsafe\nenvironments, yet preserving functionalities, performance, compatibility, and\nflexibility. MesaTEE is targeting to be, as we call it, the full \"Universal\nSecure Computing\" stack, so it can help users resolve these runtime security\nrisks.\n\nMesaTEE aims to promote the development of universal secure computing ecosystem\nthrough open source and openness, to provide basic support for trust protection\nfor the productivity revolution brought by big data and AI, to completely solve\nthe data exchange or multi-party computing between departments/companies, to\nenable privacy-crucial services such as financial and medical care using\nblockchain/cloud services, and to convoy businesses that are closely related to\nlife and safety such as autonomous driving. MesaTEE has been working closely\nwith mainstream cloud computing/blockchain/chip vendors and\nuniversities/research institutions to promote hardware TEE, software memory\nsafety, and versatile computing services to create an internationally protected\nand flexible secure computing framework. MesaTEE’s open-source release will\ngreatly accelerate the development of the next generation of big data business\napplications, and it is also of great importance to promoting AI in all business\nareas.\n\n= Rationale =\n\nMesaTEE stack redefines future AI and big data analytics by providing a trusted\nand secure offshore computing environment. The confidentiality and privacy of\ndata and models can be well protected with MesaTEE, even if data and model\noriginate from different parties with no mutual trust. Moreover, the computing\nplatform itself is not necessarily trusted either. The Trusted Computing Base\n(TCB) can thus be largely reduced to MesaTEE framework alone. A detailed\ndescription of target use-cases can be found at\nhttps://github.com/mesalock-linux/mesatee/blob/master/docs/case_study.md.\n\nWe believe that Apache way of open source community empowers MesaTEE to attract\na diverse set of contributors who can bring new ideas into the project.\n\n= Initial Goals =\n\n  * Move the existing codebase, website, documentation, and mailing lists to an\n    Apache-hosted infrastructure.\n  * Integrate with the Apache development process.\n  * Ensure all dependencies are compliant with Apache License version 2.0.\n  * Incrementally develop and release per Apache guidelines.\n\n= Current Status =\n\nThe MesaTEE project (and its sub-project Rust SGX SDK) has been designed and\ndeveloped at Baidu since 2017, and was open sourced under the Apache License,\nVersion 2.0 in 2019. The source code is currently hosted at github.com\n(https://github.com/mesalock-linux/mesatee and\nhttps://github.com/baidu/rust-sgx-sdk), which will seed the Apache git\nrepository.\n\n== Meritocracy ==\n\nWe are fully committed to open, transparent, and meritocratic interactions with\nour community. In fact, one of the primary motivations for us to enter the\nincubation process is to be able to rely on Apache best practices that can\nensure meritocracy. This will eventually help incorporate the best ideas back\ninto the project and enable contributors to continue investing their time in the\nproject. We already have some guidelines to help external contributors:\n\n  * https://github.com/mesalock-linux/mesatee/blob/master/docs/rust_guideline.md\n  * https://github.com/mesalock-linux/mesatee/blob/master/docs/how_to_add_your_function.md\n  * https://github.com/mesalock-linux/mesatee/blob/master/CODE_OF_CONDUCT.md\n\n== Community ==\n\nThe MesaTEE community is fairly young. Since our sub-project (Rust SGX SDK) was\nopen sourced in 2017, we received many contributions from various companies and\nindividual researchers (https://github.com/baidu/rust-sgx-sdk/pulls). Our\nprimary goal during the incubation would be to grow the community and groom our\nexisting active contributors for committers.\n\n== Core Developers ==\n\nCurrent core developers work at Baidu. We are confident that incubation will\nhelp us grow a diverse community in an open and collaborative way.\n\n== Alignment ==\n\nMesaTEE is designed as a framework for universal secure computing. This is\ncomplementary to the Apache's projects, providing a trusted and secure computing\nframework.\n\nOur sincere hope is that being a part of the Apache foundation would enable us\nto drive the future of the project in alignment with the other Apache projects\nfor the benefit of thousands of organizations that already leverage these\nprojects.\n\n= Known Risks =\n\n== Orphaned Products ==\n\nThe risk of abandonment of MesaTEE is low. MesaTEE has been incubated at Baidu\nfor over two years. Baidu is committed to the further development of the project\nand will keep investing resources towards the Apache processes and community\nbuilding, during the incubation period.\n\n== Inexperience with Open Source ==\n\nEven though the initial committers are new to the Apache world, some have\nconsiderable open source experience - Yu Ding, Yiming Jing, Mingshen Sun. We\nhave been successfully managing the current open source community, answering\nquestions, and taking feedback already. Moreover, we hope to obtain guidance and\nmentorship from current ASF members to help us succeed in the incubation.\n\n== Length of Incubation ==\n\nWe expect the project to be in incubation for 2 years or less.\n\n== Homogenous Developers ==\n\nCurrently, the lead developers for MesaTEE are from Baidu. However, we have an\nactive set of early contributors/collaborators from Alibaba and other companies,\nwhich we hope will increase the diversity going forward. Once again, a primary\nmotivation for the incubation is to facilitate this in the Apache way.\n\n== Reliance on Salaried Developers ==\n\nBoth the current committers and early contributors have several years of core\nexpertise around designing trusted computing systems. Current committers are\nvery passionate about the project and have already invested hundreds of hours\ntowards helping and building the community. Thus, even with employer changes, we\nexpect they will be able to actively engage in the project either because they\nwill be working in similar areas even with newer employers or out of belief in\nthe project.\n\n== Relationships with Other Apache Products ==\n\nTo the best of our knowledge, there are no directly competing projects with\nMesaTEE that offer all of the feature set - memory safety, secure computing,\nmulti-party computation, etc. However, some projects share similar goals, e.g.,\nOpenWhisk which provides a serverless cloud platform. We are committed to open\ncollaboration with such Apache projects and incorporating changes to MesaTEE or\ncontributing patches to other projects, with the goal of making it easier for\nthe community at large, to adopt these open source technologies.\n\n== Excessive Fascination with the Apache Brand ==\n\nThe Apache Brand is very respected. We are very honored to have the opportunity\nto join ASF, with the understanding that its brand policies shall be respected.\nAnd we hope Apache can help us build the ecosystem around MesaTEE and attract\nmore developers.\n\n= Documentation =\n\n  * Detailed documentation: https://github.com/mesalock-linux/mesatee\n  * MesaTEE SDK API documentation: https://mesatee.org/doc/mesatee_sdk/\n\n= Initial Source =\n\nThe codebase is currently hosted on Github:\n\n  * https://github.com/mesalock-linux/mesatee\n  * https://github.com/baidu/rust-sgx-sdk\n\nDuring incubation, the codebase will be migrated to an Apache infrastructure.\nThe source code of MesaTEE is under Apache version 2.0 License, while Rust SGX\nSDK is under BSD 3-Clauses License.\n\n= Source and Intellectual Property Submission Plan =\n\nWe will work with the committers to get ICLAs signed. We will provide a Software\nGrant Agreement from an authorized signer per\nhttps://www.apache.org/licenses/software-grant-template.pdf\n\n= External Dependencies =\n\nMesaTEE directly depends on these third-party Rust crates:\n\n  * adler32, 1.0.3, BSD-3-Clause\n  * aho-corasick, 0.7.4, Unlicense/MIT\n  * array_tool, 1.0.3, MIT\n  * assert_matches, 1.3.0, MIT/Apache-2.0\n  * autocfg, 0.1.4, Apache-2.0/MIT\n  * base64, 0.10.1, MIT/Apache-2.0\n  * bincode, 1.1.4, MIT\n  * bit-vec, 0.6.1, MIT/Apache-2.0\n  * bitflags, 1.1.0, MIT/Apache-2.0\n  * byteorder, 1.3.2, MIT/Unlicense\n  * bytes, 0.5.0, MIT\n  * cc, 1.0.37, MIT/Apache-2.0\n  * cfg-if, 0.1.9, MIT/Apache-2.0\n  * chrono, 0.4.7, MIT/Apache-2.0\n  * color_quant, 1.0.1, MIT\n  * crc32fast, 1.2.0, MIT\n  * ctor, 0.1.9, Apache-2.0\n  * deflate, 0.7.20, MIT/Apache-2.0\n  * either, 1.5.2, MIT/Apache-2.0\n  * env_logger, 0.6.2, MIT/Apache-2.0\n  * erased-serde, 0.3.9, MIT\n  * fnv, 1.0.6, Apache-2.0\n  * getrandom, 0.1.6, MIT\n  * ghost, 0.1.0, MIT/Apache-2.0\n  * gif, 0.10.2, MIT/Apache-2.0\n  * gzip-header, 0.3.0, MIT/Apache-2.0\n  * half, 1.3.0, MIT/Apache-2.0\n  * hashbrown, 0.3.1, Apache-2.0/MIT\n  * heapsize, 0.4.2, MIT/Apache-2.0\n  * hex, 0.3.2, MIT\n  * http, 0.1.17, MIT/Apache-2.0\n  * httparse, 1.3.4, MIT/Apache-2.0\n  * humantime, 1.2.0, MIT/Apache-2.0\n  * image, 0.21.0, MIT\n  * inflate, 0.4.5, MIT\n  * inventory, 0.1.3, MIT\n  * inventory-impl, 0.1.3, MIT\n  * iovec, 0.2.0, MIT/Apache-2.0\n  * itertools, 0.8.0, MIT/Apache-2.0\n  * itoa, 0.4.4, MIT\n  * jpeg-decoder, 0.1.15, MIT\n  * lazy_static, 1.3.0, MIT/Apache-2.0\n  * libc, 0.2.59, MIT\n  * linked-hash-map, 0.5.2, MIT/Apache-2.0\n  * log, 0.4.7, MIT\n  * lzw, 0.10.0, MIT/Apache-2.0\n  * matrixmultiply, 0.2.2, MIT/Apache-2.0\n  * md5, 0.6.1, Apache-2.0/MIT\n  * memchr, 2.2.1, Unlicense/MIT\n  * memory_units, 0.3.0, MPL-2.0\n  * net2, 0.2.33, MIT/Apache-2.0\n  * num, 0.2.0, MIT/Apache-2.0\n  * num-bigint, 0.2.2, MIT/Apache-2.0\n  * num-complex, 0.2.3, MIT/Apache-2.0\n  * num-integer, 0.1.41, MIT/Apache-2.0\n  * num-iter, 0.1.39, MIT/Apache-2.0\n  * num-rational, 0.2.2, MIT/Apache-2.0\n  * num-traits, 0.2.8, MIT/Apache-2.0\n  * parity-wasm, 0.31.3, MIT/Apache-2.0\n  * png, 0.14.1, MIT/Apache-2.0\n  * proc-macro2, 0.4.30, MIT/Apache-2.0\n  * profiler_builtins, 0.1.0, profiler_builtins\n  * quick-error, 1.2.2, MIT/Apache-2.0\n  * quote, 0.3.15, MIT\n  * quote, 0.6.13, MIT\n  * rand, 0.6.5, MIT/Apache-2.0\n  * rand_core, 0.4.0, MIT/Apache-2.0\n  * rand_hc, 0.1.0, MIT/Apache-2.0\n  * rand_pcg, 0.1.2, MIT/Apache-2.0\n  * rawpointer, 0.1.0, MIT/Apache-2.0\n  * regex, 1.1.9, MIT/Apache-2.0\n  * regex-syntax, 0.6.8, MIT/Apache-2.0\n  * ring, 0.14.6, ISC-style\n  * rulinalg, 0.4.2, MIT\n  * rustls, 0.15.2, Apache-2.0/ISC/MIT\n  * rusty-machine, 0.5.4, MIT\n  * ryu, 1.0.0, Apache-2.0\n  * sct, 0.5.0, Apache-2.0/ISC/MIT\n  * serde, 1.0.94, MIT\n  * serde_cbor, 0.10.0, MIT/Apache-2.0\n  * serde_derive, 1.0.94, MIT\n  * serde_json, 1.0.40, MIT\n  * sha1, 0.6.0, BSD-3-Clause\n  * sha2, 0.8.0, sha2\n  * spin, 0.5.0, MIT\n  * syn, 0.11.11, MIT\n  * syn, 0.15.39, MIT\n  * synom, 0.11.3, MIT/Apache-2.0\n  * termcolor, 1.0.5, Unlicense\n  * thread_local, 0.3.6, Apache-2.0/MIT\n  * tiff, 0.3.1, MIT\n  * toml, 0.5.1, MIT/Apache-2.0\n  * typetag, 0.1.3, MIT\n  * typetag-impl, 0.1.3, MIT\n  * ucd-util, 0.1.3, MIT/Apache-2.0\n  * unicode-xid, 0.0.4, MIT/Apache-2.0\n  * unicode-xid, 0.1.0, MIT/Apache-2.0\n  * utf8-ranges, 1.0.3, Unlicense/MIT\n  * uuid, 0.7.4, Apache-2.0\n  * wabt, 0.6.0, Apache-2.0\n  * wasmi, 0.5.0, MIT/Apache-2.0\n  * wasmi-validation, 0.1.0, MIT/Apache-2.0\n  * webpki, 0.19.1, ISC-style\n  * webpki-roots, 0.16.0, MPL-2.0\n  * winapi, 0.3.7, MIT/Apache-2.0\n  * winapi-i686-pc-windows-gnu, 0.4.0, MIT/Apache-2.0\n  * winapi-util, 0.1.2, Unlicense/MIT\n  * winapi-x86_64-pc-windows-gnu, 0.4.0, MIT/Apache-2.0\n  * wincolor, 1.0.1, Unlicense/MIT\n  * yasna, 0.3.1, MIT/Apache-2.0\n\nNote that this is not an exhaustive dependency list and only direct\ndependencies\nof MesaTEE's trusted libs are included.\n\n== Cryptography ==\n\nMesaTEE uses following cryptographic libraries:\n\n  * ring (https://github.com/briansmith/ring): a Rust crypto library based on\nBoringSSL\n  * rustls: a Rust TLS library\n  * sgx_tcrypto in Intel SGX SDK (https://software.intel.com/en-us/sgx/sdk)\n\n= Required Resources =\n\n== Mailing lists ==\n\n  * private@mesatee.incubator.apache.org (with moderated subscriptions)\n  * dev@mesatee.incubator.apache.org\n  * commits@mesatee.incubator.apache.org\n  * user@mesatee.incubator.apache.org\n\n== Git Repositories ==\n\nUpon entering incubation, we want to transfer the existing repos from\nhttps://github.com/mesalock-linux/mesatee and\nhttps://github.com/baidu/rust-sgx-sdk to Apache organization in GitHub like:\n\n  * https://github.com/apache/incubator-mesatee\n  * https://github.com/apache/incubator-mesatee-rust-sgx-sdk\n\n== Issue Tracking ==\n\nMesaTEE currently uses GitHub to track issues. Would like to continue doing\nso.\n\n== Continuous Integration Service ==\n\nMesaTEE currently uses self-hosted continuous integration (CI) service which can\nhelp developers to automatically test commits. The CI service involves several\nnodes which support Intel SGX. We would like to continue doing so.\n\n= Initial Committers =\n\nThe list is sorted alphabetically:\n\n  * Mingshen Sun <mssun at mesatee.org>\n  * Pei Wang <wangpei at mesatee.org>\n  * Rundong Zhou <rundongzhou at mesatee.org>\n  * Tao Wei <lenx at mesatee.org>\n  * Tongxin Li <litongxin at mesatee.org>\n  * Yiming Jing <jingyiming at mesatee.org>\n  * Yu Ding <d at mesatee.org>\n  * Yulong Zhang <ylzhang at mesatee.org>\n  * Zhaofeng Chen <zf at mesatee.org>\n\n= Sponsors =\n\n== Champion ==\n\n  * Zhijie Shen <zjshen@apache.org>\n\n== Nominated Mentors ==\n\n  * Jianyong Dai <daijy@apache.org>\n  * Luciano Resende <lresende@apache.org>\n  * Matt Sicker\n  * Furkan Kamaci\n\n== Sponsoring Entity ==\n\nThe Incubator PMC\n```"}]}}